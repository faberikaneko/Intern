In Section 14, Score:0.001066
Ｆｌａｇ：：０１００
開発プロセスにより何が変わるのか
ここで、両プロセスを比較してみます。
そして、ウォーターフォールプロセスが得意とする状況とされるのは以下の通りです。
・高い可用性が求められるシステムである場合
・メンバーの開発経験が少ない場合
・要件がほとんど変わらない場合
・開発メンバーの数が多い場合
・組織的文化が秩序を重視するものである場合
対してアジャイルはその正反対の状況を得意とします。
・可用性よりも優先されるものがあるシステム
・メンバーとして開発に熟練した開発者が参加している場合
・要件が常に変化していく場合
・開発メンバーの数が少ない場合
・組織的文化がさまざまな状況に意欲を持って取り組む場合
paraword
clueword:
対する, 多い, 的だ, 場合, 比較, プロセス, 通り, 少ない, 高い, 変化, 状況, 以下
image : 0.000153981908353
table : 0.000558117958022
graph : 0.000289331267997
flow : 6.43945884616e-05

In Section 9, Score:0.000885
Ｆｌａｇ：：１０００
アジャイル開発プロセス
アジャイル開発プロセスでは１つの開発サイクルを小さく（１サイクルの要求を小さく）し、開発の各サイクルをプロジェクトが完了するまで反復します。問題を細分化し、段階的に開発を進めていきます。アジャイルプロセスの中には、ＸＰ、アジャイル統一プロセス（ＲＵＰ）、ＳＣＲＵＭ等のさまざまな方法論があります。
paraword
clueword:
細分, プロセス, サイクル, 方法, 問題, 的だ, 小さい
image : 0.000167448146524
table : 0.000230052471426
graph : 8.45569043908e-05
flow : 0.00040307794749

In Section 5, Score:0.000805
Ｆｌａｇ：：１０００
・システムのユーザーは、自分自身がどんなシステムが欲しいのかを理解しておらず、さらに、要求を明確に伝えることができない。
・仮にすべての要求を明確にすることができたとしても、そのすべてを実装に落とし込むために必要な詳細には達しない。
・仮にすべての詳細を知ることができたとしても、通常それは複雑過ぎて、人間の理解の範囲を超えている。
・仮に人間がこのすべての複雑な要求を理解できたとしても、外的要因により要件は変化する。場合によっては、以前の決定事項を覆すこともある。
paraword
clueword:
的だ, 場合, 要因, 範囲, 以前, 変化, 過ぎる, 事項, 通常, 複雑だ
image : 0.000148898059985
table : 0.000521871077912
graph : 8.05128811028e-05
flow : 5.34977558149e-05

In Section 13, Score:0.000623
Ｆｌａｇ：：００１０
統計・分析における開発現場の実態
独立行政法人情報処理推進機構（ＩＰＡ）の統計（出典：『ソフトウェア開発データ白書２００８』）によると、実に９５％以上のプロジェクトがウォーターフォール型のライフサイクルで開発されています。恐らく、ウォーターフォール型のプロセスの方が誰にでも理解しやすいこと、改修案件の場合など前回のプロセスがウォーターフォール型であったため、今回も同じプロセスを採用するという心理が働いたりすることが原因ではないかと考えられます。
次に、ユーザーの要求仕様に関して、３５％以上のプロジェクトは「あいまい」であり、３０％以上のプロジェクトで「ユーザー担当者の要求仕様への関与が不十分」という統計もあります。
その結果、ＱＣＤをすべて達成したと評価するプロジェクトは全体の２／３程度で、残りは品質、コスト、工期のいずれかの項目が計画通りに達成できなかったというデータもあります。このように、３つに１つのプロジェクトは、ウォーターフォールの当初の計画通りに進んでないということになります。つまり、プロジェクトの初期段階で完全な計画を立てるのは非常に難しいことが分かります。
paraword
clueword:
分析, コスト, 同じだ, 統計, 計画, 項目, 当初, 処理, 初期, 通り, 次に, 以上, 全体, 場合, プロセス, サイクル, 程度, 考える, 原因
image : 4.30488962488e-05
table : 0.000285131551787
graph : 7.07834264307e-05
flow : 0.000223788166267

In Section 3, Score:0.000615
Ｆｌａｇ：：０１００
ウォーターフォール開発プロセス
ウォーターフォール開発プロセスとアジャイル開発プロセスの根本的な違いは、実行可能なソフトウエア（ビルド）を単位として開発を反復するか否かにあります。
paraword
clueword:
的だ, プロセス, 違う
image : 8.21145426227e-05
table : 0.0003439621511
graph : 4.71475719e-05
flow : 0.000142057684029

In Section 4, Score:0.000585
Ｆｌａｇ：：０００１
ウォーターフォールプロセスは、従来のソフトウエア開発において最もポピュラーな開発プロセスであり、「要求分析」「設計」「実装」「テスト」「結合」を順序通りにこなしていきます。滝から水が落ちるように、前工程の成果物に基づき次の工程の作業を行い、前工程への手戻りを想定していません。
paraword
clueword:
分析, 順序, 最も, プロセス, 通り, 工程
image : 6.77920141012e-06
table : 9.32101079876e-05
graph : 7.06354855521e-05
flow : 0.000413967763467

In Section 10, Score:0.000568
Ｆｌａｇ：：０００１
例えばＲＵＰにおいては、ただやみくもにサイクルを実行するのではなく、各サイクルを「方向付け」「推敲（すいこう）」「作成」「移行」という４つのフェーズに分類し、これらのフェーズを経てリリースにいたります。各フェーズは１つ以上の反復で構成されます。このように、短いスパンで成果物をリリースし、その都度評価を行うことにより、リスクを最小化しようとしたのがＲＵＰのアジャイルプロセスです。
paraword
clueword:
作成, 構成, プロセス, サイクル, 短い, 例えば, 分類, 以上
image : 0.000155185330469
table : 0.000185379006769
graph : 0.000134504618904
flow : 9.30131948947e-05

In Section 7, Score:0.000530
Ｆｌａｇ：：００１０
その結果、プロジェクトの実績を品質コスト工期（ＱＣＤ）の視点から評価した結果、コストと納期は比較的順守されているものの、品質に関しては計画値に達しないプロジェクトが２０％以上にのぼり、ＱＣＤをすべて達成したと評価するプロジェクトは６３％にとどまります。
paraword
clueword:
コスト, 比較的, 以上, 計画
image : 3.37051431939e-05
table : 0.000178091352526
graph : 0.00014003247398
flow : 0.000177721358299

In Section 11, Score:0.000446
Ｆｌａｇ：：１０００
アジャイルでは以下の要素すべてが成り立たない限り、コミュニケーションコストだけが増大してプロジェクトは崩壊します。
・メンバー間の意思疎通
・問題の理解
・解決策の提案
paraword
clueword:
増大, 要素, 問題, 以下, コスト
image : 0.000192720580049
table : 8.82496729915e-05
graph : 0.000119005083795
flow : 4.57665903886e-05

In Section 2, Score:0.000409
Ｆｌａｇ：：０１００
開発手法は単純にウォーターフォールが悪い、アジャイルは良い、というものではなく、重要なのはプロジェクトを失敗させないことにあります。どのような開発手法においても、プロジェクトには必ずリスクが存在します。プロジェクト失敗の原因の多くは以下のようなものです。
・スケジュールの欠陥―強気過ぎるスケジュールは悪。予実の乖離（かいり）を生み出す。
・要求の増大（変更）―外的要因も影響し、時間の経過と共に要求は変わっていく。
・人員の離脱―見積もりの時点で、メンバー離職の可能性は大抵考慮されていない。
・仕様の崩壊―仕様はあいまいに作れるが、製品はあいまいに作れない。
・生産性の低迷―少人数チームでは平均値のブレが大きい。能力がマイナスに振れるリスク
これらのリスクが担保できるのであれば、開発プロセスがアジャイルでもウォーターフォールであっても構いません。それぞれのメリット・デメリットを検討した上、よりプロジェクトが成功しやすい開発プロセスを選択すべきです。
paraword
clueword:
増大, 悪い, 構う, 以下, 多く, メリット, 的だ, 経過, デメリット, 大きい, プロセス, 要因, 時間, 平均, 過ぎる, 影響, 時点, 原因
image : 9.34011104586e-05
table : 0.000137508792974
graph : 0.000121944295409
flow : 5.5689391535e-05

In Section 15, Score:0.000315
Ｆｌａｇ：：００００
アジャイルプロセスでは、プロジェクトの早い段階から「動くコード」を作成します。当然、機能はまったく足りないかもしれませんが、実装したところまでは動かすことができるコードになっているはずです。また、小さく作りこんでいくプロセスなので、サイクルごとにかじ取りの判断ができ、顧客からの要望が取り入れやすいのが特徴です。アジャイルプロセスの基本スタンスは、変化を受け入れることで、要求の変更が前提に考えられています。
ＰｒｏｊｅｃｔＫｅｅｐｅｒ／ＳａｌｅｓＦｏｒｃｅＡｕｔｏｍａｔｉｏｎ＋の開発プロセス
最初のバージョンの開発が始まってから約４年がたちましたが、当初はメンバー約２名で立ち上げました。自社製のＷｅｂシステム構築用のフレームワークがあったことや、受託開発でさまざまなシステムを構築した経験があったメンバーであったため２名で約６ヶ月の期間で開発を行うことはできました。
当初はパッケージ開発におけるノウハウはほとんどなかったため、受託開発時に当時よく使っていたウォーターフォール手法を必然的に採用しました。
しかし、パッケージ製品の開発においては延々と開発を継続していかなければならず、受託開発のように納品することで、開発が完了するわけではありません。製品は日々進化する必要があり、顧客からのフィードバックをスムーズに製品に取り入れていかなければ、製品の魅力を維持することができません。
仕様変更、機能拡張がたびたび発生していく状況では、各機能間の整合性や品質を維持することが困難になり、開発プロセスをより仕様変更に強いアジャイル開発手法へスイッチすることで、柔軟な仕様変更、スピーディーな製品リリースを行うことができるようになりました。
昨今では多種多様なシステムが身の回りに存在しています。さまざまなシステムを目にし、操作することで、古いシステムの操作性や機能へ不満を抱く機会も多くなるでしょう。このような顧客を常に満足させるためには、システムは常に進化していかなければならず、おのずと今後の開発手法の主流はアジャイルへと進んでいくのではないでしょうか？
paraword
clueword:
当初, 基本, 状況, 今後, 多い, 維持, 考える, 変化, 始まる, 的だ, 最初だ, 作成, 期間, 作る, 特徴, 主流, プロセス, サイクル, 発生, 小さい, 使う
image : 4.07300218895e-05
table : 6.48521885917e-05
graph : 7.89035668004e-05
flow : 0.000130191021551

In Section 8, Score:0.000206
Ｆｌａｇ：：００００
ウォーターフォールプロセスをうまくコントロールし、リスクを担保できるプロジェクトが少なかったという数値の裏付けが、この値から導き出されます。そこで、このプロセスの弱点を克服すべく登場したのが反復開発を軸とするアジャイルプロセスでした。
paraword
clueword:
プロセス, 少ない
image : 3.23054766415e-05
table : 1.43348623853e-05
graph : 4.73484848497e-05
flow : 0.000112092391304

In Section 1, Score:0.000165
Ｆｌａｇ；；１０００
さまざまな開発手法
開発プロジェクトに内在するリスク
アジャイルソフトウエア開発という言葉が生まれて約８年が経過しました。その間、従来型であるウォーターフォール開発プロセスと対比して、さまざまな議論が繰り返されてきたのはご存じの通りです。
本連載では、代表的な開発手法の紹介および、弊社プロダクトであるＳＩＯＳＡｐｐｌｉｃａｔｉｏｎｓ（ＰｒｏｊｅｃｔＫｅｅｐｅｒ／ＳａｌｅｓＦｏｒｃｅＡｕｔｏｍａｔｉｏｎ＋）における事例を元に、その開発手法の選定に至るまでのプロセスを紹介します。
paraword
clueword:
代表, 的だ, 経過, 対比, プロセス, 通り
image : 3.83207430016e-05
table : 3.30198684608e-05
graph : 1.89717321191e-05
flow : 7.44846700153e-05

In Section 12, Score:0.000086
Ｆｌａｇ：：００００
つまり、このプロセスはプロダクトオーナーに負担が掛かりやすいと言えます。開発者を用意してプロセスに乗せるだけで、希望したものができてくるということはありません。
しかし、これは「アジャイルだから」という問題ではなく、アジャイルの本質を理解しないまま似非（えせ）アジャイルを実践することによる問題です。アジャイルプロセスの理解は、ウォーターフォールのそれよりもはるかに困難です。
paraword
clueword:
プロセス, 問題
image : 0.0
table : 1.35814206166e-05
graph : 0.0
flow : 7.20996285775e-05

In Section 6, Score:0.000032
Ｆｌａｇ：：００００
ユーザーは出来上がったシステムを目の当たりにして初めて、自分たちが望んでいないものを理解します。また、市場は常に流動しており、提案時には最先端の製品であったにも関わらず、開発完了時には市場の期待に沿っているとは限りません。ビジネスは常に変化していくものです。
paraword
clueword:
変化
image : 0.0
table : 0.0
graph : 2.16450216448e-05
flow : 1.04275286762e-05

Flag：：0100
コーディング規約の内容
コーディング規約の内容は、プロジェクトの規模や特性、参加メンバーのスキル、使用言語などにより変更すべきですが、たいていこんな内容が書かれています。
目的
プロジェクトの構成
命名規則
コーディングスタイル
禁止事項
制限事項
推奨事項
目的
そのコーディング規約の適用範囲、なぜ必要なのか、それを守ることによりどんなメリットがあるかを書く。
プロジェクトの構成
コーディングにはあまり関係なさそうな内容ですが、ソースプログラムの先頭にコメントを入れたりするのに使います。プロジェクトの名称などはあらかじめ決まっていることが多いので、もし、そうなら一覧表を付けます。メタ情報の指定方法、フォルダの構成方法なども決めておきます。
命名規則
変数、定数、メソッド（関数）、クラスなどの名前の付け方の基準を決める。変数名の先頭は小文字だとか、クラス名の先頭は大文字だとかがよく使われます。
コーディングスタイル
コーディングスタイルはインデントの仕方とか、中かっこの位置とか、コメントの位置や内容とかを決めておきます。
リソース
エラーメッセージなどはハードコーディングしないで、よくリソースファイルのインデックスを指定したりします。もし使うなら、リソースの使用についての説明、制限なども書いておきましょう。（あまり大きいリソースの管理はたいへんなのでバランスを考えたほうがいいです。特にIDEを使う場合。）
禁止事項
使ってはいけない文法や今はほとんど使われない保守用になっているものとかを揚げておきます。一律に禁止でなく、場合によっては例外も設けておきます。（なぜ禁止なのか、その理由も必ず書きます）
制限事項
あまり推奨されない機能、コーディング方法、クラスなどを揚げておきます。また、その条件を明示します。
推奨事項
好ましいコーディング方法や複数の似たようなクラスや関数などがある場合、どちらが推奨されるかを書いておきます。
image : 0.846931569193
table : 0.584123540472
graph : 0.247487800643
flow : 0.584660647432
bad

Flag：：0100
コーディング規約のメリット・デメリット
コーディング規約のメリットはプログラマの個性を殺して均質なプログラムを作ること、過去の知識や経験から得られたバグの発生源となりやすいコーディングの防止、インデントやコメントの基準を決めて見やすさ保守性の高さを求める・・・等々です。
一方、デメリットですが、使える文法を制限してスキルの高いプログラマの生産性を殺したり、過去のプログラムとの互換性を追求するあまり新しい機能の使用を制限したり・・・等々があります。
一般に、大きなプロジェクトほどコーディング規約の内容は強制的、制限的です。これは、大きなプロジェクトだと、スキルの低い人もメンバーに入っていることが多く、コーディングを自由にやらせると、品質が落ちたり、プログラムが見づらく保守性が悪くなるったりするためです。
image : 0.63676594405
table : 0.40115232772
graph : 0.191068699747
flow : 0.409774837122
bad

Flag：：0000
コーディング規約を作るときの注意
続く．．
VB．NET版のサンプルを作ってみました
たたき台程度の内容ですが、参考になればと思います。
あと、用例も入れたほうがいいですね。
image : 0.500138056604
table : 0.189246318621
graph : 0.144651552317
flow : 0.250748470058
bad

Flag：：1000
内容は変数などの命名規則、禁止事項（例えばgoto文はダメとか）、コメントの付け方とか、いろいろプロジェクトの特性やその会社の文化などで変わります。
image : 0.501100666159
table : 0.180471366214
graph : 0.169879529469
flow : 0.194562476168
good!

Flag：：0000
コーディング規約とは
「コーディング規約」は多数のプログラマが参加するプロジェクトにおいて、プログラミング品質を均等にするために定める文書です。
image : 0.473753608098
table : 0.187484109173
graph : 0.132816303175
flow : 0.18937897783


 check is 1 / 4
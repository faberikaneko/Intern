In Section 4, Score:2.093919
Flag：：0100
1.Javaとは
・どんな言語か
ここしばらくTIOBEのランキングで1位を取っている有名言語。でも親会社はドナドナされた。
中間コードにコンパイルされVM上で動作するので移植性が高く、Web系や組込み系、Androidなど幅広い分野で利用されている。でも親会社はドナドナされた。
そんな言語も今ではプロプライエタリの申し子であるOracleさんの持ち物となり、今後どうなっていくかは今ひとつ不透明ドナ。
・長所
実行速度はCに及ばないもののスクリプト言語よりは数十倍速い。ガベージコレクション付き言語の中では最速クラス。
下位互換とクロスプラットフォームが割としっかりしているので、一度コードを書けばそれが広い範囲で長期間利用できる。Java1.4で書かれたライブラリが今でも普通にJava6から呼ばれていたりするみたいな。
・短所
VMを立ち上げるのに時間がかかるので、一瞬で終わる軽い処理を実行する場合はどの言語よりももっさりした動きになる。
名前空間とか、型の宣言とか、かなり厳密にやらないといけない。ダックタイピングなんてお行儀の悪いこともできない。ちゃんとインターフェース書きなさい、とな。
バグを防ぐという意味では厳密さはありがたくもあるけど、コード量は多くなるしディレクトリ構造は複雑になるので、コードを書く時はIDEがないとやってられない。
paraword
list
  [組/くみ+込み/こみv+系/けい, Android/Android, Web/Web+系/けい]
to root
  [分野/ぶんや, 利用/りよう]
to reaf
  []
list
  [クロスプラットフォーム/クロスプラットフォーム, 下位/かい+互換/ごかん]
to root
  [する/する, 利用/りよう]
to reaf
  []
list
名前/なまえ+空間/くうかん:
宣言/せんげん:型/かた?型/けい
to root
  [やる/やる]
to reaf
  []
description : 名前/なまえ+空間/くうかん
	 : もっと良い名前はなかったのだろうか。
clueword:
インターフェース, 上, 名前, 今, 前, 長所, 持, 場合, 系, 構造, 広い, 短所, 長期, 最速, 時, どの, そんな, どう, ライブ, いけない, 型, 量, 名, 語, 有名, ディレクトリ, プロプライエタリ, 長, 会, 動作, スクリプト, 行儀, 間, て, 期, 軽い, どんな, ガベージコレクション, クロスプラットフォーム, コード, 普通, 互換, 持ち物, フォーム, いく, コンパイル, 会社, した, なん, 複雑, 度, ない, 悪い, 動, 数, 空, 後, 中, ど, ランキング, 分野, もの, な, 空間, もも, 物, 実行, 親会社, 移植, ひと, こと, 倍, 時間, 書, 透明, も, ダックタイピング, イン, 処理, 今後, 言語, 実, の, ライブラリ, 宣言, い, クラス, や, 期間, 数十, 倍速, では, コレクション, 味, 高, ピン, 幅, 分, 多く, 下位, から, 所, 中間, そ, 意味, 範囲, 理, 利用, さん, 下, 速度, とか, 悪
image : 0.79768348499
table : 0.536971312595
graph : 0.286839622801
flow : 0.472424721765

In Section 22, Score:2.093200
Flag：：0100
10.JavaScriptとは
・どんな言語か
ブラウザ上で動く言語。最近はnode．jsなんていうサーバサイドJavaScriptなんてものも出てきている。
ブラウザの世界はどこの国土にも属さない紛争地域になっているので、そこで生息するJavaScriptは周囲からのいろんな要求を受け入れてファットになるか、何も受け入れずに「勝手にしろ」と開き直るかのどちらかを選択する必要があった。
そこで彼は基本的なことだけをサポートした上で「あとはjQueryにでも言えよ。俺に言うな」というスタンスを取った。それで彼はあの激戦区の中にいてもハウルの城になることもなく、小さくシンプルなままの姿で居ることができている。
・長所
ブラウザ紛争地域で勝者になるには速度を追い求める必要があることから、実行速度は「その辺のスクリプト言語よりもよほど速いんじゃない？」というベンチマークをたたき出すようになっている。JITがトレーシングで最適化な感じで。
JavaScriptは軽量な言語だけど意外と何でもできる。オブジェクト指向だろうと、イベント指向だろうと、メタプロだろうと、関数型プログラミングだろうと、割と無理なく実現できる。
・短所
メインはブラウザ上で動作する言語なので、用途は限られる。間違っても巨大ファイルを操作してデータ処理をしようなんて用途に使うものではない。
一人前のJavaScript使いになるためには、ブラウザの違いに翻弄されて目を血走らせながら「IEがぁ、IEがあぁぁ」と叫ぶ儀式を通過しなければいけない。
paraword
list
node/node:最近/さいきん
出る/でる:js/js,言う/いう,サーバー/さーばー+サイド/さいど+JavaScript/JavaScript,物/もの?者/もの
to root
  []
to reaf
  []
list
  [オブジェクト/おぶじぇくと+指向/しこう, メタプロ/メタプロ, イベント/いべんと+指向/しこう, 関数/かんすう+型/かた?型/けい+プログラミング/ぷろぐらみんぐ]
to root
  [実現/じつげん]
to reaf
  []
list
  [ぁ/ぁ, IE/IE]
to root
  [ああ/ああ, 叫ぶ/さけぶ, 儀式/ぎしき, 通過/つうか]
to reaf
  []
description : JavaScript/JavaScript
	 : ブラウザの世界はどこの国土にも属さない紛争地域になっているので、そこで生息するJavaScriptは周囲からのいろんな要求を受け入れてファットになるか、何も受け入れずに「勝手にしろ」と開き直るかのどちらかを選択する必要があった。
description : JavaScript/JavaScript
	 : JavaScriptは軽量な言語だけど意外と何でもできる。
clueword:
基, 上, 前, 長所, ため, 一人前, サポート, マーク, ハウル, 短所, 過, 最適, 用途, 彼, 息, いけない, 型, 界, 量, 語, 長, 動作, スクリプト, 軽量, 間, て, 指, 式, どんな, シンプル, 世界, サーバ, 儀式, した, ず, なん, 度, ない, 姿, 動, 数, 必要, 中, ど, 限, ていう, もの, な, 通過, 実行, ブラウザ, 何, 国, め, こと, この, 属, 意外, 血, その辺, 基本, ファイル, 紛争, 手, サイド, も, まま, イン, 処理, 翻弄, 言語, その, 実, の, 周囲, 要求, い, 国土, 実現, 目, データ, よう, 外, では, 無理, 指向, ベンチ, 生息, 直, オブジェクト, 土, 人, シング, 選択, ベンチマーク, 最近, 生, から, 所, そ, スタンス, 感, イベント, ．, プログラミング, 操作, メイン, 理, 勝者, 激戦, 人前, あの, あと, 地域, 関数, 本, 勝手, 地, 速度, とか, ほど, トレー
image : 0.803103781655
table : 0.493905852876
graph : 0.282924737078
flow : 0.513265960045

In Section 14, Score:2.043881
Flag：：0100
6.C＃とは
・どんな言語か
CをインクリメントするとC＋＋になる。C＋＋をさらにインクリメントするとC＃になる。という名前の見た目からCに近い系統なのかと誤解してしまいそうだけど、実際のC＃はJavaのコピー。
いろんなところがJavaと似ているので（中間コードに翻訳してVMで動くところとか、クラスの振る舞いとか）、Javaを知っているプログラマはそんなに悩むことなく学習することができる。
・長所
WindowsでGUIアプリを作ろうと思った場合、けっこういいものが作れる。SwingほどUI的に（お察しください）な状態にもならず、C＋＋で作るほどコーディングが（お察しください）な状態にもならない。
Javaよりも後出しの言語である分、クロージャとか型推論とか、Javaにはない便利な機能もちらほら付いている。
実行速度も速い。Windowsで動かす分にはJavaより若干速かったはず。IDEもVisualStudioという鉄板ソフトがある。
・短所
Monoは頑張ってはいるけど、Linuxでの動作に関してはそれほど実績がない。現状ではApple頼みのObjectiveCほどではないものの、Micorosoft頼みの色が強い。
そのため、MSコケたら使う場所がなくなったという現象が起こらないとも限らない。そう簡単にMSが転ぶとは思わないけど、例えばモバイル分野辺りで居場所が確保できるかは少し不透明。いい言語なんだけどね。
Javaに似た言語ということで、記述するコードの量は軽量言語と比べると多め。
paraword
list
ところ/ところ:
振る舞い/ふるまいv:クラス/くらす
to root
  [Java/Java, 知る/しる, プログラマ/プログラマ, 学習/がくしゅう]
to reaf
  [中間/ちゅうかん+コード/こーど, 翻訳/ほんやく, VM/VM, 動く/うごく]
list
型/かた?型/けい+推論/すいろん:Java/Java,後/あと,出し/だしv,言語/げんご
クロージャ/クロージャ:
機能/きのう:Java/Java,無い/ない,便利だ/べんりだ
分/ぶん:
to root
  [付く/つく]
to reaf
  [Java/Java, 後/あと, 出し/だしv, 言語/げんご]
description : C/C
	 : CをインクリメントするとC＋＋になる。
description : C/C
	 : C＋＋をさらにインクリメントするとC＃になる。
description : C/C
	 : という名前の見た目からCに近い系統なのかと誤解してしまいそうだけど、実際のC＃はJavaのコピー。
description : Java/Java
	 : Javaよりも後出しの言語である分、クロージャとか型推論とか、Javaにはない便利な機能もちらほら付いている。
description : 分/ぶん
	 : Windowsで動かす分にはJavaより若干速かったはず。
description : 分/ぶん
	 : Windowsで動かす分にはJavaより若干速かったはず。
description : 確保/かくほ
	 : そう簡単にMSが転ぶとは思わないけど、例えばモバイル分野辺りで居場所が確保できるかは少し不透明。
description : Java/Java
	 : Javaに似た言語ということで、記述するコードの量は軽量言語と比べると多め。
clueword:
簡単, コーディング, 翻訳, 名前, 前, 長所, 実績, ため, 状態, 場合, 状, 現象, 系, プログラマ, 短所, 機能, 機, そんな, すると, 訳, 型, クロージャ, 量, 名, 語, 長, 動作, 軽量, こう, 間, て, 色, 近い, ソフト, どんな, 居場所, コード, いい, ず, なん, なら, 度, なに, ない, 動, 後, 中, 強, ど, しの, 限, はず, 誤解, 分野, もの, な, 記述, 実行, インク, 見た目, 張, め, こと, 比, ころ, 推論, 鉄板, コピー, 便利, 透明, も, イン, 鉄, そう, 言語, 強い, その, 実, さら, の, アプリ, 場所, い, クラス, 単, 目, では, 板, 現状, 分, モバイル, から, 所, 中間, そ, インクリメント, ところ, 象, 際, 学習, 確保, 例, 速度, 系統, とか, ほど
image : 0.780971345874
table : 0.51332260321
graph : 0.287801566626
flow : 0.46178553553

In Section 10, Score:2.024325
Flag：：0100
4.PHPとは
・どんな言語か
正式名称は「PHP：HypertextPreprocessor」（意訳：我はHTMLを生み出すために在る）。
JavaやRubyがWebアプリでも使える汎用的な言語なのに対して、PHPはその名の通りWebアプリで使うことを目的として作られた男らしい言語。
スクリプトレットでHTMLの中にさらっとプログラムを書きこんで動的なページを作る目的で作られた。その後、あれも欲しいこれも欲しいと拡張を続けていったら、いつの間にかもっともらしい言語っぽくなっていた。こうした日々拡張を重ねる言語をハウルの動く城式言語と呼ぶ（今考えた）。
・長所
初心者がプログラムを学び始めてから動的なページが作れるようになるまでにかかる学習時間の短さは魅力的。コードの量も短い。環境設定も簡単。
多くの有料レンタルサーバはPHPを使える環境を用意しているので、仕事じゃなく個人で使う用途でも活躍する機会が多い。
巷に出回っている求人の量が多いのも魅力。RubyやPythonの求人よりも圧倒的に多い。但しPHPを使える人の数も多いので仕事が取りやすいかどうかは別の話。
・短所
実行速度はスクリプト言語らしい速度。
Webアプリ以外の場所ではあまり利用されない。ので、Web向け以外の用途で使うためのライブラリとかはそんなに多くない。
PHPしか使えないプログラマはPHPerと呼ばれて迫害される決まりになっている。
paraword
list
PHP/PHP+HypertextPreprocessor/HypertextPreprocessor:正式/せいしきa+名称/めいしょう
有る/ある:HTML/HTML,生む/うむ,意訳/いやく+我/われ,為/ため
to root
  []
to reaf
  []
list
  [Java/Java, Ruby/Ruby]
to root
  [対する/たいする, 言語/げんご]
to reaf
  []
list
あれ/あれ:
これ/これ:欲しい/ほしい
to root
  [欲しい/ほしい, 続ける/つづける, 言語/げんご]
to reaf
  []
list
  [Python/Python, Ruby/Ruby]
to root
  [求人/きゅうじん, 多い/おおい]
to reaf
  []
description : PHP/PHP+HypertextPreprocessor/HypertextPreprocessor
	 : JavaやRubyがWebアプリでも使える汎用的な言語なのに対して、PHPはその名の通りWebアプリで使うことを目的として作られた男らしい言語。
description : PHP/PHP+HypertextPreprocessor/HypertextPreprocessor
	 : JavaやRubyがWebアプリでも使える汎用的な言語なのに対して、PHPはその名の通りWebアプリで使うことを目的として作られた男らしい言語。
description : PHP/PHP
	 : JavaやRubyがWebアプリでも使える汎用的な言語なのに対して、PHPはその名の通りWebアプリで使うことを目的として作られた男らしい言語。
description : Java/Java
	 : JavaやRubyがWebアプリでも使える汎用的な言語なのに対して、PHPはその名の通りWebアプリで使うことを目的として作られた男らしい言語。
description : Java/Java
	 : JavaやRubyがWebアプリでも使える汎用的な言語なのに対して、PHPはその名の通りWebアプリで使うことを目的として作られた男らしい言語。
description : Ruby/Ruby
	 : RubyやPythonの求人よりも圧倒的に多い。
description : Ruby/Ruby
	 : RubyやPythonの求人よりも圧倒的に多い。
description : Ruby/Ruby
	 : RubyやPythonの求人よりも圧倒的に多い。
description : PHP/PHP
	 : PHPしか使えないプログラマはPHPerと呼ばれて迫害される決まりになっている。
description : これ/これ
	 : これからプログラムを学びたいという人で、Web系を考えている人はとりあえずPHPから始めると手っ取り早いかもしれない（もちろんその前にHTMLは覚えておく必要はある）。
description : Python/Python
	 : PerlやRubyがTMTOWTDI（それをやる方法は幾通りも存在する）な言語であるのに対して、Pythonはやり方を1つだけ用意するようにしているところとかがお上品に見える。
description : Python/Python
	 : ライト級の言語を1つも習得してなくてどれにしようか迷っているなら、Pythonは1つの選択肢になる。
description : Java/Java
	 : Javaよりも後出しの言語である分、クロージャとか型推論とか、Javaにはない便利な機能もちらほら付いている。
description : Java/Java
	 : Javaに似た言語ということで、記述するコードの量は軽量言語と比べると多め。
description : Python/Python
	 : つまりCがトンプソンM1で、PythonはベレッタM92くらいということだ。
description : これ/これ
	 : これから学ぶのであれば、まずどのバージョンを学ぶのかから考える必要がある。
description : Python/Python
	 : Pythonを学ぶか、Perlを学ぶか、Rubyを学ぶか、と考えた時に、日本人だしRubyに一番親近感が湧くなと思ったら手を出すと良いかも。
description : Python/Python
	 : 言語の硬度を測定すると、Javaは硬度8くらい、Pythonは6くらいになるのに対して、Rubyは3くらいになる。
description : Java/Java
	 : 言語の硬度を測定すると、Javaは硬度8くらい、Pythonは6くらいになるのに対して、Rubyは3くらいになる。
description : Ruby/Ruby
	 : 言語の硬度を測定すると、Javaは硬度8くらい、Pythonは6くらいになるのに対して、Rubyは3くらいになる。
description : Ruby/Ruby
	 : 言語の硬度を測定すると、Javaは硬度8くらい、Pythonは6くらいになるのに対して、Rubyは3くらいになる。
description : Java/Java
	 : Java並の実行速度とRuby並の書きやすさが合わさり最強に見える。
description : Java/Java
	 : Javaの資産が使い放題で、Erlangのような並列処理まで合わせ持つのでもう手に負えない。
description : Java/Java
	 : Javaを使っている人は、老若男女問わず今日からでもScalaを始めた方がいい。
description : Ruby/Ruby
	 : Rubyを使っている人の中で、実行速度がもう少し速くならんものかなぁと思っている人は、今日からでもScalaを始めた方がいい。
description : Ruby/Ruby
	 : Rubyを使っている人の中で、実行速度がもう少し速くならんものかなぁと思っている人は、今日からでもScalaを始めた方がいい。
description : Python/Python
	 : Pythonを使っている人は、Pythonの神様が微妙と言っていたようにちょっと言語の方向性が違うので、興味があるなら使ってみるくらいのスタンスで。
clueword:
料, 簡単, 個, 今, 長所, 意訳, 短い, ため, 魅力, その後, 話, ハウル, つの, プログラマ, 短所, 迫害, プログラム, 機, 時, 用途, 別, そんな, どう, 目的, 欲しい, ライブ, 訳, 量, 名, 語, 男, 長, 会, あまり, スクリプト, こう, 間, て, 式, 名称, どんな, 日々, コード, 害, 機会, 拡張, 活躍, いつ, サーバ, した, 度, なに, ない, 求人, 動, 数, 後, 中, ど, 汎用, グラム, 通り, な, 実行, レット, 圧倒, 張, め, こと, 初心, 時間, 日, 書, も, 用意, 言語, その, 個人, 実, さら, の, ライブラリ, アプリ, 場所, 有料, い, や, 単, 目, よう, 外, では, 男らしい, うか, 人, 設定, ページ, 力, レンタルサーバ, 多く, 多い, 心, 生, から, 所, そ, 回, 仕事, らしい, 事, 利用, 学習, 速度, 環境, とか, 正
image : 0.748614571384
table : 0.483242538663
graph : 0.31697144438
flow : 0.475496726922

In Section 12, Score:1.997756
Flag：：0100
5.Pythonとは
・どんな言語か
彼の名はPython（ニシキヘビ）。ライバル言語はPerl（改名前はPearl＝真珠だった）とRuby（ルビー）。もっと良い名前はなかったのだろうか。
インデントを使ったブロックの表現と、プログラマがselfという文字をタイプする能力を格段に向上させる言語仕様が特徴的。
とてもお行儀が良い言語。PerlやRubyがTMTOWTDI（それをやる方法は幾通りも存在する）な言語であるのに対して、Pythonはやり方を1つだけ用意するようにしているところとかがお上品に見える。
・長所
簡潔で見やすいコードを書きやすい。書きあがったコードを見ると、なんというかどの言語よりもあっさりしているように感じる。
NumPyとか数学系のライブラリがけっこう充実している。MATLABの代わりに使う人もいるとか。
あとGoogleと仲良しで（Pythonの神様はGoogleで働いている）、GAEでも利用できたりする。
・短所
実行速度はやはりスクリプト言語らしい速度。
日本ではPythonを使った仕事に出くわすことはあまり多くない。Webフレームワークはいくつか存在するけど、Web系の仕事で見かけることもあまりない。
参考図書を選ぶ時にリアルなニシキヘビの絵を目にしないといけなかったり、利用している時にあまりかわいくない蛇のアイコンを目にしないといけなかったりすることがあるので、蛇嫌いな人は手を出しづらい言語。
paraword
list
能力/のうりょく:self/self,言う/いう,プログラマ/プログラマ,文字/もじ,タイプ/たいぷ
表現/ひょうげん:インデント/インデント,使う/つかう,ブロック/ぶろっく
to root
  [向上/こうじょう, 言語/げんご+仕様/しよう, 特徴/とくちょう+的だ/てきだ]
to reaf
  []
list
  [Perl/Perl, Ruby/Ruby]
to root
  [言語/げんご, 用意/ようい, ところ/ところ, 見える/みえる]
to reaf
  []
list
用意/ようい:Python/Python,やり/やりv+方/かた,1/1+つ/つ
言語/げんご:Perl/Perl,それ/それ,やる/やる,TMTOWTDI/TMTOWTDI,方法/ほうほう,幾/いく+通り/とおり,Ruby/Ruby,存在/そんざい
to root
  [ところ/ところ, 見える/みえる]
to reaf
  []
list
  [NumPy/NumPy, 数学/すうがく+系/けい]
to root
  [ライブラリー/らいぶらりー, 充実/じゅうじつ]
to reaf
  []
list
  [Google/Google, 仲良し/なかよし]
to root
  [利用/りよう]
to reaf
  []
description : 名前/なまえ+空間/くうかん
	 : もっと良い名前はなかったのだろうか。
description : Python/Python
	 : PerlやRubyがTMTOWTDI（それをやる方法は幾通りも存在する）な言語であるのに対して、Pythonはやり方を1つだけ用意するようにしているところとかがお上品に見える。
description : Perl/Perl
	 : PerlやRubyがTMTOWTDI（それをやる方法は幾通りも存在する）な言語であるのに対して、Pythonはやり方を1つだけ用意するようにしているところとかがお上品に見える。
description : Perl/Perl
	 : PerlやRubyがTMTOWTDI（それをやる方法は幾通りも存在する）な言語であるのに対して、Pythonはやり方を1つだけ用意するようにしているところとかがお上品に見える。
description : NumPy/NumPy
	 : NumPyとか数学系のライブラリがけっこう充実している。
description : NumPy/NumPy
	 : NumPyとか数学系のライブラリがけっこう充実している。
description : こと/こと
	 : 日本ではPythonを使った仕事に出くわすことはあまり多くない。
description : 言語/げんご
	 : あなたがApple信者であれば、他の言語には目も向けずObjective－Cを学びなさい。
description : 言語/げんご
	 : 言語の硬度を測定すると、Javaは硬度8くらい、Pythonは6くらいになるのに対して、Rubyは3くらいになる。
description : Ruby/Ruby
	 : 言語の硬度を測定すると、Javaは硬度8くらい、Pythonは6くらいになるのに対して、Rubyは3くらいになる。
description : 言語/げんご
	 : 言語のイメージはここを見ればだいたい分かってもらえると思う。
description : Ruby/Ruby
	 : Rubyを使っている人の中で、実行速度がもう少し速くならんものかなぁと思っている人は、今日からでもScalaを始めた方がいい。
clueword:
ルビー, 仲良し, 上, 名前, 前, 長所, ブロック, 充実, 系, プログラマ, 短所, 良, 時, 彼, どの, インデント, ロック, 改名, ライブ, 参考, 文字, 名, 語, 長, あまり, スクリプト, 行儀, こう, 真珠, て, アイコン, ライバル, どんな, コード, いく, なん, 度, なか, ない, 代わり, 数, ど, 文, 通り, な, 向上, 実行, 方, フレームワーク, こと, ころ, タイプ, 日, 手, 書, 存在, 法, も, 見え, 数学, イン, 神, 表, 用意, 言語, 良い, 表現, 図書, 実, の, ライブラリ, い, ニシキヘビ, や, 神様, 目, 特徴, よう, では, うか, 能力, 人, 力, 図, 仕様, 多く, らい, 所, そ, 感, 方法, 字, 日本, ところ, 仕事, らしい, 事, 利用, あと, 本, 速度, とか
image : 0.730998439573
table : 0.460471547655
graph : 0.364148212744
flow : 0.442138088818

In Section 16, Score:1.937517
Flag：：0100
7.Objective－Cとは
・どんな言語か
名前の通り、Cにオブジェクト指向を組み込んだ言語。まさかこの言語が人気言語を扱う記事の中に登場するようになるとは、数年前までは予想もしていなかった。すいません、D言語より来ないだろうなんて思ってました。
スティーブ・ジョブズがMacに戻る前あたりから使っているお気に入りの言語。人気が出た理由はひとえにiPhone。iPhoneアプリを作るにはObjective－Cを使う必要があったことから利用者が急増していつの間にやらTOP10に入るような言語になっていた。
なぜC＋＋じゃなくObjective－Cなのか。それはジョブズにしか分からない。
・長所
Cと互換性があるので、Cが使えるならObjective－Cを学習するのは割と簡単。もちろん実行速度も十分に高速。iPhoneのようなCPUを使い過ぎると電池的に困るような端末はこういう言語が向いてるのかもしれない。
最近のObjective－Cはガベージコレクションも付いてるらしい（今知った）。何かと進歩してるのだなぁ。
・短所
使いこなすにはCを知らないといけない。ということはC＋＋と同じく、学習コストはスクリプト言語とは比べものにならないくらい高くなる。記述するコードの量ももちろん多くなる。
Apple以外の機器で利用されるケースはけして多くないので、もしAppleが「Objective－C、やめました」と言ったら一気にマイナー言語に逆戻りすることも考えられる。
paraword
list
  [C/C, 互換/ごかん+性/せい]
to root
  [有る/ある, 簡単だ/かんたんだ]
to reaf
  []
description : C/C
	 : Cと互換性があるので、Cが使えるならObjective－Cを学習するのは割と簡単。
description : C/C
	 : Cと互換性があるので、Cが使えるならObjective－Cを学習するのは割と簡単。
description : こと/こと
	 : ということはC＋＋と同じく、学習コストはスクリプト言語とは比べものにならないくらい高くなる。
description : C/C
	 : CやC＋＋ほどではないけどJavaよりも難易度高め。
clueword:
簡単, 名前, 今, 前, 長所, あたり, たこ, 急増, 人気, つの, 短所, くらい, 機, 過, 一気, いけない, 量, 名, 語, こういう, 長, コスト, 端末, スクリプト, こう, 間, て, 進歩, 指, どんな, 器, ガベージコレクション, コード, 互換, いく, いつ, いま, した, なん, なら, 電池, 度, なか, ない, 数, 必要, 中, ど, 気, 記事, 比べもの, ジョブズ, 通り, もの, な, もも, 記述, 実行, ひと, 年, 何, め, こと, この, 理由, 比, 機器, も, 言語, 実, の, アプリ, ケース, い, や, 単, スティーブ, よう, 外, では, コレクション, 指向, 十分, 逆, 高, オブジェクト, 予想, 登場, 人, 最近, 分, 多く, らい, から, 所, そ, 端, 逆戻り, 理, 同じ, マイ, らしい, 事, 利用, 学習, 速度, とか
image : 0.731014827304
table : 0.449326520959
graph : 0.310731400578
flow : 0.446443869546

In Section 8, Score:1.797044
Flag：：0100
3.C＋＋とは
・どんな言語か
C言語にテンプレートとか、クラスとか、継承とか、多重継承とか、演算子のオーバーロードとか、デフォルト引数とか、その他いろんなパンドラの箱に入っていそうな仕様を取り付けることで出来上がった言語。
多くの仕様が加わることによって生み出されるコードは混沌としたが、最後には希望が残ったと言われているとかいないとか。
・長所
速度はCと同じく音速。その上オブジェクト指向やらスマートポインタやら様々な機能が付加され、Boostなんていう強力という言葉がよく似合うライブラリも使えるので、多彩なコードの書き方ができる。
CでできることはC＋＋でもすべてできるので、個人的にはC＋＋を使わずにCを使うというシーンがあまり思い浮かばない。
・短所
スマートポインタがいるとはいえガベージコレクションはないのでメモリ管理はやはり面倒。
学習する際はC言語の基本を学んでからC＋＋に手を伸ばすような経路が一般的。つまり、ただでさえ学習コストが他の言語より高めなCを学んで、さらにC＋＋の概念を学ばないといけない。使えるようになるまでかなり時間がかかる。
主観的な点数を付けると、PythonやRubyの学習コストを10として、Javaを15、Cを20とすると、C＋＋の学習はコストが30くらいかかるような感じ。
あと、大規模なプロジェクトだとビルドにけっこうな時間がかかるのが割とストレス。
paraword
list
テンプレート/テンプレート:
継承/けいしょう:
デフォルト/でふぉると+引数/ひきすう:演算/えんざん+子/こ?子/し,オーバー/おーばー?オーバーだ/おーばーだ+ロード/ろーど
クラス/くらす:
多重/たじゅう+継承/けいしょう:
to root
  [いろんな/いろんな, パンドラ/ぱんどら, 箱/はこ, 入る/はいる, 仕様/しよう, 取り付ける/とりつける, こと/こと, 出来る/できる, 言語/げんご]
to reaf
  []
list
  [オーバー/おーばー?オーバーだ/おーばーだ+ロード/ろーど, デフォルト/でふぉると+引数/ひきすう]
to root
  [いろんな/いろんな, パンドラ/ぱんどら, 箱/はこ, 入る/はいる, 仕様/しよう, 取り付ける/とりつける, こと/こと, 出来る/できる, 言語/げんご]
to reaf
  [テンプレート/テンプレート, クラス/くらす, 継承/けいしょう, 多重/たじゅう+継承/けいしょう, 演算/えんざん+子/こ?子/し]
list
  [Ruby/Ruby, Python/Python]
to root
  [学習/がくしゅう+コスト/こすと, する/する, する/する, 感じ/かんじv]
to reaf
  []
list
  [15/15, C/C]
to root
  [する/する, 感じ/かんじv]
to reaf
  []
description : C/C
	 : C言語にテンプレートとか、クラスとか、継承とか、多重継承とか、演算子のオーバーロードとか、デフォルト引数とか、その他いろんなパンドラの箱に入っていそうな仕様を取り付けることで出来上がった言語。
description : C/C
	 : CでできることはC＋＋でもすべてできるので、個人的にはC＋＋を使わずにCを使うというシーンがあまり思い浮かばない。
description : こと/こと
	 : CでできることはC＋＋でもすべてできるので、個人的にはC＋＋を使わずにCを使うというシーンがあまり思い浮かばない。
description : Ruby/Ruby
	 : RubyやPythonの求人よりも圧倒的に多い。
description : Python/Python
	 : PerlやRubyがTMTOWTDI（それをやる方法は幾通りも存在する）な言語であるのに対して、Pythonはやり方を1つだけ用意するようにしているところとかがお上品に見える。
description : Python/Python
	 : ライト級の言語を1つも習得してなくてどれにしようか迷っているなら、Pythonは1つの選択肢になる。
description : C/C
	 : CをインクリメントするとC＋＋になる。
description : C/C
	 : C＋＋をさらにインクリメントするとC＃になる。
description : C/C
	 : という名前の見た目からCに近い系統なのかと誤解してしまいそうだけど、実際のC＃はJavaのコピー。
description : C/C
	 : Cと互換性があるので、Cが使えるならObjective－Cを学習するのは割と簡単。
description : Python/Python
	 : つまりCがトンプソンM1で、PythonはベレッタM92くらいということだ。
description : Python/Python
	 : Pythonを学ぶか、Perlを学ぶか、Rubyを学ぶか、と考えた時に、日本人だしRubyに一番親近感が湧くなと思ったら手を出すと良いかも。
description : Python/Python
	 : 言語の硬度を測定すると、Javaは硬度8くらい、Pythonは6くらいになるのに対して、Rubyは3くらいになる。
description : Ruby/Ruby
	 : 言語の硬度を測定すると、Javaは硬度8くらい、Pythonは6くらいになるのに対して、Rubyは3くらいになる。
description : C/C
	 : CやC＋＋ほどではないけどJavaよりも難易度高め。
description : Ruby/Ruby
	 : Rubyを使っている人の中で、実行速度がもう少し速くならんものかなぁと思っている人は、今日からでもScalaを始めた方がいい。
description : Python/Python
	 : Pythonを使っている人は、Pythonの神様が微妙と言っていたようにちょっと言語の方向性が違うので、興味があるなら使ってみるくらいのスタンスで。
clueword:
個, 基, 上, 主観, 他の, 長所, 継承, 伸, 短所, 機能, くらい, 機, 多重, 音速, 時, シーン, すると, ライブ, いけない, ストレス, 語, 長, コスト, あまり, 一般, こう, ポインタ, 間, て, 指, 葉, どんな, 最後, 点数, ガベージコレクション, コード, した, ず, なん, 度, ない, 数, 後, 強, ど, 強力, プレート, メモ, ていう, な, 他, 方, パン, その他, め, こと, 時間, 基本, 手, 書, も, イン, 付加, そう, 言語, その, 規模, 個人, 経路, さら, の, ライブラリ, 引数, プロジェクト, ビル, い, クラス, デフォルト, や, 主, ビルド, よう, ロード, 希望, コレクション, 指向, 高, オブジェクト, 人, 力, 言葉, 面, 仕様, 多く, らい, 音, 生, 演算, から, 所, そ, 概念, オーバー, 感, 管理, 理, テンプレート, メモリ, パンドラ, 同じ, 際, 学習, あと, バー, 本, 速度, 点, とか, 様々
image : 0.733064208831
table : 0.45755641708
graph : 0.206196986461
flow : 0.400226523615

In Section 1, Score:1.765075
Flag：：0000
前書き
この世にはたくさんのプログラミング言語が存在します。Wikiepdiaのプログラミング言語一覧を見ると、実に200個以上というわけの分からない数の言語が並んでいたりします。
200の中にはほとんど使われてない言語も混じってるので、実際に仕事でざくざく使われている言語は20とか30とかそういうオーダーなのですが、それでも1人の人間が把握するにはちょっと多過ぎる数です。
本記事では、そうした有り余るプログラミング言語の海の中で「どれを勉強したらいいの？」とか「どれを採用するのが適切？」という悩みをお持ちの方が「よし、この言語に決めた！」と自信を持って決断できるように背中を押すことを目的として書かれました。
無責任に背中をドンと押すことが目的なので、これを読めば正しい判断ができるかという点についてはノーコメントとさせていただきます。使ってみないと過ちには気付けないものさ。
0－2.人気TOP10言語の条件
paraword
list
20/20:
30/30:
オーダー/おーだー:そういう/そういう
to root
  [数/すう?数/かず]
to reaf
  [200/200, 殆んど/ほとんど, 使う/つかう, 中/なか, 言語/げんご, 実際/じっさい, 仕事/しごと, ざくざく/ざくざく, 使う/つかう, 混じる/まじる, 言語/げんご]
clueword:
個, 上, 前, 責任, 持, 一覧, 人気, 判, 過, 目的, 正しい, 語, そういう, 適切, 間, て, いい, たくさん, した, ない, 背中, 数, 中, 強, ど, 把握, 気, 記事, ちょ, もの, な, 条件, 方, め, こと, この, ざ, 書, 存在, 切, も, そう, 言語, 実, の, 採用, い, 条, 目, よう, では, 判断, 人, 人間, 分, らい, から, そうした, そ, プログラミング, 勉強, 仕事, 事, 際, さん, コメント, 本, 点, とか, 正, 海
image : 0.721818562254
table : 0.368233933057
graph : 0.243080221817
flow : 0.431942624833

In Section 20, Score:1.718252
Flag：：0100
9.Rubyとは
・どんな言語か
純粋オブジェクト指向でメタプロでPerlとLispが結婚して隔世遺伝が黒魔術で生まれた言語。
主な出産地は島根県の県庁所在地、松江市。小学校の頃に全県の県庁所在地を覚えるように言われた時、どうしても覚えられなかった松江市。
・長所
楽しくプログラミングができることを意識しているそうで、あまりプログラマを束縛するようなことはしない開放感溢れる言語仕様になっている。
作者が日本人なので、言語仕様に関するメーリングリストの議論も普通に日本語で行われている。日本人にはその辺が取っつきやすい。
Railsがけっこう便利。
・短所
実行速度はスクリプト言語らしい速度。
endendend．．．
行儀の悪い書き方をしてもあまり怒られない。ので、大人数で開発した時に「わるいプログラマLV26」が混ざっていると混沌としやすい。目の届く範囲の少人数チームで使うのが正しい利用法なんじゃないだろうか。
paraword
list
  [松江/まつえ+市/し, 県庁/けんちょう+所在/しょざい+地/ち]
to root
  []
to reaf
  [主だ/おもだ, 出産/しゅっさん+地/ち, 島根/しまね+県/けん]
description : こと/こと
	 : 楽しくプログラミングができることを意識しているそうで、あまりプログラマを束縛するようなことはしない開放感溢れる言語仕様になっている。
clueword:
純粋, 大人数, 発, 長所, 所在, 開放, 意識, プログラマ, 学校, 短所, 魔術, 全県, 時, メーリングリスト, どう, 黒, 正しい, 松江, 語, 遺伝, 長, あまり, スクリプト, 少人数, 隔世, 行儀, こう, リング, て, 指, 束, 大人, どんな, 人数, 普通, リスト, した, なん, 議論, 度, なか, ない, 悪い, 束縛, 数, ど, 小学校, リン, な, 実行, 方, こと, ざ, 開発, その辺, 出産, チーム, 日, 書, 楽, 法, 便利, も, そう, 言語, 県庁, その, 実, の, どうして, い, や, 主, 目, よう, 指向, うか, オブジェクト, 結婚, 用法, 人, るい, 仕様, 島根, 生, 所, そ, 感, ．, 範囲, プログラミング, 日本, 根, らしい, 利用, 本, 作者, 地, 速度, 本人, 悪, 正
image : 0.698488494803
table : 0.393802277022
graph : 0.235613626116
flow : 0.39034744474

In Section 6, Score:1.716425
Flag：：0100
2.C言語とは
・どんな言語か
世の中はCでできている。WindowsだってLinuxだってアメンボだって、みんなみんなCでできている。
プログラミング言語だってCでできている。PythonだってRubyだってオケラだって、みんなCでできている友達なんだ。
というように世の中の基板になるところを支えている言語。
・長所
有名な高級（？）言語の中では最速の実行速度を誇る。なのでスクリプト言語を利用している時に速度が出なくて困ったら、その部分をちょろっとCで書き直すと平気で100倍速になったりすることもある。
何十年も使われてきた歴史ある言語なので、周りにはCで書かれたいろんな資産がある。学習する時に参考になる良いソースを探すのも楽。参考図書にも困らない。
・短所
ガベージコレクションがないのでメモリ管理を忘れた世代には使いづらい言語。コード量も軽量な言語と比べるとかなり多くなる。
自分で何かソフトを作ることになったとして、ピュアなCでガリガリ書くというシチュエーションはあまり思い浮かばない。C＋＋を使うような気がする。
あと移植性が低い。たとえばLinuxで動いているコードをWindowsで動かそうと思ったら、いろいろ書き換えないといけないところが出てくる。＃ifdefWindowsみたいな。
paraword
description : Python/Python
	 : PythonだってRubyだってオケラだって、みんなCでできている友達なんだ。
description : C/C
	 : C＋＋を使うような気がする。
clueword:
基, 世の中, シチュエーション, 長所, 部分, 友達, 何十, 短所, 良, 最速, 時, 歴史, 参考, いけない, 量, 名, 語, 資産, 有名, 長, あまり, スクリプト, 軽量, て, アメンボ, ソフト, どんな, ガベージコレクション, コード, なん, 度, 部, ない, 動, 中, ど, 低い, メモ, 気, ちょ, な, 実行, 世代, 移植, 年, 何, こと, 倍, 比, ころ, 基板, 書, 楽, も, そう, 言語, その, 良い, 図書, 実, の, 周り, い, ソース, いろいろ, よう, 倍速, では, コレクション, 直, 高, 自分, 板, 図, 分, 多く, らい, 所, オケラ, そ, プログラミング, 管理, 理, メモリ, ところ, 利用, 学習, あと, 速度, とか, ちょろ
image : 0.662777383986
table : 0.417240733022
graph : 0.241220741962
flow : 0.395185993453

In Section 18, Score:1.647166
Flag：：0100
8.Perlとは
・どんな言語か
古くからCで書くほどでもないことをさらっと書きたい時に愛用されてきた歴史ある言語。銃器で言えばコルト・ガバメントみたいなものだと言えば分りやすいのではないだろうか。つまりCがトンプソンM1で、PythonはベレッタM92くらいということだ。
十分に手に馴染んでいる銃器をあえて手放すほどの理由をベレッタに感じなければ、コルトを使い続けるのも良いのではないだろうか。
・長所
長く使われてきた分、いろんなモジュールが揃っている。あと、たいていの環境に入っているので、客先のサーバで作業をしないといけない時とかにも役に立つことがある。
LearningPerlは読み物としても面白い。あとラクダの絵がかわいい。
・短所
実行速度はスクリプト言語らしい速度。
用途的にPythonやRubyと被るので、今あえてPerlを取る理由というのが個人的には思い浮かばない。生粋のPerl使いならきっと流暢な解答を用意してくれると思う。
paraword
list
分/ぶん:長い/ながい,使う/つかう
モジュール/もじゅーる:いろんな/いろんな
to root
  [揃う/そろう]
to reaf
  []
list
  [Python/Python, Ruby/Ruby]
to root
  [被る/かぶる?被る/こうむる, 思い浮かぶ/おもいうかぶ]
to reaf
  []
description : Python/Python
	 : つまりCがトンプソンM1で、PythonはベレッタM92くらいということだ。
description : Python/Python
	 : Pythonを学ぶか、Perlを学ぶか、Rubyを学ぶか、と考えた時に、日本人だしRubyに一番親近感が湧くなと思ったら手を出すと良いかも。
description : Python/Python
	 : 言語の硬度を測定すると、Javaは硬度8くらい、Pythonは6くらいになるのに対して、Rubyは3くらいになる。
description : Ruby/Ruby
	 : 言語の硬度を測定すると、Javaは硬度8くらい、Pythonは6くらいになるのに対して、Rubyは3くらいになる。
description : Ruby/Ruby
	 : Rubyを使っている人の中で、実行速度がもう少し速くならんものかなぁと思っている人は、今日からでもScalaを始めた方がいい。
description : Python/Python
	 : Pythonを使っている人は、Pythonの神様が微妙と言っていたようにちょっと言語の方向性が違うので、興味があるなら使ってみるくらいのスタンスで。
clueword:
個, 今, 長所, 読み物, 短所, くらい, 良, 時, 用途, どの, 歴史, 作業, いけない, コルト, 語, 長, スクリプト, 客, て, どんな, 器, 役, いい, サーバ, なら, 愛用, トンプソン, 度, ない, 解答, ど, 白, もの, な, 物, 実行, こと, 理由, 手, 書, 白い, も, 用意, 面白い, 言語, 良い, 個人, 実, さら, の, い, や, では, 生粋, 十分, うか, 人, 面, 分, らい, 生, から, 所, ラクダ, 感, モジュール, ガバメント, 理, 先, らしい, あと, 銃器, 速度, 環境, とか, ほど
image : 0.654985008736
table : 0.383691936026
graph : 0.21236988067
flow : 0.396119459264

In Section 9, Score:1.601813
Flag：：0000
・誰が学ぶべきか
間違っても「ちょっとプログラムというのを学んでみたい。C＋＋ってかっこよさそう」なんていう気持ちで手をつけてはいけない。「ちょっと登山を経験してみよっかな」と言ってチョモランマに登るようなものである。悪いことは言わないので高尾山（PHPとかJavaScript）あたりから初めておこう。
速くて省メモリな○○ライブラリというような触れ込みで公開されるライブラリはC＋＋で書かれていることが多い。たとえば去年（2010年）Googleが公開したRE2という速くて省メモリな正規表現ライブラリはC＋＋で書かれていた。
そういう良く呼び出され、速度が求められ、書き捨てられるようなコードではない系のソフトを作りたい人は甘えたことは言わずにC＋＋に手を出すのが良いかもしれない。
paraword
list
  [PHP/PHP, JavaScript/JavaScript]
to root
  [初める/初める]
to reaf
  [高尾/たかお+山/さん?山/やま]
description : こと/こと
	 : 悪いことは言わないので高尾山（PHPとかJavaScript）あたりから初めておこう。
description : こと/こと
	 : そういう良く呼び出され、速度が求められ、書き捨てられるようなコードではない系のソフトを作りたい人は甘えたことは言わずにC＋＋に手を出すのが良いかもしれない。
description : PHP/PHP
	 : JavaやRubyがWebアプリでも使える汎用的な言語なのに対して、PHPはその名の通りWebアプリで使うことを目的として作られた男らしい言語。
description : PHP/PHP
	 : PHPしか使えないプログラマはPHPerと呼ばれて迫害される決まりになっている。
description : JavaScript/JavaScript
	 : ブラウザの世界はどこの国土にも属さない紛争地域になっているので、そこで生息するJavaScriptは周囲からのいろんな要求を受け入れてファットになるか、何も受け入れずに「勝手にしろ」と開き直るかのどちらかを選択する必要があった。
description : JavaScript/JavaScript
	 : JavaScriptは軽量な言語だけど意外と何でもできる。
clueword:
あたり, たこ, 持, 誰, 経験, 系, プログラム, 良, ライブ, いけない, そういう, こう, 間, て, ソフト, コード, した, ず, なん, 度, ない, 悪い, ○○, メモ, 気, 気持ち, グラム, ていう, ちょ, もの, な, 年, め, こと, 手, 書, も, 表, そう, 良い, 表現, の, ライブラリ, 山, かっこ, い, よう, では, 高, 人, 多い, から, そ, メモリ, 初め, 速度, とか, 悪, 正
image : 0.650293489209
table : 0.327218665235
graph : 0.244513779534
flow : 0.379787125638

In Section 11, Score:1.533914
Flag：：0000
・誰が学ぶべきか
これからプログラムを学びたいという人で、Web系を考えている人はとりあえずPHPから始めると手っ取り早いかもしれない（もちろんその前にHTMLは覚えておく必要はある）。
逆にWeb系以外（データ処理、GUIプログラム等）に手を出したいと思っている人にとっては、検討する必要がまったくない言語である。
既にいくつか言語を学んだことがある人なら学習にそれほど手間取ることはないはずなので、必要になった時に学ぶくらいのスタンスで良いかもしれない。
paraword
list
  [GUI/GUI+プログラム/ぷろぐらむ, データ/でーた+処理/しょり]
to root
  [出す/だす, 思う/おもう, 人/じん?人/ひと, 取る/とる?執る/とる?捕る/とる?採る/とる?摂る/とる?撮る/とる?盗る/とる, 言語/げんご]
to reaf
  []
description : これ/これ
	 : これからプログラムを学びたいという人で、Web系を考えている人はとりあえずPHPから始めると手っ取り早いかもしれない（もちろんその前にHTMLは覚えておく必要はある）。
clueword:
前, 検討, 誰, 系, くらい, プログラム, 良, 早い, 時, 語, 間, て, いく, した, ず, なら, ない, 必要, ど, はず, グラム, な, め, こと, 手, も, 処理, 言語, 手間, その, 良い, の, い, 等, データ, 外, 逆, 人, らい, から, そ, スタンス, 理, 学習, ほど
image : 0.654110088491
table : 0.335873324113
graph : 0.197296833044
flow : 0.346633493274

In Section 7, Score:1.517229
Flag：：0000
・誰が学ぶべきか
軽い言語だと勝手に裏側でやってくれるようなメモリの確保とかファイルポインタの操作なんかも、Cでは自分で意識して書かないといけない。ので、一度触れておくとプログラムが裏側で何をしているかが意識できて良いかもしれない。
OSや言語の細かい挙動を追いたいという願望が生まれた時に（たとえばPHPのネットワーク関連の機能について、実際にこれは裏では何をしてるんだ、ということが知りたくなった時とか）、Cが読めると割とあっさり答えに辿りつけたりもする。
ガリガリ書けるようになる必要があるかは別として、とりあえず知っておいて損はない言語。
paraword
list
確保/かくほ:メモリー/めもりー
操作/そうさ:ファイル/ふぁいる+ポインター/ポインター
to root
  [書く/かく]
to reaf
  [裏/うら?裏/り, やる/やる]
list
  [言語/げんご, OS/OS]
to root
  [細かい/こまかい, 挙動/きょどう, 追う/おう, 言う/いう, 願望/がんぼう, 生まれる/うまれる, 時/とき, 読める/よめる, 辿り着ける/たどりつける]
to reaf
  []
description : C/C
	 : 軽い言語だと勝手に裏側でやってくれるようなメモリの確保とかファイルポインタの操作なんかも、Cでは自分で意識して書かないといけない。
description : OS/OS
	 : OSや言語の細かい挙動を追いたいという願望が生まれた時に（たとえばPHPのネットワーク関連の機能について、実際にこれは裏では何をしてるんだ、ということが知りたくなった時とか）、Cが読めると割とあっさり答えに辿りつけたりもする。
description : OS/OS
	 : OSや言語の細かい挙動を追いたいという願望が生まれた時に（たとえばPHPのネットワーク関連の機能について、実際にこれは裏では何をしてるんだ、ということが知りたくなった時とか）、Cが読めると割とあっさり答えに辿りつけたりもする。
description : 確保/かくほ
	 : そう簡単にMSが転ぶとは思わないけど、例えばモバイル分野辺りで居場所が確保できるかは少し不透明。
description : 言語/げんご
	 : あなたがApple信者であれば、他の言語には目も向けずObjective－Cを学びなさい。
description : 言語/げんご
	 : 言語の硬度を測定すると、Javaは硬度8くらい、Pythonは6くらいになるのに対して、Rubyは3くらいになる。
description : 言語/げんご
	 : 言語のイメージはここを見ればだいたい分かってもらえると思う。
clueword:
誰, 意識, 機能, プログラム, 機, 良, 時, 別, いけない, 語, ネット, ポインタ, て, 軽い, ず, なん, 度, ない, 動, 必要, メモ, グラム, な, 細かい, 関連, 何, め, こと, ファイル, 手, 書, も, イン, 言語, 良い, 実, の, い, や, 損, よう, では, 自分, 分, 生, 細か, 操作, メモリ, 際, 裏, 確保, 側, 勝手, とか
image : 0.626744673012
table : 0.330360688969
graph : 0.170911816756
flow : 0.389211329149

In Section 23, Score:1.482836
Flag：：0000
・誰が学ぶべきか
Web業界で生きていくなら知っていないといけない言語。Webじゃない世界で生きていくなら知っていても役立つことが少ない言語。
手軽にGUIでグリグリするものが書きたい、と思った時に実はJavaScriptを学ぶのが一番近道なんじゃないかと思ったりすることもある。できることに制限はあるけど短時間で動くものが作れる。レトロゲームを再現する程度のアニメーションもできる。
paraword
clueword:
誰, 業界, 時, 程度, いけない, 界, 語, 間, 近道, て, 少ない, 役, いく, 世界, なん, なら, 度, ない, 動, ど, 限, もの, な, 再現, こと, 時間, 手, 書, も, 言語, 実, の, 制限, い, ゲーム, 生
image : 0.606925903262
table : 0.321833074145
graph : 0.204942210354
flow : 0.349135048277

In Section 3, Score:1.472425
Flag：：0000
VBを落としている理由は、今年（2011年）はJavaScriptの年になりそうな予兆がちらほら見えることと、VBの説明がC＃と若干被る部分があるので（MSの話とか、MSの話とか）、ネタ的な問題もあって入れ替えています。
一応、これを書いてる人間はObjective－C以外の9言語は仕事で使ったことがあります。Java、JavaScript、Ruby、Pythonはけっこうガリガリ使ってます。C＃、Perlはさらっとしか使ったことがないのであまり自信はないです。お察しください。
以上、前置きでした。では本編をどうぞ。
paraword
list
  [こと/こと, VB/VB]
to root
  [説明/せつめい, 有る/ある, 入れ替える/いれかえる]
to reaf
  [JavaScript/JavaScript, 年/とし?年/ねん, 成る/なる?鳴る/なる, 2011/2011+年/とし?年/ねん, 予兆/よちょう, チラホラ/ちらほら, 見える/みえる]
list
部分/ぶぶん:若干/じゃっかん,被る/かぶる?被る/こうむる
C/C:
to root
  [有る/ある, 入れ替える/いれかえる]
to reaf
  []
list
話/はなし:MS/MS
話/はなし:MS/MS
to root
  [問題/もんだい, 入れ替える/いれかえる]
to reaf
  []
list
  [Ruby/Ruby, JavaScript/JavaScript, Python/Python, Java/Java]
to root
  [使う/つかう]
to reaf
  []
list
  [Perl/Perl, C/C]
to root
  [使う/つかう, 無い/ない]
to reaf
  []
description : VB/VB
	 : VBを落としている理由は、今年（2011年）はJavaScriptの年になりそうな予兆がちらほら見えることと、VBの説明がC＃と若干被る部分があるので（MSの話とか、MSの話とか）、ネタ的な問題もあって入れ替えています。
description : VB/VB
	 : VBを落としている理由は、今年（2011年）はJavaScriptの年になりそうな予兆がちらほら見えることと、VBの説明がC＃と若干被る部分があるので（MSの話とか、MSの話とか）、ネタ的な問題もあって入れ替えています。
description : Java/Java
	 : Java、JavaScript、Ruby、Pythonはけっこうガリガリ使ってます。
description : Java/Java
	 : Java、JavaScript、Ruby、Pythonはけっこうガリガリ使ってます。
description : Python/Python
	 : Java、JavaScript、Ruby、Pythonはけっこうガリガリ使ってます。
description : Python/Python
	 : Java、JavaScript、Ruby、Pythonはけっこうガリガリ使ってます。
description : C/C
	 : C＃、Perlはさらっとしか使ったことがないのであまり自信はないです。
description : C/C
	 : C＃、Perlはさらっとしか使ったことがないのであまり自信はないです。
description : C/C
	 : C＃、Perlはさらっとしか使ったことがないのであまり自信はないです。
description : Perl/Perl
	 : C＃、Perlはさらっとしか使ったことがないのであまり自信はないです。
description : Perl/Perl
	 : C＃、Perlはさらっとしか使ったことがないのであまり自信はないです。
description : Python/Python
	 : PythonだってRubyだってオケラだって、みんなCでできている友達なんだ。
description : C/C
	 : C＋＋を使うような気がする。
description : C/C
	 : C＋＋を使うような気がする。
description : C/C
	 : 軽い言語だと勝手に裏側でやってくれるようなメモリの確保とかファイルポインタの操作なんかも、Cでは自分で意識して書かないといけない。
description : C/C
	 : 軽い言語だと勝手に裏側でやってくれるようなメモリの確保とかファイルポインタの操作なんかも、Cでは自分で意識して書かないといけない。
description : C/C
	 : C言語にテンプレートとか、クラスとか、継承とか、多重継承とか、演算子のオーバーロードとか、デフォルト引数とか、その他いろんなパンドラの箱に入っていそうな仕様を取り付けることで出来上がった言語。
description : C/C
	 : C言語にテンプレートとか、クラスとか、継承とか、多重継承とか、演算子のオーバーロードとか、デフォルト引数とか、その他いろんなパンドラの箱に入っていそうな仕様を取り付けることで出来上がった言語。
description : C/C
	 : CでできることはC＋＋でもすべてできるので、個人的にはC＋＋を使わずにCを使うというシーンがあまり思い浮かばない。
description : C/C
	 : CでできることはC＋＋でもすべてできるので、個人的にはC＋＋を使わずにCを使うというシーンがあまり思い浮かばない。
description : こと/こと
	 : CでできることはC＋＋でもすべてできるので、個人的にはC＋＋を使わずにCを使うというシーンがあまり思い浮かばない。
description : こと/こと
	 : 悪いことは言わないので高尾山（PHPとかJavaScript）あたりから初めておこう。
description : こと/こと
	 : そういう良く呼び出され、速度が求められ、書き捨てられるようなコードではない系のソフトを作りたい人は甘えたことは言わずにC＋＋に手を出すのが良いかもしれない。
description : Java/Java
	 : JavaやRubyがWebアプリでも使える汎用的な言語なのに対して、PHPはその名の通りWebアプリで使うことを目的として作られた男らしい言語。
description : Ruby/Ruby
	 : RubyやPythonの求人よりも圧倒的に多い。
description : Python/Python
	 : PerlやRubyがTMTOWTDI（それをやる方法は幾通りも存在する）な言語であるのに対して、Pythonはやり方を1つだけ用意するようにしているところとかがお上品に見える。
description : Perl/Perl
	 : PerlやRubyがTMTOWTDI（それをやる方法は幾通りも存在する）な言語であるのに対して、Pythonはやり方を1つだけ用意するようにしているところとかがお上品に見える。
description : こと/こと
	 : 日本ではPythonを使った仕事に出くわすことはあまり多くない。
description : Python/Python
	 : ライト級の言語を1つも習得してなくてどれにしようか迷っているなら、Pythonは1つの選択肢になる。
description : C/C
	 : CをインクリメントするとC＋＋になる。
description : C/C
	 : CをインクリメントするとC＋＋になる。
description : C/C
	 : C＋＋をさらにインクリメントするとC＃になる。
description : C/C
	 : C＋＋をさらにインクリメントするとC＃になる。
description : C/C
	 : という名前の見た目からCに近い系統なのかと誤解してしまいそうだけど、実際のC＃はJavaのコピー。
description : C/C
	 : という名前の見た目からCに近い系統なのかと誤解してしまいそうだけど、実際のC＃はJavaのコピー。
description : Java/Java
	 : Javaよりも後出しの言語である分、クロージャとか型推論とか、Javaにはない便利な機能もちらほら付いている。
description : Java/Java
	 : Javaに似た言語ということで、記述するコードの量は軽量言語と比べると多め。
description : C/C
	 : Cと互換性があるので、Cが使えるならObjective－Cを学習するのは割と簡単。
description : C/C
	 : Cと互換性があるので、Cが使えるならObjective－Cを学習するのは割と簡単。
description : こと/こと
	 : ということはC＋＋と同じく、学習コストはスクリプト言語とは比べものにならないくらい高くなる。
description : Python/Python
	 : つまりCがトンプソンM1で、PythonはベレッタM92くらいということだ。
description : こと/こと
	 : 楽しくプログラミングができることを意識しているそうで、あまりプログラマを束縛するようなことはしない開放感溢れる言語仕様になっている。
description : Python/Python
	 : Pythonを学ぶか、Perlを学ぶか、Rubyを学ぶか、と考えた時に、日本人だしRubyに一番親近感が湧くなと思ったら手を出すと良いかも。
description : Python/Python
	 : 言語の硬度を測定すると、Javaは硬度8くらい、Pythonは6くらいになるのに対して、Rubyは3くらいになる。
description : Java/Java
	 : 言語の硬度を測定すると、Javaは硬度8くらい、Pythonは6くらいになるのに対して、Rubyは3くらいになる。
description : Ruby/Ruby
	 : 言語の硬度を測定すると、Javaは硬度8くらい、Pythonは6くらいになるのに対して、Rubyは3くらいになる。
description : JavaScript/JavaScript
	 : ブラウザの世界はどこの国土にも属さない紛争地域になっているので、そこで生息するJavaScriptは周囲からのいろんな要求を受け入れてファットになるか、何も受け入れずに「勝手にしろ」と開き直るかのどちらかを選択する必要があった。
description : JavaScript/JavaScript
	 : JavaScriptは軽量な言語だけど意外と何でもできる。
description : Java/Java
	 : Java並の実行速度とRuby並の書きやすさが合わさり最強に見える。
description : Java/Java
	 : Javaの資産が使い放題で、Erlangのような並列処理まで合わせ持つのでもう手に負えない。
description : C/C
	 : CやC＋＋ほどではないけどJavaよりも難易度高め。
description : C/C
	 : CやC＋＋ほどではないけどJavaよりも難易度高め。
description : Java/Java
	 : Javaを使っている人は、老若男女問わず今日からでもScalaを始めた方がいい。
description : Ruby/Ruby
	 : Rubyを使っている人の中で、実行速度がもう少し速くならんものかなぁと思っている人は、今日からでもScalaを始めた方がいい。
description : Python/Python
	 : Pythonを使っている人は、Pythonの神様が微妙と言っていたようにちょっと言語の方向性が違うので、興味があるなら使ってみるくらいのスタンスで。
clueword:
上, 今, 前, たこ, 部分, 話, 問題, どう, 語, あまり, こう, 間, て, いま, した, 部, ない, ど, な, 年, こと, 理由, 書, も, 見え, そう, 言語, さら, の, い, 外, では, 人, 人間, 分, 説明, そ, 理, 仕事, 事, 本, とか
image : 0.622390060147
table : 0.305601760389
graph : 0.201457649968
flow : 0.342975858704

In Section 15, Score:1.421474
Flag：：0000
・誰が学ぶべきか
MSシンパな人、Windowsが大好きな人は、C＃を学ぶことが義務付けられている。
逆にMSを敵だと認識している人は、どんなことがあっても使ってはいけない。
Windowsで動くGUIアプリを作りたい場合は、C＃から始めるのもアリなんじゃないかと思う。
paraword
list
人/じん?人/ひと:Windows/Windows,大好きだ/だいすきだ
人/じん?人/ひと:MS/MS+シンパ/しんぱ
to root
  [学ぶ/まなぶ, こと/こと, 義務付ける/ぎむづける]
to reaf
  []
clueword:
敵, 義, 誰, 場合, いけない, て, どんな, なん, ない, 動, ど, な, め, こと, 好き, 認識, も, の, アプリ, い, 逆, 人, から
image : 0.595379916968
table : 0.288007772807
graph : 0.181011507193
flow : 0.357074958812

In Section 5, Score:1.411258
Flag：：0000
・誰が学ぶべきか
最近だと話題のHadoopとかCassandraとかがJavaで書かれている。その辺りのソフトと親しくなりたい場合は覚えておくと良いかもしれない。
あとは企業で利用されているケースが目立つので、覚えておけば仕事を得る手助けになる。
けど、言語としてはだいぶ古いし、なんとか0xほどではないにしても新しいバージョンの仕様がなかなか決まらないし（クロージャ入れると言い始めてはや何年？）、モダンなものを求めてしまう人には向かないかもしれない。
paraword
list
  [Cassandra/Cassandra, Hadoop/Hadoop]
to root
  [書く/かく]
to reaf
  [話題/わだい]
list
もの/もの:モダンだ/もだんだ
何/なん+年/ねん:や/やa
to root
  [求める/もとめる, 人/じん?人/ひと, 向く/むく]
to reaf
  []
clueword:
誰, 古い, 場合, 話, つの, 企業, 良, クロージャ, バージョン, 語, て, ソフト, なん, なか, ない, ど, もの, な, 年, 何, め, その辺, 話題, 手, 書, も, 言語, その, 良い, の, ケース, い, や, 目, では, 人, 最近, 仕様, そ, 仕事, 事, 利用, あと, バー, 新しい, とか, ほど
image : 0.61879140305
table : 0.304691623697
graph : 0.221741647979
flow : 0.266033537211

In Section 25, Score:1.306089
Flag：：0000
・誰が学ぶべきか
初心者がいきなり手を出すのは少し難しいかもしれない。まずはJavaかRubyに手を出し、その後Scalaにとりかかるのが良いと思われる。
Javaを使っている人は、老若男女問わず今日からでもScalaを始めた方がいい。
Rubyを使っている人の中で、実行速度がもう少し速くならんものかなぁと思っている人は、今日からでもScalaを始めた方がいい。
Pythonを使っている人は、Pythonの神様が微妙と言っていたようにちょっと言語の方向性が違うので、興味があるなら使ってみるくらいのスタンスで。
paraword
description : Java/Java
	 : Javaを使っている人は、老若男女問わず今日からでもScalaを始めた方がいい。
description : Ruby/Ruby
	 : Rubyを使っている人の中で、実行速度がもう少し速くならんものかなぁと思っている人は、今日からでもScalaを始めた方がいい。
description : Python/Python
	 : Pythonを使っている人は、Pythonの神様が微妙と言っていたようにちょっと言語の方向性が違うので、興味があるなら使ってみるくらいのスタンスで。
clueword:
今, 誰, その後, くらい, 良, 方向, 語, 男, 興味, て, いい, 男女, ず, なら, 度, ない, 後, 中, 微妙, 今日, たよう, ちょ, もの, な, 実行, 方, め, 初心, 日, 手, も, 神, 言語, その, 良い, 実, の, 女, い, 神様, よう, 味, 人, 微, らい, 心, から, そ, スタンス, 難しい, 速度
image : 0.612326157047
table : 0.250803856008
graph : 0.185034831062
flow : 0.257924528978

In Section 24, Score:1.288309
Flag：：0100
番外．Scalaとは
・どんな言語か
最近私がハマっている関数型オブジェクト指向言語。コンパイルされるとJavaと同じclassファイルに変換され、JVM上で動作する。
言語のイメージはここを見ればだいたい分かってもらえると思う。
（urls）
・長所
Java並の実行速度とRuby並の書きやすさが合わさり最強に見える。Javaの資産が使い放題で、Erlangのような並列処理まで合わせ持つのでもう手に負えない。
コードの量もその辺のスクリプト言語並に短くて済む。
・短所
覚えるのにけっこう時間がかかる。CやC＋＋ほどではないけどJavaよりも難易度高め。
paraword
list
書く/かく+さ/さ:Ruby/Ruby+並み/なみ
実行/じっこう+速度/そくど:Java/Java+並み/なみ
to root
  [合わさる/あわさる, 見える/みえる]
to reaf
  []
list
  [C/C, C/C]
to root
  [難易/なんい+度/たび?度/ど+高/こう?高/たか]
to reaf
  []
description : 言語/げんご
	 : 言語のイメージはここを見ればだいたい分かってもらえると思う。
description : Java/Java
	 : Java並の実行速度とRuby並の書きやすさが合わさり最強に見える。
description : Java/Java
	 : Javaの資産が使い放題で、Erlangのような並列処理まで合わせ持つのでもう手に負えない。
description : C/C
	 : CやC＋＋ほどではないけどJavaよりも難易度高め。
description : C/C
	 : CやC＋＋ほどではないけどJavaよりも難易度高め。
description : C/C
	 : CやC＋＋ほどではないけどJavaよりも難易度高め。
clueword:
上, 長所, 持, 難易, つの, 短所, 時, 型, 量, 変, 語, 資産, 長, 動作, スクリプト, こう, 間, イメージ, て, 指, どんな, コード, コンパイル, 度, ない, 動, 数, 強, ど, な, 実行, 列, め, その辺, 時間, 変換, ファイル, 手, 書, も, 見え, 処理, 言語, 番外, その, 実, 並列, の, い, や, よう, 外, では, 私, 指向, 高, オブジェクト, 最近, 分, 所, そ, ．, 理, 同じ, 関数, 速度, ほど
image : 0.5936764766
table : 0.285736081264
graph : 0.154117484098
flow : 0.254779036937

In Section 19, Score:1.150627
Flag：：0000
・誰が学ぶべきか
職場で昔のPerlのソースをメンテする必要に迫られるというシチュエーションはけっこうあるので、さらっと読める程度は学んでおいた方が良いかもしれない。
これから学ぶのであれば、まずどのバージョンを学ぶのかから考える必要がある。新しくPerl6（RakudoStar）が用意されつつあるけど、Perl5と比べるとだいぶ違う言語になっている。
レガシーなPerlを触る必要性を意識して学ぶならPerl5を、新しいPerlってどんなものだろうと探究心から学ぶならPerl6を手にとれば良いんじゃないだろうか。
paraword
description : これ/これ
	 : これから学ぶのであれば、まずどのバージョンを学ぶのかから考える必要がある。
clueword:
シチュエーション, 誰, 意識, 良, どの, 程度, バージョン, 語, こう, て, どんな, ず, なら, 度, ない, 必要, ど, もの, な, 方, め, 比, 手, も, 用意, 言語, 良い, さら, の, い, ソース, 昔, うか, 心, から, バー, 新しい
image : 0.543548305846
table : 0.217939111872
graph : 0.154406743883
flow : 0.234732528394

In Section 21, Score:1.073289
Flag：：0000
・誰が学ぶべきか
Pythonを学ぶか、Perlを学ぶか、Rubyを学ぶか、と考えた時に、日本人だしRubyに一番親近感が湧くなと思ったら手を出すと良いかも。
Rails系の仕事はポツポツあるので、周囲で最近そういう案件見かけるなぁと感じた人は学んでおくと仕事の足しになるかも。
言語の硬度を測定すると、Javaは硬度8くらい、Pythonは6くらいになるのに対して、Rubyは3くらいになる。柔らかい手触りが好きだなと思う人はRubyを学ぶといいかも。
paraword
description : Python/Python
	 : Pythonを学ぶか、Perlを学ぶか、Rubyを学ぶか、と考えた時に、日本人だしRubyに一番親近感が湧くなと思ったら手を出すと良いかも。
description : Python/Python
	 : 言語の硬度を測定すると、Javaは硬度8くらい、Pythonは6くらいになるのに対して、Rubyは3くらいになる。
description : 言語/げんご
	 : 言語の硬度を測定すると、Javaは硬度8くらい、Pythonは6くらいになるのに対して、Rubyは3くらいになる。
description : Java/Java
	 : 言語の硬度を測定すると、Javaは硬度8くらい、Pythonは6くらいになるのに対して、Rubyは3くらいになる。
description : Ruby/Ruby
	 : 言語の硬度を測定すると、Javaは硬度8くらい、Pythonは6くらいになるのに対して、Rubyは3くらいになる。
clueword:
案件, 足, 誰, 系, くらい, 良, 時, 柔らかい, すると, 語, そういう, て, いい, 度, な, 日, 好き, 手, も, そう, 言語, 良い, の, 周囲, い, 人, 最近, らい, そ, 感, 日本, 仕事, 事, 本, 本人
image : 0.528031174878
table : 0.195083480502
graph : 0.155606280902
flow : 0.194568125218

In Section 13, Score:1.070288
Flag：：0000
・誰が学ぶべきか
プログラミング言語は、ヘビー級（C＋＋やJava）とライト級（PythonやRuby）を1つずつ覚えておくと、その場に応じて使い分けられるので何かと便利。
ライト級の言語を1つも習得してなくてどれにしようか迷っているなら、Pythonは1つの選択肢になる。
既にライト級の言語を覚えているなら、無理にPythonに手を出す必要はあまりないかもしれない。
paraword
list
Java/Java:ヘビー/ヘビー
Ruby/Ruby:ライト/らいと,Python/Python
C/C:
to root
  [覚える/おぼえる, 使い分ける/つかいわける, 便利だ/べんりだ]
to reaf
  [ヘビー/ヘビー]
list
  [Ruby/Ruby, Python/Python]
to root
  [覚える/おぼえる, 使い分ける/つかいわける, 便利だ/べんりだ]
to reaf
  [ヘビー/ヘビー, C/C, Java/Java, ライト/らいと]
description : Python/Python
	 : ライト級の言語を1つも習得してなくてどれにしようか迷っているなら、Pythonは1つの選択肢になる。
description : Python/Python
	 : ライト級の言語を1つも習得してなくてどれにしようか迷っているなら、Pythonは1つの選択肢になる。
description : C/C
	 : CをインクリメントするとC＋＋になる。
description : C/C
	 : C＋＋をさらにインクリメントするとC＃になる。
description : C/C
	 : という名前の見た目からCに近い系統なのかと誤解してしまいそうだけど、実際のC＃はJavaのコピー。
description : Java/Java
	 : Javaよりも後出しの言語である分、クロージャとか型推論とか、Javaにはない便利な機能もちらほら付いている。
description : Java/Java
	 : Javaに似た言語ということで、記述するコードの量は軽量言語と比べると多め。
description : C/C
	 : Cと互換性があるので、Cが使えるならObjective－Cを学習するのは割と簡単。
description : Python/Python
	 : つまりCがトンプソンM1で、PythonはベレッタM92くらいということだ。
description : Python/Python
	 : Pythonを学ぶか、Perlを学ぶか、Rubyを学ぶか、と考えた時に、日本人だしRubyに一番親近感が湧くなと思ったら手を出すと良いかも。
description : Python/Python
	 : 言語の硬度を測定すると、Javaは硬度8くらい、Pythonは6くらいになるのに対して、Rubyは3くらいになる。
description : Java/Java
	 : 言語の硬度を測定すると、Javaは硬度8くらい、Pythonは6くらいになるのに対して、Rubyは3くらいになる。
description : Ruby/Ruby
	 : 言語の硬度を測定すると、Javaは硬度8くらい、Pythonは6くらいになるのに対して、Rubyは3くらいになる。
description : Ruby/Ruby
	 : 言語の硬度を測定すると、Javaは硬度8くらい、Pythonは6くらいになるのに対して、Rubyは3くらいになる。
description : Java/Java
	 : Java並の実行速度とRuby並の書きやすさが合わさり最強に見える。
description : Java/Java
	 : Javaの資産が使い放題で、Erlangのような並列処理まで合わせ持つのでもう手に負えない。
description : C/C
	 : CやC＋＋ほどではないけどJavaよりも難易度高め。
description : Java/Java
	 : Javaを使っている人は、老若男女問わず今日からでもScalaを始めた方がいい。
description : Ruby/Ruby
	 : Rubyを使っている人の中で、実行速度がもう少し速くならんものかなぁと思っている人は、今日からでもScalaを始めた方がいい。
description : Ruby/Ruby
	 : Rubyを使っている人の中で、実行速度がもう少し速くならんものかなぁと思っている人は、今日からでもScalaを始めた方がいい。
description : Python/Python
	 : Pythonを使っている人は、Pythonの神様が微妙と言っていたようにちょっと言語の方向性が違うので、興味があるなら使ってみるくらいのスタンスで。
clueword:
誰, つの, 語, あまり, て, ず, なら, ない, 必要, ど, な, 何, 手, 便利, も, 言語, その, の, い, や, 選択肢, よう, 無理, うか, 選択, 分, ライト, そ, プログラミング, 理
image : 0.523564496594
table : 0.195660031401
graph : 0.133519574593
flow : 0.217543749778

In Section 17, Score:0.997692
Flag：：0000
・誰が学ぶべきか
あなたがApple信者であれば、他の言語には目も向けずObjective－Cを学びなさい。
あなたがMS信者であれば、C＃かVBを学びなさい。
あなたがGoogle信者であれば、Pythonかgoを学びなさい。
あなたがSun信者なら．．．．．．過去は忘れて新しい企業に入信しなさい。IBMあたりはどうでしょう？
iPhoneアプリを作りたいのであれば、宗派に関係なくObjective－Cを学んでおけば良いと思われる。逆にAndroid派なら目を向けなくても良い言語。
paraword
description : 言語/げんご
	 : あなたがApple信者であれば、他の言語には目も向けずObjective－Cを学びなさい。
clueword:
他の, あたり, 誰, 企業, 良, 過, どう, 語, て, ず, なら, 過去, あなた, ど, な, 関係, 他, も, 言語, 良い, の, アプリ, い, 目, 逆, ．, 新しい
image : 0.48309015065
table : 0.187054593037
graph : 0.12893200483
flow : 0.198614781149

In Section 2, Score:0.905699
Flag：：0100
2011年1月度のTIOBEのランキング上位10言語を基本とし、そこから7位のVBを排除して11位のJavaScriptを格上げしています。
paraword
clueword:
基, 上, 上位, 排除, 語, て, 月, いま, 度, ランキング, 年, 基本, 言語, の, い, 格上げ, から, そ, 本
image : 0.44596825001
table : 0.177800418764
graph : 0.122759110621
flow : 0.159171277349

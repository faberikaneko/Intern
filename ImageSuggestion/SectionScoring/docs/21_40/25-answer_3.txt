In Section 4, Score:2.863204
Flag：：0100
コーディング規約の内容
コーディング規約の内容は、プロジェクトの規模や特性、参加メンバーのスキル、使用言語などにより変更すべきですが、たいていこんな内容が書かれています。
目的
プロジェクトの構成
命名規則
コーディングスタイル
禁止事項
制限事項
推奨事項
目的
そのコーディング規約の適用範囲、なぜ必要なのか、それを守ることによりどんなメリットがあるかを書く。
プロジェクトの構成
コーディングにはあまり関係なさそうな内容ですが、ソースプログラムの先頭にコメントを入れたりするのに使います。プロジェクトの名称などはあらかじめ決まっていることが多いので、もし、そうなら一覧表を付けます。メタ情報の指定方法、フォルダの構成方法なども決めておきます。
命名規則
変数、定数、メソッド（関数）、クラスなどの名前の付け方の基準を決める。変数名の先頭は小文字だとか、クラス名の先頭は大文字だとかがよく使われます。
コーディングスタイル
コーディングスタイルはインデントの仕方とか、中かっこの位置とか、コメントの位置や内容とかを決めておきます。
リソース
エラーメッセージなどはハードコーディングしないで、よくリソースファイルのインデックスを指定したりします。もし使うなら、リソースの使用についての説明、制限なども書いておきましょう。（あまり大きいリソースの管理はたいへんなのでバランスを考えたほうがいいです。特にIDEを使う場合。）
禁止事項
使ってはいけない文法や今はほとんど使われない保守用になっているものとかを揚げておきます。一律に禁止でなく、場合によっては例外も設けておきます。（なぜ禁止なのか、その理由も必ず書きます）
制限事項
あまり推奨されない機能、コーディング方法、クラスなどを揚げておきます。また、その条件を明示します。
推奨事項
好ましいコーディング方法や複数の似たようなクラスや関数などがある場合、どちらが推奨されるかを書いておきます。
paraword
list
規模/きぼ:
使用/しよう+言語/げんご:参加/さんか+メンバー/めんばー,スキル/すきる
特性/とくせい:
to root
  [よる/よる, 変更/へんこう, 書く/かく]
to reaf
  [プロジェクト/ぷろじぇくと]
list
  [スキル/すきる, 使用/しよう+言語/げんご]
to root
  [よる/よる, 変更/へんこう, 書く/かく]
to reaf
  [規模/きぼ, プロジェクト/ぷろじぇくと, 特性/とくせい, 参加/さんか+メンバー/めんばー]
list
構成/こうせい+方法/ほうほう:フォルダ/ふぉるだ
指定/してい+方法/ほうほう:メタ情報/メタ情報
to root
  [決める/きめる]
to reaf
  []
list
  [定数/ていすう, メソッド/めそっど, 変数/へんすう]
to root
  [決める/きめる]
to reaf
  []
list
  [クラス/くらす, 関数/かんすう]
to root
  [名前/なまえ, 付け/つけv+方/かた, 基準/きじゅん, 決める/きめる]
to reaf
  []
list
大文字/おおもじ:クラス/くらす+名/な?名/めい,先頭/せんとう
小文字/こもじ:変数/へんすう+名/な?名/めい,先頭/せんとう
to root
  [使う/つかう]
to reaf
  []
list
仕方/しかた:インデント/インデント
内容/ないよう:中/ちゅう+括弧/かっこ?各戸/かっこ,コメント/こめんと,位置/いち
位置/いち:インデント/インデント,中/ちゅう+括弧/かっこ?各戸/かっこ
to root
  [決める/きめる]
to reaf
  []
list
  [内容/ないよう, 位置/いち]
to root
  [決める/きめる]
to reaf
  [インデント/インデント, 仕方/しかた, 中/ちゅう+括弧/かっこ?各戸/かっこ, 位置/いち, コメント/こめんと]
list
  [説明/せつめい, 制限/せいげん]
to root
  [書く/かく]
to reaf
  [リソース/リソース, 使用/しよう, つく/つく]
list
  [今/いま, 文法/ぶんぽう]
to root
  [揚げる/あげる]
to reaf
  [使う/つかう]
list
  [機能/きのう, コーディング/コーディング+方法/ほうほう, クラス/くらす]
to root
  [揚げる/あげる]
to reaf
  [余り/あまり, 推奨/すいしょう]
list
関数/かんすう:複数/ふくすう,似る/にる,クラス/くらす
コーディング/コーディング+方法/ほうほう:好ましい/このましい
to root
  [有る/ある, 場合/ばあい, 推奨/すいしょう, 書く/かく]
to reaf
  []
list
  [クラス/くらす, 関数/かんすう]
to root
  [有る/ある, 場合/ばあい, 推奨/すいしょう, 書く/かく]
to reaf
  [好ましい/このましい, 複数/ふくすう, コーディング/コーディング+方法/ほうほう, 似る/にる]
description : 変数/へんすう
	 : 変数、定数、メソッド（関数）、クラスなどの名前の付け方の基準を決める。
description : 変数/へんすう
	 : 変数、定数、メソッド（関数）、クラスなどの名前の付け方の基準を決める。
description : 変数/へんすう
	 : 変数名の先頭は小文字だとか、クラス名の先頭は大文字だとかがよく使われます。
description : 変数/へんすう
	 : 変数名の先頭は小文字だとか、クラス名の先頭は大文字だとかがよく使われます。
description : 今/いま
	 : 使ってはいけない文法や今はほとんど使われない保守用になっているものとかを揚げておきます。
description : 今/いま
	 : 使ってはいけない文法や今はほとんど使われない保守用になっているものとかを揚げておきます。
description : 制限/せいげん
	 : 制限事項
description : 制限/せいげん
	 : 制限事項
clueword:
コーディング, 適用, 基, 禁止, 明示, 名前, 今, 前, 先頭, こんな, エラー, 場合, 一覧, 規約, 機能, プログラム, 機, どの, 目的, 保守, インデント, 小文字, 使用, メンバー, いけない, メッセージ, 文字, 名, 変, 語, 基準, 特性, あまり, て, 推奨, 指, メソッド, 名称, どんな, スタイ, インデックス, 事項, いい, いま, スキル, した, ず, なら, バランス, 規則, 例外, ない, 数, 必要, 中, ど, 限, うがい, 文, たよう, ランス, グラム, もの, な, 関係, 命, 文法, メタ情報, 条件, 方, め, こと, この, 理由, ファイル, 書, 法, も, メリット, また, イン, 参加, 表, そう, 言語, 変数, その, 規模, 定数, の, 制限, プロジェクト, スタイル, かっこ, い, クラス, ソース, 仕方, や, 大きい, 構成, 条, 内容, 変更, 情報, 目, 指定, よう, 外, 複数, 説明, 多い, 頭, そ, 方法, 範囲, 管理, 位置, 字, フォルダ, 理, 命名, 大文字, 先, ハード, 事, 関数, バー, バラ, コメント, 例, スキ, リソース, とか, ほう
image : 0.846931569193
table : 1.18412354047
graph : 0.247487800643
flow : 0.584660647432

In Section 3, Score:1.788762
Flag：：0100
コーディング規約のメリット・デメリット
コーディング規約のメリットはプログラマの個性を殺して均質なプログラムを作ること、過去の知識や経験から得られたバグの発生源となりやすいコーディングの防止、インデントやコメントの基準を決めて見やすさ保守性の高さを求める・・・等々です。
一方、デメリットですが、使える文法を制限してスキルの高いプログラマの生産性を殺したり、過去のプログラムとの互換性を追求するあまり新しい機能の使用を制限したり・・・等々があります。
一般に、大きなプロジェクトほどコーディング規約の内容は強制的、制限的です。これは、大きなプロジェクトだと、スキルの低い人もメンバーに入っていることが多く、コーディングを自由にやらせると、品質が落ちたり、プログラムが見づらく保守性が悪くなるったりするためです。
paraword
list
  [経験/けいけん, 知識/ちしき]
to root
  [得る/える, バグ/バグ, 発生/はっせい+源/げん?源/みなもと, 成る/なる?鳴る/なる, コーディング/コーディング, 基準/きじゅん, 決める/きめる, 求める/もとめる+等/とう]
to reaf
  [過去/かこ]
list
防止/ぼうし:
インデント/インデント:
基準/きじゅん:コメント/こめんと
to root
  [決める/きめる, 求める/もとめる+等/とう]
to reaf
  [過去/かこ, 知識/ちしき, 経験/けいけん, 得る/える, バグ/バグ, 発生/はっせい+源/げん?源/みなもと, 成る/なる?鳴る/なる, コーディング/コーディング]
clueword:
個, コーディング, 基, 発, ため, 経験, 防止, 規約, 発生, プログラマ, 機能, プログラム, 機, 過, 保守, インデント, 使用, メンバー, 基準, あまり, 一般, 強制, て, 互換, スキル, した, 過去, 強, 生産, ど, 低い, 限, 文, グラム, 知識, な, 一方, 文法, 方, め, こと, 高い, 法, も, メリット, 質, イン, の, 制限, プロジェクト, い, 大きな, や, 等, 内容, 高, 人, 個性, 追求, 多く, 生, から, デメリット, バー, コメント, 品質, 新しい, スキ, 悪, ほど
image : 0.63676594405
table : 0.55115232772
graph : 0.191068699747
flow : 0.409774837122

In Section 2, Score:1.146014
Flag：：1000
内容は変数などの命名規則、禁止事項（例えばgoto文はダメとか）、コメントの付け方とか、いろいろプロジェクトの特性やその会社の文化などで変わります。
paraword
list
  [命名/めいめい+規則/きそく, 禁止/きんし+事項/じこう]
to root
  [駄目/だめa, コメント/こめんと, 付け/つけv+方/かた, 変わる/かわる]
to reaf
  [変数/へんすう]
list
文化/ぶんか:その/その,会社/かいしゃ
特性/とくせい:プロジェクト/ぷろじぇくと
to root
  [変わる/かわる]
to reaf
  []
clueword:
禁止, どの, 名, 変, 特性, 会, 事項, 会社, 規則, 数, ど, 文, な, 文化, 命, 方, ダメ, 変数, その, の, プロジェクト, い, や, 内容, いろいろ, そ, 命名, 事, コメント, 例, とか
image : 0.501100666159
table : 0.280471366214
graph : 0.169879529469
flow : 0.194562476168

In Section 5, Score:1.084784
Flag：：0000
コーディング規約を作るときの注意
続く．．
VB．NET版のサンプルを作ってみました
たたき台程度の内容ですが、参考になればと思います。
あと、用例も入れたほうがいいですね。
paraword
clueword:
コーディング, 規約, 台, 程度, 参考, サンプル, て, いい, いま, した, 度, うがい, な, も, の, い, 内容, ．, 注意, あと, 例, とき, ほう
image : 0.500138056604
table : 0.189246318621
graph : 0.144651552317
flow : 0.250748470058

In Section 1, Score:0.983433
Flag：：0000
コーディング規約とは
「コーディング規約」は多数のプログラマが参加するプロジェクトにおいて、プログラミング品質を均等にするために定める文書です。
paraword
clueword:
コーディング, ため, 規約, プログラマ, て, 数, 文, め, 多数, 書, 質, 参加, の, プロジェクト, い, 等, 文書, プログラミング, 品質
image : 0.473753608098
table : 0.187484109173
graph : 0.132816303175
flow : 0.18937897783

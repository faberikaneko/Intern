In Section 10, Score:4.228914
Flag：：0100
4.PHPとは
・どんな言語か
正式名称は「PHP：HypertextPreprocessor」（意訳：我はHTMLを生み出すために在る）。
JavaやRubyがWebアプリでも使える汎用的な言語なのに対して、PHPはその名の通りWebアプリで使うことを目的として作られた男らしい言語。
スクリプトレットでHTMLの中にさらっとプログラムを書きこんで動的なページを作る目的で作られた。その後、あれも欲しいこれも欲しいと拡張を続けていったら、いつの間にかもっともらしい言語っぽくなっていた。こうした日々拡張を重ねる言語をハウルの動く城式言語と呼ぶ（今考えた）。
・長所
初心者がプログラムを学び始めてから動的なページが作れるようになるまでにかかる学習時間の短さは魅力的。コードの量も短い。環境設定も簡単。
多くの有料レンタルサーバはPHPを使える環境を用意しているので、仕事じゃなく個人で使う用途でも活躍する機会が多い。
巷に出回っている求人の量が多いのも魅力。RubyやPythonの求人よりも圧倒的に多い。但しPHPを使える人の数も多いので仕事が取りやすいかどうかは別の話。
・短所
実行速度はスクリプト言語らしい速度。
Webアプリ以外の場所ではあまり利用されない。ので、Web向け以外の用途で使うためのライブラリとかはそんなに多くない。
PHPしか使えないプログラマはPHPerと呼ばれて迫害される決まりになっている。
paraword
list
PHP/PHP+HypertextPreprocessor/HypertextPreprocessor:正式/せいしきa+名称/めいしょう
有る/ある:HTML/HTML,生む/うむ,意訳/いやく+我/われ,為/ため
to root
  []
to reaf
  []
list
  [Java/Java, Ruby/Ruby]
to root
  [対する/たいする, 言語/げんご]
to reaf
  []
list
これ/これ:欲しい/ほしい
あれ/あれ:
to root
  [欲しい/ほしい, 続ける/つづける, 言語/げんご]
to reaf
  []
list
  [Ruby/Ruby, Python/Python]
to root
  [求人/きゅうじん, 多い/おおい]
to reaf
  []
description : PHP/PHP+HypertextPreprocessor/HypertextPreprocessor
	 : JavaやRubyがWebアプリでも使える汎用的な言語なのに対して、PHPはその名の通りWebアプリで使うことを目的として作られた男らしい言語。
description : PHP/PHP+HypertextPreprocessor/HypertextPreprocessor
	 : JavaやRubyがWebアプリでも使える汎用的な言語なのに対して、PHPはその名の通りWebアプリで使うことを目的として作られた男らしい言語。
description : PHP/PHP
	 : JavaやRubyがWebアプリでも使える汎用的な言語なのに対して、PHPはその名の通りWebアプリで使うことを目的として作られた男らしい言語。
description : Java/Java
	 : JavaやRubyがWebアプリでも使える汎用的な言語なのに対して、PHPはその名の通りWebアプリで使うことを目的として作られた男らしい言語。
description : Java/Java
	 : JavaやRubyがWebアプリでも使える汎用的な言語なのに対して、PHPはその名の通りWebアプリで使うことを目的として作られた男らしい言語。
description : Ruby/Ruby
	 : RubyやPythonの求人よりも圧倒的に多い。
description : Ruby/Ruby
	 : RubyやPythonの求人よりも圧倒的に多い。
description : Ruby/Ruby
	 : RubyやPythonの求人よりも圧倒的に多い。
description : PHP/PHP
	 : PHPしか使えないプログラマはPHPerと呼ばれて迫害される決まりになっている。
description : これ/これ
	 : これからプログラムを学びたいという人で、Web系を考えている人はとりあえずPHPから始めると手っ取り早いかもしれない（もちろんその前にHTMLは覚えておく必要はある）。
description : Python/Python
	 : PerlやRubyがTMTOWTDI（それをやる方法は幾通りも存在する）な言語であるのに対して、Pythonはやり方を1つだけ用意するようにしているところとかがお上品に見える。
description : Python/Python
	 : ライト級の言語を1つも習得してなくてどれにしようか迷っているなら、Pythonは1つの選択肢になる。
description : Java/Java
	 : Javaよりも後出しの言語である分、クロージャとか型推論とか、Javaにはない便利な機能もちらほら付いている。
description : Java/Java
	 : Javaに似た言語ということで、記述するコードの量は軽量言語と比べると多め。
description : Python/Python
	 : つまりCがトンプソンM1で、PythonはベレッタM92くらいということだ。
description : これ/これ
	 : これから学ぶのであれば、まずどのバージョンを学ぶのかから考える必要がある。
description : Python/Python
	 : Pythonを学ぶか、Perlを学ぶか、Rubyを学ぶか、と考えた時に、日本人だしRubyに一番親近感が湧くなと思ったら手を出すと良いかも。
description : Python/Python
	 : 言語の硬度を測定すると、Javaは硬度8くらい、Pythonは6くらいになるのに対して、Rubyは3くらいになる。
description : Java/Java
	 : 言語の硬度を測定すると、Javaは硬度8くらい、Pythonは6くらいになるのに対して、Rubyは3くらいになる。
description : Ruby/Ruby
	 : 言語の硬度を測定すると、Javaは硬度8くらい、Pythonは6くらいになるのに対して、Rubyは3くらいになる。
description : Ruby/Ruby
	 : 言語の硬度を測定すると、Javaは硬度8くらい、Pythonは6くらいになるのに対して、Rubyは3くらいになる。
description : Java/Java
	 : Java並の実行速度とRuby並の書きやすさが合わさり最強に見える。
description : Java/Java
	 : Javaの資産が使い放題で、Erlangのような並列処理まで合わせ持つのでもう手に負えない。
description : Java/Java
	 : Javaを使っている人は、老若男女問わず今日からでもScalaを始めた方がいい。
description : Ruby/Ruby
	 : Rubyを使っている人の中で、実行速度がもう少し速くならんものかなぁと思っている人は、今日からでもScalaを始めた方がいい。
description : Ruby/Ruby
	 : Rubyを使っている人の中で、実行速度がもう少し速くならんものかなぁと思っている人は、今日からでもScalaを始めた方がいい。
description : Python/Python
	 : Pythonを使っている人は、Pythonの神様が微妙と言っていたようにちょっと言語の方向性が違うので、興味があるなら使ってみるくらいのスタンスで。
clueword:
あまり, 簡単, 男らしい, 間, 正式, こう, 時間, 別, その後, どんな, 短い, ため, そ, こうした, らしい, 多い, その, ない, 時, 後, そんな, 中, どう, さら, 欲しい, 通, 通り, よう
image : 0.918612522281
table : 2.27610781905
graph : 0.377585330521
flow : 0.656608283779

In Section 3, Score:3.867012
Flag：：0000
VBを落としている理由は、今年（2011年）はJavaScriptの年になりそうな予兆がちらほら見えることと、VBの説明がC＃と若干被る部分があるので（MSの話とか、MSの話とか）、ネタ的な問題もあって入れ替えています。
一応、これを書いてる人間はObjective－C以外の9言語は仕事で使ったことがあります。Java、JavaScript、Ruby、Pythonはけっこうガリガリ使ってます。C＃、Perlはさらっとしか使ったことがないのであまり自信はないです。お察しください。
以上、前置きでした。では本編をどうぞ。
paraword
list
  [VB/VB, こと/こと]
to root
  [説明/せつめい, 有る/ある, 入れ替える/いれかえる]
to reaf
  [JavaScript/JavaScript, 年/とし?年/ねん, 成る/なる?鳴る/なる, 2011/2011+年/とし?年/ねん, 予兆/よちょう, チラホラ/ちらほら, 見える/みえる]
list
部分/ぶぶん:若干/じゃっかん,被る/かぶる?被る/こうむる
C/C:
to root
  [有る/ある, 入れ替える/いれかえる]
to reaf
  []
list
話/はなし:MS/MS
話/はなし:MS/MS
to root
  [問題/もんだい, 入れ替える/いれかえる]
to reaf
  []
list
  [Java/Java, JavaScript/JavaScript, Python/Python, Ruby/Ruby]
to root
  [使う/つかう]
to reaf
  []
list
  [Perl/Perl, C/C]
to root
  [使う/つかう, 無い/ない]
to reaf
  []
description : VB/VB
	 : VBを落としている理由は、今年（2011年）はJavaScriptの年になりそうな予兆がちらほら見えることと、VBの説明がC＃と若干被る部分があるので（MSの話とか、MSの話とか）、ネタ的な問題もあって入れ替えています。
description : VB/VB
	 : VBを落としている理由は、今年（2011年）はJavaScriptの年になりそうな予兆がちらほら見えることと、VBの説明がC＃と若干被る部分があるので（MSの話とか、MSの話とか）、ネタ的な問題もあって入れ替えています。
description : Java/Java
	 : Java、JavaScript、Ruby、Pythonはけっこうガリガリ使ってます。
description : Java/Java
	 : Java、JavaScript、Ruby、Pythonはけっこうガリガリ使ってます。
description : Python/Python
	 : Java、JavaScript、Ruby、Pythonはけっこうガリガリ使ってます。
description : Python/Python
	 : Java、JavaScript、Ruby、Pythonはけっこうガリガリ使ってます。
description : C/C
	 : C＃、Perlはさらっとしか使ったことがないのであまり自信はないです。
description : C/C
	 : C＃、Perlはさらっとしか使ったことがないのであまり自信はないです。
description : C/C
	 : C＃、Perlはさらっとしか使ったことがないのであまり自信はないです。
description : Perl/Perl
	 : C＃、Perlはさらっとしか使ったことがないのであまり自信はないです。
description : Perl/Perl
	 : C＃、Perlはさらっとしか使ったことがないのであまり自信はないです。
description : Python/Python
	 : PythonだってRubyだってオケラだって、みんなCでできている友達なんだ。
description : C/C
	 : C＋＋を使うような気がする。
description : C/C
	 : C＋＋を使うような気がする。
description : C/C
	 : 軽い言語だと勝手に裏側でやってくれるようなメモリの確保とかファイルポインタの操作なんかも、Cでは自分で意識して書かないといけない。
description : C/C
	 : 軽い言語だと勝手に裏側でやってくれるようなメモリの確保とかファイルポインタの操作なんかも、Cでは自分で意識して書かないといけない。
description : C/C
	 : C言語にテンプレートとか、クラスとか、継承とか、多重継承とか、演算子のオーバーロードとか、デフォルト引数とか、その他いろんなパンドラの箱に入っていそうな仕様を取り付けることで出来上がった言語。
description : C/C
	 : C言語にテンプレートとか、クラスとか、継承とか、多重継承とか、演算子のオーバーロードとか、デフォルト引数とか、その他いろんなパンドラの箱に入っていそうな仕様を取り付けることで出来上がった言語。
description : C/C
	 : CでできることはC＋＋でもすべてできるので、個人的にはC＋＋を使わずにCを使うというシーンがあまり思い浮かばない。
description : C/C
	 : CでできることはC＋＋でもすべてできるので、個人的にはC＋＋を使わずにCを使うというシーンがあまり思い浮かばない。
description : こと/こと
	 : CでできることはC＋＋でもすべてできるので、個人的にはC＋＋を使わずにCを使うというシーンがあまり思い浮かばない。
description : こと/こと
	 : 悪いことは言わないので高尾山（PHPとかJavaScript）あたりから初めておこう。
description : こと/こと
	 : そういう良く呼び出され、速度が求められ、書き捨てられるようなコードではない系のソフトを作りたい人は甘えたことは言わずにC＋＋に手を出すのが良いかもしれない。
description : Java/Java
	 : JavaやRubyがWebアプリでも使える汎用的な言語なのに対して、PHPはその名の通りWebアプリで使うことを目的として作られた男らしい言語。
description : Ruby/Ruby
	 : RubyやPythonの求人よりも圧倒的に多い。
description : Python/Python
	 : PerlやRubyがTMTOWTDI（それをやる方法は幾通りも存在する）な言語であるのに対して、Pythonはやり方を1つだけ用意するようにしているところとかがお上品に見える。
description : Perl/Perl
	 : PerlやRubyがTMTOWTDI（それをやる方法は幾通りも存在する）な言語であるのに対して、Pythonはやり方を1つだけ用意するようにしているところとかがお上品に見える。
description : こと/こと
	 : 日本ではPythonを使った仕事に出くわすことはあまり多くない。
description : Python/Python
	 : ライト級の言語を1つも習得してなくてどれにしようか迷っているなら、Pythonは1つの選択肢になる。
description : C/C
	 : CをインクリメントするとC＋＋になる。
description : C/C
	 : CをインクリメントするとC＋＋になる。
description : C/C
	 : C＋＋をさらにインクリメントするとC＃になる。
description : C/C
	 : C＋＋をさらにインクリメントするとC＃になる。
description : C/C
	 : という名前の見た目からCに近い系統なのかと誤解してしまいそうだけど、実際のC＃はJavaのコピー。
description : C/C
	 : という名前の見た目からCに近い系統なのかと誤解してしまいそうだけど、実際のC＃はJavaのコピー。
description : Java/Java
	 : Javaよりも後出しの言語である分、クロージャとか型推論とか、Javaにはない便利な機能もちらほら付いている。
description : Java/Java
	 : Javaに似た言語ということで、記述するコードの量は軽量言語と比べると多め。
description : C/C
	 : Cと互換性があるので、Cが使えるならObjective－Cを学習するのは割と簡単。
description : C/C
	 : Cと互換性があるので、Cが使えるならObjective－Cを学習するのは割と簡単。
description : こと/こと
	 : ということはC＋＋と同じく、学習コストはスクリプト言語とは比べものにならないくらい高くなる。
description : Python/Python
	 : つまりCがトンプソンM1で、PythonはベレッタM92くらいということだ。
description : こと/こと
	 : 楽しくプログラミングができることを意識しているそうで、あまりプログラマを束縛するようなことはしない開放感溢れる言語仕様になっている。
description : Python/Python
	 : Pythonを学ぶか、Perlを学ぶか、Rubyを学ぶか、と考えた時に、日本人だしRubyに一番親近感が湧くなと思ったら手を出すと良いかも。
description : Python/Python
	 : 言語の硬度を測定すると、Javaは硬度8くらい、Pythonは6くらいになるのに対して、Rubyは3くらいになる。
description : Java/Java
	 : 言語の硬度を測定すると、Javaは硬度8くらい、Pythonは6くらいになるのに対して、Rubyは3くらいになる。
description : Ruby/Ruby
	 : 言語の硬度を測定すると、Javaは硬度8くらい、Pythonは6くらいになるのに対して、Rubyは3くらいになる。
description : JavaScript/JavaScript
	 : ブラウザの世界はどこの国土にも属さない紛争地域になっているので、そこで生息するJavaScriptは周囲からのいろんな要求を受け入れてファットになるか、何も受け入れずに「勝手にしろ」と開き直るかのどちらかを選択する必要があった。
description : JavaScript/JavaScript
	 : JavaScriptは軽量な言語だけど意外と何でもできる。
description : Java/Java
	 : Java並の実行速度とRuby並の書きやすさが合わさり最強に見える。
description : Java/Java
	 : Javaの資産が使い放題で、Erlangのような並列処理まで合わせ持つのでもう手に負えない。
description : C/C
	 : CやC＋＋ほどではないけどJavaよりも難易度高め。
description : C/C
	 : CやC＋＋ほどではないけどJavaよりも難易度高め。
description : Java/Java
	 : Javaを使っている人は、老若男女問わず今日からでもScalaを始めた方がいい。
description : Ruby/Ruby
	 : Rubyを使っている人の中で、実行速度がもう少し速くならんものかなぁと思っている人は、今日からでもScalaを始めた方がいい。
description : Python/Python
	 : Pythonを使っている人は、Pythonの神様が微妙と言っていたようにちょっと言語の方向性が違うので、興味があるなら使ってみるくらいのスタンスで。
clueword:
あまり, 間, 以上, こう, 前, そ, そう, ない, どう, さら, 上
image : 0.549761683331
table : 2.95184393468
graph : 0.172728543472
flow : 0.192678284222

In Section 8, Score:3.344902
Flag：：0100
3.C＋＋とは
・どんな言語か
C言語にテンプレートとか、クラスとか、継承とか、多重継承とか、演算子のオーバーロードとか、デフォルト引数とか、その他いろんなパンドラの箱に入っていそうな仕様を取り付けることで出来上がった言語。
多くの仕様が加わることによって生み出されるコードは混沌としたが、最後には希望が残ったと言われているとかいないとか。
・長所
速度はCと同じく音速。その上オブジェクト指向やらスマートポインタやら様々な機能が付加され、Boostなんていう強力という言葉がよく似合うライブラリも使えるので、多彩なコードの書き方ができる。
CでできることはC＋＋でもすべてできるので、個人的にはC＋＋を使わずにCを使うというシーンがあまり思い浮かばない。
・短所
スマートポインタがいるとはいえガベージコレクションはないのでメモリ管理はやはり面倒。
学習する際はC言語の基本を学んでからC＋＋に手を伸ばすような経路が一般的。つまり、ただでさえ学習コストが他の言語より高めなCを学んで、さらにC＋＋の概念を学ばないといけない。使えるようになるまでかなり時間がかかる。
主観的な点数を付けると、PythonやRubyの学習コストを10として、Javaを15、Cを20とすると、C＋＋の学習はコストが30くらいかかるような感じ。
あと、大規模なプロジェクトだとビルドにけっこうな時間がかかるのが割とストレス。
paraword
list
テンプレート/テンプレート:
継承/けいしょう:
クラス/くらす:
デフォルト/でふぉると+引数/ひきすう:演算/えんざん+子/こ?子/し,オーバー/おーばー?オーバーだ/おーばーだ+ロード/ろーど
多重/たじゅう+継承/けいしょう:
to root
  [いろんな/いろんな, パンドラ/ぱんどら, 箱/はこ, 入る/はいる, 仕様/しよう, 取り付ける/とりつける, こと/こと, 出来る/できる, 言語/げんご]
to reaf
  []
list
  [デフォルト/でふぉると+引数/ひきすう, オーバー/おーばー?オーバーだ/おーばーだ+ロード/ろーど]
to root
  [いろんな/いろんな, パンドラ/ぱんどら, 箱/はこ, 入る/はいる, 仕様/しよう, 取り付ける/とりつける, こと/こと, 出来る/できる, 言語/げんご]
to reaf
  [テンプレート/テンプレート, クラス/くらす, 継承/けいしょう, 多重/たじゅう+継承/けいしょう, 演算/えんざん+子/こ?子/し]
list
  [Ruby/Ruby, Python/Python]
to root
  [学習/がくしゅう+コスト/こすと, する/する, する/する, 感じ/かんじv]
to reaf
  []
list
  [15/15, C/C]
to root
  [する/する, 感じ/かんじv]
to reaf
  []
description : C/C
	 : C言語にテンプレートとか、クラスとか、継承とか、多重継承とか、演算子のオーバーロードとか、デフォルト引数とか、その他いろんなパンドラの箱に入っていそうな仕様を取り付けることで出来上がった言語。
description : C/C
	 : CでできることはC＋＋でもすべてできるので、個人的にはC＋＋を使わずにCを使うというシーンがあまり思い浮かばない。
description : こと/こと
	 : CでできることはC＋＋でもすべてできるので、個人的にはC＋＋を使わずにCを使うというシーンがあまり思い浮かばない。
description : Ruby/Ruby
	 : RubyやPythonの求人よりも圧倒的に多い。
description : Python/Python
	 : PerlやRubyがTMTOWTDI（それをやる方法は幾通りも存在する）な言語であるのに対して、Pythonはやり方を1つだけ用意するようにしているところとかがお上品に見える。
description : Python/Python
	 : ライト級の言語を1つも習得してなくてどれにしようか迷っているなら、Pythonは1つの選択肢になる。
description : C/C
	 : CをインクリメントするとC＋＋になる。
description : C/C
	 : C＋＋をさらにインクリメントするとC＃になる。
description : C/C
	 : という名前の見た目からCに近い系統なのかと誤解してしまいそうだけど、実際のC＃はJavaのコピー。
description : C/C
	 : Cと互換性があるので、Cが使えるならObjective－Cを学習するのは割と簡単。
description : Python/Python
	 : つまりCがトンプソンM1で、PythonはベレッタM92くらいということだ。
description : Python/Python
	 : Pythonを学ぶか、Perlを学ぶか、Rubyを学ぶか、と考えた時に、日本人だしRubyに一番親近感が湧くなと思ったら手を出すと良いかも。
description : Python/Python
	 : 言語の硬度を測定すると、Javaは硬度8くらい、Pythonは6くらいになるのに対して、Rubyは3くらいになる。
description : Ruby/Ruby
	 : 言語の硬度を測定すると、Javaは硬度8くらい、Pythonは6くらいになるのに対して、Rubyは3くらいになる。
description : C/C
	 : CやC＋＋ほどではないけどJavaよりも難易度高め。
description : Ruby/Ruby
	 : Rubyを使っている人の中で、実行速度がもう少し速くならんものかなぁと思っている人は、今日からでもScalaを始めた方がいい。
description : Python/Python
	 : Pythonを使っている人は、Pythonの神様が微妙と言っていたようにちょっと言語の方向性が違うので、興味があるなら使ってみるくらいのスタンスで。
clueword:
あまり, 方, 間, 他の, こう, 時間, どんな, 最後, すると, そ, そう, くらい, その, ない, 時, 様々, 同じ, 後, 様, 際, さら, 強力, 主, いけない, 上, とはいえ, 他, よう
image : 0.828535623213
table : 1.74469041581
graph : 0.245580349201
flow : 0.526095232474

In Section 22, Score:3.337354
Flag：：0100
10.JavaScriptとは
・どんな言語か
ブラウザ上で動く言語。最近はnode．jsなんていうサーバサイドJavaScriptなんてものも出てきている。
ブラウザの世界はどこの国土にも属さない紛争地域になっているので、そこで生息するJavaScriptは周囲からのいろんな要求を受け入れてファットになるか、何も受け入れずに「勝手にしろ」と開き直るかのどちらかを選択する必要があった。
そこで彼は基本的なことだけをサポートした上で「あとはjQueryにでも言えよ。俺に言うな」というスタンスを取った。それで彼はあの激戦区の中にいてもハウルの城になることもなく、小さくシンプルなままの姿で居ることができている。
・長所
ブラウザ紛争地域で勝者になるには速度を追い求める必要があることから、実行速度は「その辺のスクリプト言語よりもよほど速いんじゃない？」というベンチマークをたたき出すようになっている。JITがトレーシングで最適化な感じで。
JavaScriptは軽量な言語だけど意外と何でもできる。オブジェクト指向だろうと、イベント指向だろうと、メタプロだろうと、関数型プログラミングだろうと、割と無理なく実現できる。
・短所
メインはブラウザ上で動作する言語なので、用途は限られる。間違っても巨大ファイルを操作してデータ処理をしようなんて用途に使うものではない。
一人前のJavaScript使いになるためには、ブラウザの違いに翻弄されて目を血走らせながら「IEがぁ、IEがあぁぁ」と叫ぶ儀式を通過しなければいけない。
paraword
list
出る/でる:js/js,言う/いう,サーバー/さーばー+サイド/さいど+JavaScript/JavaScript,物/もの?者/もの
node/node:最近/さいきん
to root
  []
to reaf
  []
list
  [オブジェクト/おぶじぇくと+指向/しこう, イベント/いべんと+指向/しこう, メタプロ/メタプロ, 関数/かんすう+型/かた?型/けい+プログラミング/ぷろぐらみんぐ]
to root
  [実現/じつげん]
to reaf
  []
list
  [IE/IE, ぁ/ぁ]
to root
  [ああ/ああ, 叫ぶ/さけぶ, 儀式/ぎしき, 通過/つうか]
to reaf
  []
description : JavaScript/JavaScript
	 : ブラウザの世界はどこの国土にも属さない紛争地域になっているので、そこで生息するJavaScriptは周囲からのいろんな要求を受け入れてファットになるか、何も受け入れずに「勝手にしろ」と開き直るかのどちらかを選択する必要があった。
description : JavaScript/JavaScript
	 : JavaScriptは軽量な言語だけど意外と何でもできる。
clueword:
無理, 間, この, 意外, 前, どんな, ため, シンプル, まま, そ, その, ない, 最適, 必要, 中, あの, いけない, 通, 勝手, 上, ほど, よう
image : 1.03594972014
table : 1.16561275886
graph : 0.379656644725
flow : 0.756134629856

In Section 14, Score:3.317221
Flag：：0100
6.C＃とは
・どんな言語か
CをインクリメントするとC＋＋になる。C＋＋をさらにインクリメントするとC＃になる。という名前の見た目からCに近い系統なのかと誤解してしまいそうだけど、実際のC＃はJavaのコピー。
いろんなところがJavaと似ているので（中間コードに翻訳してVMで動くところとか、クラスの振る舞いとか）、Javaを知っているプログラマはそんなに悩むことなく学習することができる。
・長所
WindowsでGUIアプリを作ろうと思った場合、けっこういいものが作れる。SwingほどUI的に（お察しください）な状態にもならず、C＋＋で作るほどコーディングが（お察しください）な状態にもならない。
Javaよりも後出しの言語である分、クロージャとか型推論とか、Javaにはない便利な機能もちらほら付いている。
実行速度も速い。Windowsで動かす分にはJavaより若干速かったはず。IDEもVisualStudioという鉄板ソフトがある。
・短所
Monoは頑張ってはいるけど、Linuxでの動作に関してはそれほど実績がない。現状ではApple頼みのObjectiveCほどではないものの、Micorosoft頼みの色が強い。
そのため、MSコケたら使う場所がなくなったという現象が起こらないとも限らない。そう簡単にMSが転ぶとは思わないけど、例えばモバイル分野辺りで居場所が確保できるかは少し不透明。いい言語なんだけどね。
Javaに似た言語ということで、記述するコードの量は軽量言語と比べると多め。
paraword
list
振る舞い/ふるまいv:クラス/くらす
ところ/ところ:
to root
  [Java/Java, 知る/しる, プログラマ/プログラマ, 学習/がくしゅう]
to reaf
  [中間/ちゅうかん+コード/こーど, 翻訳/ほんやく, VM/VM, 動く/うごく]
list
クロージャ/クロージャ:
分/ぶん:
機能/きのう:Java/Java,無い/ない,便利だ/べんりだ
型/かた?型/けい+推論/すいろん:Java/Java,後/あと,出し/だしv,言語/げんご
to root
  [付く/つく]
to reaf
  [Java/Java, 後/あと, 出し/だしv, 言語/げんご]
description : C/C
	 : CをインクリメントするとC＋＋になる。
description : C/C
	 : C＋＋をさらにインクリメントするとC＃になる。
description : C/C
	 : という名前の見た目からCに近い系統なのかと誤解してしまいそうだけど、実際のC＃はJavaのコピー。
description : Java/Java
	 : Javaよりも後出しの言語である分、クロージャとか型推論とか、Javaにはない便利な機能もちらほら付いている。
description : 分/ぶん
	 : Windowsで動かす分にはJavaより若干速かったはず。
description : 分/ぶん
	 : Windowsで動かす分にはJavaより若干速かったはず。
description : 確保/かくほ
	 : そう簡単にMSが転ぶとは思わないけど、例えばモバイル分野辺りで居場所が確保できるかは少し不透明。
description : Java/Java
	 : Javaに似た言語ということで、記述するコードの量は軽量言語と比べると多め。
clueword:
簡単, 間, 近い, こう, ころ, 前, どんな, ため, 便利, 透明, いい, 場合, すると, そ, そう, 強い, その, ない, 後, そんな, 中, 際, さら, ところ, ほど
image : 0.843218032149
table : 1.62103887629
graph : 0.434171601393
flow : 0.418792698942

In Section 4, Score:2.899295
Flag：：0100
1.Javaとは
・どんな言語か
ここしばらくTIOBEのランキングで1位を取っている有名言語。でも親会社はドナドナされた。
中間コードにコンパイルされVM上で動作するので移植性が高く、Web系や組込み系、Androidなど幅広い分野で利用されている。でも親会社はドナドナされた。
そんな言語も今ではプロプライエタリの申し子であるOracleさんの持ち物となり、今後どうなっていくかは今ひとつ不透明ドナ。
・長所
実行速度はCに及ばないもののスクリプト言語よりは数十倍速い。ガベージコレクション付き言語の中では最速クラス。
下位互換とクロスプラットフォームが割としっかりしているので、一度コードを書けばそれが広い範囲で長期間利用できる。Java1.4で書かれたライブラリが今でも普通にJava6から呼ばれていたりするみたいな。
・短所
VMを立ち上げるのに時間がかかるので、一瞬で終わる軽い処理を実行する場合はどの言語よりももっさりした動きになる。
名前空間とか、型の宣言とか、かなり厳密にやらないといけない。ダックタイピングなんてお行儀の悪いこともできない。ちゃんとインターフェース書きなさい、とな。
バグを防ぐという意味では厳密さはありがたくもあるけど、コード量は多くなるしディレクトリ構造は複雑になるので、コードを書く時はIDEがないとやってられない。
paraword
list
  [Android/Android, 組/くみ+込み/こみv+系/けい, Web/Web+系/けい]
to root
  [分野/ぶんや, 利用/りよう]
to reaf
  []
list
  [クロスプラットフォーム/クロスプラットフォーム, 下位/かい+互換/ごかん]
to root
  [する/する, 利用/りよう]
to reaf
  []
list
宣言/せんげん:型/かた?型/けい
名前/なまえ+空間/くうかん:
to root
  [やる/やる]
to reaf
  []
description : 名前/なまえ+空間/くうかん
	 : もっと良い名前はなかったのだろうか。
clueword:
間, 前, 普通, 時間, 軽い, どんな, らく, 透明, 場合, そ, 今後, 複雑, 広い, 長期, 位, ない, 悪い, 時, 幅広い, 後, どの, そんな, 中, どう, いけない, 期間, 通, 上, 有名
image : 0.739306704579
table : 1.26128053084
graph : 0.354610262536
flow : 0.544097032654

In Section 16, Score:2.616326
Flag：：0100
7.Objective－Cとは
・どんな言語か
名前の通り、Cにオブジェクト指向を組み込んだ言語。まさかこの言語が人気言語を扱う記事の中に登場するようになるとは、数年前までは予想もしていなかった。すいません、D言語より来ないだろうなんて思ってました。
スティーブ・ジョブズがMacに戻る前あたりから使っているお気に入りの言語。人気が出た理由はひとえにiPhone。iPhoneアプリを作るにはObjective－Cを使う必要があったことから利用者が急増していつの間にやらTOP10に入るような言語になっていた。
なぜC＋＋じゃなくObjective－Cなのか。それはジョブズにしか分からない。
・長所
Cと互換性があるので、Cが使えるならObjective－Cを学習するのは割と簡単。もちろん実行速度も十分に高速。iPhoneのようなCPUを使い過ぎると電池的に困るような端末はこういう言語が向いてるのかもしれない。
最近のObjective－Cはガベージコレクションも付いてるらしい（今知った）。何かと進歩してるのだなぁ。
・短所
使いこなすにはCを知らないといけない。ということはC＋＋と同じく、学習コストはスクリプト言語とは比べものにならないくらい高くなる。記述するコードの量ももちろん多くなる。
Apple以外の機器で利用されるケースはけして多くないので、もしAppleが「Objective－C、やめました」と言ったら一気にマイナー言語に逆戻りすることも考えられる。
paraword
list
  [C/C, 互換/ごかん+性/せい]
to root
  [有る/ある, 簡単だ/かんたんだ]
to reaf
  []
description : C/C
	 : Cと互換性があるので、Cが使えるならObjective－Cを学習するのは割と簡単。
description : C/C
	 : Cと互換性があるので、Cが使えるならObjective－Cを学習するのは割と簡単。
description : こと/こと
	 : ということはC＋＋と同じく、学習コストはスクリプト言語とは比べものにならないくらい高くなる。
description : C/C
	 : CやC＋＋ほどではないけどJavaよりも難易度高め。
clueword:
簡単, 十分, 間, この, こう, 前, どんな, そ, らしい, くらい, なか, ない, 同じ, 必要, 中, 一気, 逆, いけない, 通, 通り, よう, こういう
image : 0.757418967772
table : 0.863127897604
graph : 0.30213485145
flow : 0.693644774313

In Section 1, Score:2.527678
Flag：：0000
前書き
この世にはたくさんのプログラミング言語が存在します。Wikiepdiaのプログラミング言語一覧を見ると、実に200個以上というわけの分からない数の言語が並んでいたりします。
200の中にはほとんど使われてない言語も混じってるので、実際に仕事でざくざく使われている言語は20とか30とかそういうオーダーなのですが、それでも1人の人間が把握するにはちょっと多過ぎる数です。
本記事では、そうした有り余るプログラミング言語の海の中で「どれを勉強したらいいの？」とか「どれを採用するのが適切？」という悩みをお持ちの方が「よし、この言語に決めた！」と自信を持って決断できるように背中を押すことを目的として書かれました。
無責任に背中をドンと押すことが目的なので、これを読めば正しい判断ができるかという点についてはノーコメントとさせていただきます。使ってみないと過ちには気付けないものさ。
0－2.人気TOP10言語の条件
paraword
list
20/20:
30/30:
オーダー/おーだー:そういう/そういう
to root
  [数/すう?数/かず]
to reaf
  [200/200, 殆んど/ほとんど, 使う/つかう, 中/なか, 言語/げんご, 実際/じっさい, 仕事/しごと, ざくざく/ざくざく, 使う/つかう, 混じる/まじる, 言語/げんご]
clueword:
方, 間, この, 以上, 前, いい, そうした, そ, たくさん, そう, ない, 中, 際, 正しい, 上, よう, 適切
image : 0.646828348934
table : 1.01417618858
graph : 0.345270287442
flow : 0.521402959968

In Section 12, Score:2.482344
Flag：：0100
5.Pythonとは
・どんな言語か
彼の名はPython（ニシキヘビ）。ライバル言語はPerl（改名前はPearl＝真珠だった）とRuby（ルビー）。もっと良い名前はなかったのだろうか。
インデントを使ったブロックの表現と、プログラマがselfという文字をタイプする能力を格段に向上させる言語仕様が特徴的。
とてもお行儀が良い言語。PerlやRubyがTMTOWTDI（それをやる方法は幾通りも存在する）な言語であるのに対して、Pythonはやり方を1つだけ用意するようにしているところとかがお上品に見える。
・長所
簡潔で見やすいコードを書きやすい。書きあがったコードを見ると、なんというかどの言語よりもあっさりしているように感じる。
NumPyとか数学系のライブラリがけっこう充実している。MATLABの代わりに使う人もいるとか。
あとGoogleと仲良しで（Pythonの神様はGoogleで働いている）、GAEでも利用できたりする。
・短所
実行速度はやはりスクリプト言語らしい速度。
日本ではPythonを使った仕事に出くわすことはあまり多くない。Webフレームワークはいくつか存在するけど、Web系の仕事で見かけることもあまりない。
参考図書を選ぶ時にリアルなニシキヘビの絵を目にしないといけなかったり、利用している時にあまりかわいくない蛇のアイコンを目にしないといけなかったりすることがあるので、蛇嫌いな人は手を出しづらい言語。
paraword
list
能力/のうりょく:self/self,言う/いう,プログラマ/プログラマ,文字/もじ,タイプ/たいぷ
表現/ひょうげん:インデント/インデント,使う/つかう,ブロック/ぶろっく
to root
  [向上/こうじょう, 言語/げんご+仕様/しよう, 特徴/とくちょう+的だ/てきだ]
to reaf
  []
list
  [Ruby/Ruby, Perl/Perl]
to root
  [言語/げんご, 用意/ようい, ところ/ところ, 見える/みえる]
to reaf
  []
list
用意/ようい:Python/Python,やり/やりv+方/かた,1/1+つ/つ
言語/げんご:Perl/Perl,それ/それ,やる/やる,TMTOWTDI/TMTOWTDI,方法/ほうほう,幾/いく+通り/とおり,Ruby/Ruby,存在/そんざい
to root
  [ところ/ところ, 見える/みえる]
to reaf
  []
list
  [NumPy/NumPy, 数学/すうがく+系/けい]
to root
  [ライブラリー/らいぶらりー, 充実/じゅうじつ]
to reaf
  []
list
  [Google/Google, 仲良し/なかよし]
to root
  [利用/りよう]
to reaf
  []
description : 名前/なまえ+空間/くうかん
	 : もっと良い名前はなかったのだろうか。
description : Python/Python
	 : PerlやRubyがTMTOWTDI（それをやる方法は幾通りも存在する）な言語であるのに対して、Pythonはやり方を1つだけ用意するようにしているところとかがお上品に見える。
description : Perl/Perl
	 : PerlやRubyがTMTOWTDI（それをやる方法は幾通りも存在する）な言語であるのに対して、Pythonはやり方を1つだけ用意するようにしているところとかがお上品に見える。
description : Perl/Perl
	 : PerlやRubyがTMTOWTDI（それをやる方法は幾通りも存在する）な言語であるのに対して、Pythonはやり方を1つだけ用意するようにしているところとかがお上品に見える。
description : NumPy/NumPy
	 : NumPyとか数学系のライブラリがけっこう充実している。
description : NumPy/NumPy
	 : NumPyとか数学系のライブラリがけっこう充実している。
description : こと/こと
	 : 日本ではPythonを使った仕事に出くわすことはあまり多くない。
description : 言語/げんご
	 : あなたがApple信者であれば、他の言語には目も向けずObjective－Cを学びなさい。
description : 言語/げんご
	 : 言語の硬度を測定すると、Javaは硬度8くらい、Pythonは6くらいになるのに対して、Rubyは3くらいになる。
description : Ruby/Ruby
	 : 言語の硬度を測定すると、Javaは硬度8くらい、Pythonは6くらいになるのに対して、Rubyは3くらいになる。
description : 言語/げんご
	 : 言語のイメージはここを見ればだいたい分かってもらえると思う。
description : Ruby/Ruby
	 : Rubyを使っている人の中で、実行速度がもう少し速くならんものかなぁと思っている人は、今日からでもScalaを始めた方がいい。
clueword:
あまり, 方, 良い, 向上, こう, ころ, 前, どんな, そ, らしい, なか, ない, 嫌い, 代わり, 時, 上品, どの, 様, 通, 通り, 上, ところ, なんという, よう
image : 0.564187478277
table : 1.36515037524
graph : 0.373312959057
flow : 0.179693379174

In Section 13, Score:2.450279
Flag：：0000
・誰が学ぶべきか
プログラミング言語は、ヘビー級（C＋＋やJava）とライト級（PythonやRuby）を1つずつ覚えておくと、その場に応じて使い分けられるので何かと便利。
ライト級の言語を1つも習得してなくてどれにしようか迷っているなら、Pythonは1つの選択肢になる。
既にライト級の言語を覚えているなら、無理にPythonに手を出す必要はあまりないかもしれない。
paraword
list
Java/Java:ヘビー/ヘビー
Ruby/Ruby:ライト/らいと,Python/Python
C/C:
to root
  [覚える/おぼえる, 使い分ける/つかいわける, 便利だ/べんりだ]
to reaf
  [ヘビー/ヘビー]
list
  [Python/Python, Ruby/Ruby]
to root
  [覚える/おぼえる, 使い分ける/つかいわける, 便利だ/べんりだ]
to reaf
  [ヘビー/ヘビー, C/C, Java/Java, ライト/らいと]
description : Python/Python
	 : ライト級の言語を1つも習得してなくてどれにしようか迷っているなら、Pythonは1つの選択肢になる。
description : Python/Python
	 : ライト級の言語を1つも習得してなくてどれにしようか迷っているなら、Pythonは1つの選択肢になる。
description : C/C
	 : CをインクリメントするとC＋＋になる。
description : C/C
	 : C＋＋をさらにインクリメントするとC＃になる。
description : C/C
	 : という名前の見た目からCに近い系統なのかと誤解してしまいそうだけど、実際のC＃はJavaのコピー。
description : Java/Java
	 : Javaよりも後出しの言語である分、クロージャとか型推論とか、Javaにはない便利な機能もちらほら付いている。
description : Java/Java
	 : Javaに似た言語ということで、記述するコードの量は軽量言語と比べると多め。
description : C/C
	 : Cと互換性があるので、Cが使えるならObjective－Cを学習するのは割と簡単。
description : Python/Python
	 : つまりCがトンプソンM1で、PythonはベレッタM92くらいということだ。
description : Python/Python
	 : Pythonを学ぶか、Perlを学ぶか、Rubyを学ぶか、と考えた時に、日本人だしRubyに一番親近感が湧くなと思ったら手を出すと良いかも。
description : Python/Python
	 : 言語の硬度を測定すると、Javaは硬度8くらい、Pythonは6くらいになるのに対して、Rubyは3くらいになる。
description : Java/Java
	 : 言語の硬度を測定すると、Javaは硬度8くらい、Pythonは6くらいになるのに対して、Rubyは3くらいになる。
description : Ruby/Ruby
	 : 言語の硬度を測定すると、Javaは硬度8くらい、Pythonは6くらいになるのに対して、Rubyは3くらいになる。
description : Ruby/Ruby
	 : 言語の硬度を測定すると、Javaは硬度8くらい、Pythonは6くらいになるのに対して、Rubyは3くらいになる。
description : Java/Java
	 : Java並の実行速度とRuby並の書きやすさが合わさり最強に見える。
description : Java/Java
	 : Javaの資産が使い放題で、Erlangのような並列処理まで合わせ持つのでもう手に負えない。
description : C/C
	 : CやC＋＋ほどではないけどJavaよりも難易度高め。
description : Java/Java
	 : Javaを使っている人は、老若男女問わず今日からでもScalaを始めた方がいい。
description : Ruby/Ruby
	 : Rubyを使っている人の中で、実行速度がもう少し速くならんものかなぁと思っている人は、今日からでもScalaを始めた方がいい。
description : Ruby/Ruby
	 : Rubyを使っている人の中で、実行速度がもう少し速くならんものかなぁと思っている人は、今日からでもScalaを始めた方がいい。
description : Python/Python
	 : Pythonを使っている人は、Pythonの神様が微妙と言っていたようにちょっと言語の方向性が違うので、興味があるなら使ってみるくらいのスタンスで。
clueword:
あまり, 無理, 便利, そ, その, ない, 必要, よう
image : 0.602666688871
table : 1.33158393575
graph : 0.111504053676
flow : 0.404524058963

In Section 25, Score:2.363532
Flag：：0000
・誰が学ぶべきか
初心者がいきなり手を出すのは少し難しいかもしれない。まずはJavaかRubyに手を出し、その後Scalaにとりかかるのが良いと思われる。
Javaを使っている人は、老若男女問わず今日からでもScalaを始めた方がいい。
Rubyを使っている人の中で、実行速度がもう少し速くならんものかなぁと思っている人は、今日からでもScalaを始めた方がいい。
Pythonを使っている人は、Pythonの神様が微妙と言っていたようにちょっと言語の方向性が違うので、興味があるなら使ってみるくらいのスタンスで。
paraword
description : Java/Java
	 : Javaを使っている人は、老若男女問わず今日からでもScalaを始めた方がいい。
description : Ruby/Ruby
	 : Rubyを使っている人の中で、実行速度がもう少し速くならんものかなぁと思っている人は、今日からでもScalaを始めた方がいい。
description : Python/Python
	 : Pythonを使っている人は、Pythonの神様が微妙と言っていたようにちょっと言語の方向性が違うので、興味があるなら使ってみるくらいのスタンスで。
clueword:
方, 良い, その後, いい, そ, くらい, その, ない, 難しい, 後, 中, 様, 微妙, 今日, よう, たよう
image : 0.70808359138
table : 0.816621849601
graph : 0.254608991791
flow : 0.584217438137

In Section 6, Score:2.242387
Flag：：0100
2.C言語とは
・どんな言語か
世の中はCでできている。WindowsだってLinuxだってアメンボだって、みんなみんなCでできている。
プログラミング言語だってCでできている。PythonだってRubyだってオケラだって、みんなCでできている友達なんだ。
というように世の中の基板になるところを支えている言語。
・長所
有名な高級（？）言語の中では最速の実行速度を誇る。なのでスクリプト言語を利用している時に速度が出なくて困ったら、その部分をちょろっとCで書き直すと平気で100倍速になったりすることもある。
何十年も使われてきた歴史ある言語なので、周りにはCで書かれたいろんな資産がある。学習する時に参考になる良いソースを探すのも楽。参考図書にも困らない。
・短所
ガベージコレクションがないのでメモリ管理を忘れた世代には使いづらい言語。コード量も軽量な言語と比べるとかなり多くなる。
自分で何かソフトを作ることになったとして、ピュアなCでガリガリ書くというシチュエーションはあまり思い浮かばない。C＋＋を使うような気がする。
あと移植性が低い。たとえばLinuxで動いているコードをWindowsで動かそうと思ったら、いろいろ書き換えないといけないところが出てくる。＃ifdefWindowsみたいな。
paraword
description : Python/Python
	 : PythonだってRubyだってオケラだって、みんなCでできている友達なんだ。
description : C/C
	 : C＋＋を使うような気がする。
clueword:
あまり, 良い, ころ, どんな, 楽, そ, いろいろ, そう, その, ない, 時, 中, 低い, いけない, ところ, 高級, 有名, よう
image : 0.705604148066
table : 0.868285759135
graph : 0.279407578723
flow : 0.389089728645

In Section 20, Score:2.138028
Flag：：0100
9.Rubyとは
・どんな言語か
純粋オブジェクト指向でメタプロでPerlとLispが結婚して隔世遺伝が黒魔術で生まれた言語。
主な出産地は島根県の県庁所在地、松江市。小学校の頃に全県の県庁所在地を覚えるように言われた時、どうしても覚えられなかった松江市。
・長所
楽しくプログラミングができることを意識しているそうで、あまりプログラマを束縛するようなことはしない開放感溢れる言語仕様になっている。
作者が日本人なので、言語仕様に関するメーリングリストの議論も普通に日本語で行われている。日本人にはその辺が取っつきやすい。
Railsがけっこう便利。
・短所
実行速度はスクリプト言語らしい速度。
endendend．．．
行儀の悪い書き方をしてもあまり怒られない。ので、大人数で開発した時に「わるいプログラマLV26」が混ざっていると混沌としやすい。目の届く範囲の少人数チームで使うのが正しい利用法なんじゃないだろうか。
paraword
list
  [県庁/けんちょう+所在/しょざい+地/ち, 松江/まつえ+市/し]
to root
  []
to reaf
  [主だ/おもだ, 出産/しゅっさん+地/ち, 島根/しまね+県/けん]
description : こと/こと
	 : 楽しくプログラミングができることを意識しているそうで、あまりプログラマを束縛するようなことはしない開放感溢れる言語仕様になっている。
clueword:
あまり, 方, こう, 普通, どんな, 純粋, るい, 楽, 頃, 便利, そ, らしい, そう, その, なか, ない, 悪い, 時, どう, 様, どうして, 正しい, 主, 通, よう
image : 0.740751283806
table : 0.812125254053
graph : 0.215863979465
flow : 0.369287748447

In Section 11, Score:1.997028
Flag：：0000
・誰が学ぶべきか
これからプログラムを学びたいという人で、Web系を考えている人はとりあえずPHPから始めると手っ取り早いかもしれない（もちろんその前にHTMLは覚えておく必要はある）。
逆にWeb系以外（データ処理、GUIプログラム等）に手を出したいと思っている人にとっては、検討する必要がまったくない言語である。
既にいくつか言語を学んだことがある人なら学習にそれほど手間取ることはないはずなので、必要になった時に学ぶくらいのスタンスで良いかもしれない。
paraword
list
  [GUI/GUI+プログラム/ぷろぐらむ, データ/でーた+処理/しょり]
to root
  [出す/だす, 思う/おもう, 人/じん?人/ひと, 取る/とる?執る/とる?捕る/とる?採る/とる?摂る/とる?撮る/とる?盗る/とる, 言語/げんご]
to reaf
  []
description : これ/これ
	 : これからプログラムを学びたいという人で、Web系を考えている人はとりあえずPHPから始めると手っ取り早いかもしれない（もちろんその前にHTMLは覚えておく必要はある）。
clueword:
良い, 間, 前, そ, くらい, その, ない, 早い, 時, 必要, 逆, ほど
image : 0.693456063689
table : 0.605299369108
graph : 0.247651663405
flow : 0.450620471883

In Section 7, Score:1.907463
Flag：：0000
・誰が学ぶべきか
軽い言語だと勝手に裏側でやってくれるようなメモリの確保とかファイルポインタの操作なんかも、Cでは自分で意識して書かないといけない。ので、一度触れておくとプログラムが裏側で何をしているかが意識できて良いかもしれない。
OSや言語の細かい挙動を追いたいという願望が生まれた時に（たとえばPHPのネットワーク関連の機能について、実際にこれは裏では何をしてるんだ、ということが知りたくなった時とか）、Cが読めると割とあっさり答えに辿りつけたりもする。
ガリガリ書けるようになる必要があるかは別として、とりあえず知っておいて損はない言語。
paraword
list
操作/そうさ:ファイル/ふぁいる+ポインター/ポインター
確保/かくほ:メモリー/めもりー
to root
  [書く/かく]
to reaf
  [裏/うら?裏/り, やる/やる]
list
  [言語/げんご, OS/OS]
to root
  [細かい/こまかい, 挙動/きょどう, 追う/おう, 言う/いう, 願望/がんぼう, 生まれる/うまれる, 時/とき, 読める/よめる, 辿り着ける/たどりつける]
to reaf
  []
description : C/C
	 : 軽い言語だと勝手に裏側でやってくれるようなメモリの確保とかファイルポインタの操作なんかも、Cでは自分で意識して書かないといけない。
description : OS/OS
	 : OSや言語の細かい挙動を追いたいという願望が生まれた時に（たとえばPHPのネットワーク関連の機能について、実際にこれは裏では何をしてるんだ、ということが知りたくなった時とか）、Cが読めると割とあっさり答えに辿りつけたりもする。
description : OS/OS
	 : OSや言語の細かい挙動を追いたいという願望が生まれた時に（たとえばPHPのネットワーク関連の機能について、実際にこれは裏では何をしてるんだ、ということが知りたくなった時とか）、Cが読めると割とあっさり答えに辿りつけたりもする。
description : 確保/かくほ
	 : そう簡単にMSが転ぶとは思わないけど、例えばモバイル分野辺りで居場所が確保できるかは少し不透明。
description : 言語/げんご
	 : あなたがApple信者であれば、他の言語には目も向けずObjective－Cを学びなさい。
description : 言語/げんご
	 : 言語の硬度を測定すると、Javaは硬度8くらい、Pythonは6くらいになるのに対して、Rubyは3くらいになる。
description : 言語/げんご
	 : 言語のイメージはここを見ればだいたい分かってもらえると思う。
clueword:
細かい, 良い, 別, 軽い, 細か, ない, 時, 必要, 際, いけない, 勝手, 損, よう
image : 0.604628834433
table : 0.679355788288
graph : 0.161349022797
flow : 0.462129819539

In Section 24, Score:1.861352
Flag：：0100
番外．Scalaとは
・どんな言語か
最近私がハマっている関数型オブジェクト指向言語。コンパイルされるとJavaと同じclassファイルに変換され、JVM上で動作する。
言語のイメージはここを見ればだいたい分かってもらえると思う。
（urls）
・長所
Java並の実行速度とRuby並の書きやすさが合わさり最強に見える。Javaの資産が使い放題で、Erlangのような並列処理まで合わせ持つのでもう手に負えない。
コードの量もその辺のスクリプト言語並に短くて済む。
・短所
覚えるのにけっこう時間がかかる。CやC＋＋ほどではないけどJavaよりも難易度高め。
paraword
list
実行/じっこう+速度/そくど:Java/Java+並み/なみ
書く/かく+さ/さ:Ruby/Ruby+並み/なみ
to root
  [合わさる/あわさる, 見える/みえる]
to reaf
  []
list
  [C/C, C/C]
to root
  [難易/なんい+度/たび?度/ど+高/こう?高/たか]
to reaf
  []
description : 言語/げんご
	 : 言語のイメージはここを見ればだいたい分かってもらえると思う。
description : Java/Java
	 : Java並の実行速度とRuby並の書きやすさが合わさり最強に見える。
description : Java/Java
	 : Javaの資産が使い放題で、Erlangのような並列処理まで合わせ持つのでもう手に負えない。
description : C/C
	 : CやC＋＋ほどではないけどJavaよりも難易度高め。
description : C/C
	 : CやC＋＋ほどではないけどJavaよりも難易度高め。
description : C/C
	 : CやC＋＋ほどではないけどJavaよりも難易度高め。
clueword:
間, こう, 時間, どんな, そ, その, ない, 時, 同じ, 上, ほど, よう
image : 0.616249789111
table : 0.69837547134
graph : 0.145610847079
flow : 0.401115521388

In Section 5, Score:1.818660
Flag：：0000
・誰が学ぶべきか
最近だと話題のHadoopとかCassandraとかがJavaで書かれている。その辺りのソフトと親しくなりたい場合は覚えておくと良いかもしれない。
あとは企業で利用されているケースが目立つので、覚えておけば仕事を得る手助けになる。
けど、言語としてはだいぶ古いし、なんとか0xほどではないにしても新しいバージョンの仕様がなかなか決まらないし（クロージャ入れると言い始めてはや何年？）、モダンなものを求めてしまう人には向かないかもしれない。
paraword
list
  [Cassandra/Cassandra, Hadoop/Hadoop]
to root
  [書く/かく]
to reaf
  [話題/わだい]
list
何/なん+年/ねん:や/やa
もの/もの:モダンだ/もだんだ
to root
  [求める/もとめる, 人/じん?人/ひと, 向く/むく]
to reaf
  []
clueword:
良い, 古い, 場合, そ, その, なか, ない, 様, 新しい, ほど
image : 0.653185059081
table : 0.714667564932
graph : 0.091095890411
flow : 0.359711380974

In Section 18, Score:1.541029
Flag：：0100
8.Perlとは
・どんな言語か
古くからCで書くほどでもないことをさらっと書きたい時に愛用されてきた歴史ある言語。銃器で言えばコルト・ガバメントみたいなものだと言えば分りやすいのではないだろうか。つまりCがトンプソンM1で、PythonはベレッタM92くらいということだ。
十分に手に馴染んでいる銃器をあえて手放すほどの理由をベレッタに感じなければ、コルトを使い続けるのも良いのではないだろうか。
・長所
長く使われてきた分、いろんなモジュールが揃っている。あと、たいていの環境に入っているので、客先のサーバで作業をしないといけない時とかにも役に立つことがある。
LearningPerlは読み物としても面白い。あとラクダの絵がかわいい。
・短所
実行速度はスクリプト言語らしい速度。
用途的にPythonやRubyと被るので、今あえてPerlを取る理由というのが個人的には思い浮かばない。生粋のPerl使いならきっと流暢な解答を用意してくれると思う。
paraword
list
モジュール/もじゅーる:いろんな/いろんな
分/ぶん:長い/ながい,使う/つかう
to root
  [揃う/そろう]
to reaf
  []
list
  [Ruby/Ruby, Python/Python]
to root
  [被る/かぶる?被る/こうむる, 思い浮かぶ/おもいうかぶ]
to reaf
  []
description : Python/Python
	 : つまりCがトンプソンM1で、PythonはベレッタM92くらいということだ。
description : Python/Python
	 : Pythonを学ぶか、Perlを学ぶか、Rubyを学ぶか、と考えた時に、日本人だしRubyに一番親近感が湧くなと思ったら手を出すと良いかも。
description : Python/Python
	 : 言語の硬度を測定すると、Javaは硬度8くらい、Pythonは6くらいになるのに対して、Rubyは3くらいになる。
description : Ruby/Ruby
	 : 言語の硬度を測定すると、Javaは硬度8くらい、Pythonは6くらいになるのに対して、Rubyは3くらいになる。
description : Ruby/Ruby
	 : Rubyを使っている人の中で、実行速度がもう少し速くならんものかなぁと思っている人は、今日からでもScalaを始めた方がいい。
description : Python/Python
	 : Pythonを使っている人は、Pythonの神様が微妙と言っていたようにちょっと言語の方向性が違うので、興味があるなら使ってみるくらいのスタンスで。
clueword:
十分, 良い, どんな, 白い, いい, 面白い, らしい, くらい, ない, 時, どの, さら, いけない, ほど
image : 0.511262888067
table : 0.728450943971
graph : 0.118213586805
flow : 0.183101916749

In Section 9, Score:1.524978
Flag：：0000
・誰が学ぶべきか
間違っても「ちょっとプログラムというのを学んでみたい。C＋＋ってかっこよさそう」なんていう気持ちで手をつけてはいけない。「ちょっと登山を経験してみよっかな」と言ってチョモランマに登るようなものである。悪いことは言わないので高尾山（PHPとかJavaScript）あたりから初めておこう。
速くて省メモリな○○ライブラリというような触れ込みで公開されるライブラリはC＋＋で書かれていることが多い。たとえば去年（2010年）Googleが公開したRE2という速くて省メモリな正規表現ライブラリはC＋＋で書かれていた。
そういう良く呼び出され、速度が求められ、書き捨てられるようなコードではない系のソフトを作りたい人は甘えたことは言わずにC＋＋に手を出すのが良いかもしれない。
paraword
list
  [JavaScript/JavaScript, PHP/PHP]
to root
  [初める/初める]
to reaf
  [高尾/たかお+山/さん?山/やま]
description : こと/こと
	 : 悪いことは言わないので高尾山（PHPとかJavaScript）あたりから初めておこう。
description : こと/こと
	 : そういう良く呼び出され、速度が求められ、書き捨てられるようなコードではない系のソフトを作りたい人は甘えたことは言わずにC＋＋に手を出すのが良いかもしれない。
description : PHP/PHP
	 : JavaやRubyがWebアプリでも使える汎用的な言語なのに対して、PHPはその名の通りWebアプリで使うことを目的として作られた男らしい言語。
description : PHP/PHP
	 : PHPしか使えないプログラマはPHPerと呼ばれて迫害される決まりになっている。
description : JavaScript/JavaScript
	 : ブラウザの世界はどこの国土にも属さない紛争地域になっているので、そこで生息するJavaScriptは周囲からのいろんな要求を受け入れてファットになるか、何も受け入れずに「勝手にしろ」と開き直るかのどちらかを選択する必要があった。
description : JavaScript/JavaScript
	 : JavaScriptは軽量な言語だけど意外と何でもできる。
clueword:
良い, 間, こう, そ, 多い, そう, ない, 悪い, いけない, よう
image : 0.569209563134
table : 0.577907075908
graph : 0.145579078456
flow : 0.232282244618

In Section 19, Score:1.462329
Flag：：0000
・誰が学ぶべきか
職場で昔のPerlのソースをメンテする必要に迫られるというシチュエーションはけっこうあるので、さらっと読める程度は学んでおいた方が良いかもしれない。
これから学ぶのであれば、まずどのバージョンを学ぶのかから考える必要がある。新しくPerl6（RakudoStar）が用意されつつあるけど、Perl5と比べるとだいぶ違う言語になっている。
レガシーなPerlを触る必要性を意識して学ぶならPerl5を、新しいPerlってどんなものだろうと探究心から学ぶならPerl6を手にとれば良いんじゃないだろうか。
paraword
description : これ/これ
	 : これから学ぶのであれば、まずどのバージョンを学ぶのかから考える必要がある。
clueword:
方, 良い, こう, どんな, ない, 必要, どの, さら, 程度, 新しい
image : 0.478308839608
table : 0.496230256819
graph : 0.184076295524
flow : 0.303713977955

In Section 15, Score:1.204639
Flag：：0000
・誰が学ぶべきか
MSシンパな人、Windowsが大好きな人は、C＃を学ぶことが義務付けられている。
逆にMSを敵だと認識している人は、どんなことがあっても使ってはいけない。
Windowsで動くGUIアプリを作りたい場合は、C＃から始めるのもアリなんじゃないかと思う。
paraword
list
人/じん?人/ひと:Windows/Windows,大好きだ/だいすきだ
人/じん?人/ひと:MS/MS+シンパ/しんぱ
to root
  [学ぶ/まなぶ, こと/こと, 義務付ける/ぎむづける]
to reaf
  []
clueword:
どんな, 好き, 場合, ない, 逆, いけない
image : 0.402132457698
table : 0.57820234021
graph : 0.077397260274
flow : 0.146906493928

In Section 23, Score:1.113936
Flag：：0000
・誰が学ぶべきか
Web業界で生きていくなら知っていないといけない言語。Webじゃない世界で生きていくなら知っていても役立つことが少ない言語。
手軽にGUIでグリグリするものが書きたい、と思った時に実はJavaScriptを学ぶのが一番近道なんじゃないかと思ったりすることもある。できることに制限はあるけど短時間で動くものが作れる。レトロゲームを再現する程度のアニメーションもできる。
paraword
clueword:
間, 時間, 少ない, ない, 時, 程度, いけない
image : 0.356107240779
table : 0.439889650009
graph : 0.154639489669
flow : 0.163299936551

In Section 21, Score:0.569805
Flag：：0000
・誰が学ぶべきか
Pythonを学ぶか、Perlを学ぶか、Rubyを学ぶか、と考えた時に、日本人だしRubyに一番親近感が湧くなと思ったら手を出すと良いかも。
Rails系の仕事はポツポツあるので、周囲で最近そういう案件見かけるなぁと感じた人は学んでおくと仕事の足しになるかも。
言語の硬度を測定すると、Javaは硬度8くらい、Pythonは6くらいになるのに対して、Rubyは3くらいになる。柔らかい手触りが好きだなと思う人はRubyを学ぶといいかも。
paraword
description : Python/Python
	 : Pythonを学ぶか、Perlを学ぶか、Rubyを学ぶか、と考えた時に、日本人だしRubyに一番親近感が湧くなと思ったら手を出すと良いかも。
description : Python/Python
	 : 言語の硬度を測定すると、Javaは硬度8くらい、Pythonは6くらいになるのに対して、Rubyは3くらいになる。
description : 言語/げんご
	 : 言語の硬度を測定すると、Javaは硬度8くらい、Pythonは6くらいになるのに対して、Rubyは3くらいになる。
description : Java/Java
	 : 言語の硬度を測定すると、Javaは硬度8くらい、Pythonは6くらいになるのに対して、Rubyは3くらいになる。
description : Ruby/Ruby
	 : 言語の硬度を測定すると、Javaは硬度8くらい、Pythonは6くらいになるのに対して、Rubyは3くらいになる。
clueword:
柔らか, 良い, 柔らかい, 好き, いい, すると, そ, そう, くらい, 時
image : 0.181173866286
table : 0.232736473156
graph : 0.0408163265306
flow : 0.115078720987

In Section 17, Score:0.269707
Flag：：0000
・誰が学ぶべきか
あなたがApple信者であれば、他の言語には目も向けずObjective－Cを学びなさい。
あなたがMS信者であれば、C＃かVBを学びなさい。
あなたがGoogle信者であれば、Pythonかgoを学びなさい。
あなたがSun信者なら．．．．．．過去は忘れて新しい企業に入信しなさい。IBMあたりはどうでしょう？
iPhoneアプリを作りたいのであれば、宗派に関係なくObjective－Cを学んでおけば良いと思われる。逆にAndroid派なら目を向けなくても良い言語。
paraword
description : 言語/げんご
	 : あなたがApple信者であれば、他の言語には目も向けずObjective－Cを学びなさい。
clueword:
良い, 他の, どう, 逆, 新しい, 他
image : 0.133291332951
table : 0.0313962260154
graph : 0.0227272727273
flow : 0.082291835741

In Section 2, Score:0.086286
Flag：：0100
2011年1月度のTIOBEのランキング上位10言語を基本とし、そこから7位のVBを排除して11位のJavaScriptを格上げしています。
paraword
clueword:
そ, 位, 上
image : 0.00595238095238
table : 0.0803340711714
graph : 0.0
flow : 0.0

In Section 15, Score:2.274564
Flag：：0000
アジャイルプロセスでは、プロジェクトの早い段階から「動くコード」を作成します。当然、機能はまったく足りないかもしれませんが、実装したところまでは動かすことができるコードになっているはずです。また、小さく作りこんでいくプロセスなので、サイクルごとにかじ取りの判断ができ、顧客からの要望が取り入れやすいのが特徴です。アジャイルプロセスの基本スタンスは、変化を受け入れることで、要求の変更が前提に考えられています。
ProjectKeeper／SalesForceAutomation＋の開発プロセス
最初のバージョンの開発が始まってから約4年がたちましたが、当初はメンバー約2名で立ち上げました。自社製のWebシステム構築用のフレームワークがあったことや、受託開発でさまざまなシステムを構築した経験があったメンバーであったため2名で約6ヶ月の期間で開発を行うことはできました。
当初はパッケージ開発におけるノウハウはほとんどなかったため、受託開発時に当時よく使っていたウォーターフォール手法を必然的に採用しました。
しかし、パッケージ製品の開発においては延々と開発を継続していかなければならず、受託開発のように納品することで、開発が完了するわけではありません。製品は日々進化する必要があり、顧客からのフィードバックをスムーズに製品に取り入れていかなければ、製品の魅力を維持することができません。
仕様変更、機能拡張がたびたび発生していく状況では、各機能間の整合性や品質を維持することが困難になり、開発プロセスをより仕様変更に強いアジャイル開発手法へスイッチすることで、柔軟な仕様変更、スピーディーな製品リリースを行うことができるようになりました。
昨今では多種多様なシステムが身の回りに存在しています。さまざまなシステムを目にし、操作することで、古いシステムの操作性や機能へ不満を抱く機会も多くなるでしょう。このような顧客を常に満足させるためには、システムは常に進化していかなければならず、おのずと今後の開発手法の主流はアジャイルへと進んでいくのではないでしょうか？
paraword
list
こと/こと:自社/じしゃ+製/せい,Web/Web+システム/しすてむ+構築/こうちく+用/よう,フレームワーク/フレームワーク,有る/ある?会う/あう?合う/あう
メンバー/めんばー:様々だ/さまざまだ,受託/じゅたく+開発/かいはつ,システム/しすてむ,構築/こうちく,経験/けいけん,有る/ある?会う/あう?合う/あう
to root
  [為/ため, 行う/おこなう]
to reaf
  []
list
  [機能/きのう+拡張/かくちょう, 仕様/しよう+変更/へんこう]
to root
  [スイッチ/すいっち, こと/こと, 行う/おこなう]
to reaf
  []
list
  [品質/ひんしつ, 整合/せいごう+性/せい]
to root
  [維持/いじ, こと/こと, 困難だ/こんなんだ, スイッチ/すいっち, こと/こと, 行う/おこなう]
to reaf
  [各/かく+機能/きのう]
list
仕様/しよう+変更/へんこう:柔軟だ/じゅうなんだ
製品/せいひん+リリース/りりーす:スピーディーだ/すぴーでぃーだ
to root
  [行う/おこなう]
to reaf
  []
list
  [機能/きのう, 操作/そうさ+性/せい]
to root
  [抱く/いだく?抱く/だく, 機会/きかい, 多い/おおい]
to reaf
  [古い/ふるい, システム/しすてむ]
clueword:
基, 上, 足, 発, 今, 前, たこ, 持, 変化, 当時, ため, 古い, 経験, 魅力, 状, 発生, 身の回り, このような, 判, 機能, 機, 早い, 時, スピーディ, 主流, 満足, メンバー, 最初, バージョン, 製品, 名, 変, 会, 客, 状況, 間, て, 完, 期, 常, 日々, コード, 月, 機会, 拡張, いく, いま, さまざま, 顧客, した, ず, なら, なか, ない, 動, 必要, 後, 強, ど, 身, はず, な, 年, フレームワーク, 張, め, 進化, こと, この, ざ, 前提, 開発, ころ, 基本, 日, 手, 存在, 法, も, また, 質, しかし, 当初, 今後, 強い, 実, 段階, の, 採用, プロジェクト, 要求, い, や, 主, 期間, 当然, 変更, システム, ごと, 目, 特徴, よう, では, さま, 判断, うか, 完了, 力, プロセス, 仕様, 多く, たび, 生, から, 回, スタンス, 操作, 構築, 維持, 作成, 継続, 多様, ところ, バー, 品質, 本, 種
image : 0.789994071067
table : 0.655120363294
graph : 0.325499382276
flow : 0.503950569629

In Section 13, Score:2.208222
Flag：：0010
統計・分析における開発現場の実態
独立行政法人情報処理推進機構（IPA）の統計（出典：『ソフトウェア開発データ白書2008』）によると、実に95％以上のプロジェクトがウォーターフォール型のライフサイクルで開発されています。恐らく、ウォーターフォール型のプロセスの方が誰にでも理解しやすいこと、改修案件の場合など前回のプロセスがウォーターフォール型であったため、今回も同じプロセスを採用するという心理が働いたりすることが原因ではないかと考えられます。
次に、ユーザーの要求仕様に関して、35％以上のプロジェクトは「あいまい」であり、30％以上のプロジェクトで「ユーザー担当者の要求仕様への関与が不十分」という統計もあります。
その結果、QCDをすべて達成したと評価するプロジェクトは全体の2／3程度で、残りは品質、コスト、工期のいずれかの項目が計画通りに達成できなかったというデータもあります。このように、3つに1つのプロジェクトは、ウォーターフォールの当初の計画通りに進んでないということになります。つまり、プロジェクトの初期段階で完全な計画を立てるのは非常に難しいことが分かります。
paraword
list
曖昧/あいまいa:ユーザー/ゆーざー,要求/ようきゅう+仕様/しよう,35/35,関する/かんする,プロジェクト/ぷろじぇくと
有る/ある:30/30,ユーザー/ゆーざー+担当/たんとう+者/しゃ,要求/ようきゅう+仕様/しよう,関与/かんよ,不十分だ/ふじゅうぶんだ,言う/いう,プロジェクト/ぷろじぇくと,統計/とうけい
to root
  []
to reaf
  [次に/つぎに]
list
  [コスト/こすと, 工期/こうき, 品質/ひんしつ]
to root
  [いずれ/いずれ, 項目/こうもく, 達成/たっせい, 言う/いう, データ/でーた, 有る/ある]
to reaf
  []
clueword:
案件, 上, 発, 今, 前, 誰, ため, 場合, このように, つの, 実態, 結果, 前回, 機, 発現, 達成, すると, 程度, 完全, 型, コスト, 初期, て, 完, 期, ソフト, 常, いま, 原因, した, ず, 度, なか, ない, 理解, ど, 白, ユーザー, 通り, な, 方, 現場, め, 計画, こと, この, 開発, 書, 法, も, 体, 質, 当初, 処理, 担当, ライフ, その, 実, 段階, の, 採用, プロジェクト, 要求, い, や, 情報, ソフトウェア, 目, データ, よう, では, 十分, 分析, 人, プロセス, 次, 仕様, 分, 心, 政, そ, 回, 心理, 非常, 行政, 難しい, 今回, 理, 全体, 同じ, 品質, 独立, 項目
image : 0.78922952958
table : 0.429556738588
graph : 0.479878181679
flow : 0.509558022859

In Section 2, Score:1.874810
Flag：：0100
開発手法は単純にウォーターフォールが悪い、アジャイルは良い、というものではなく、重要なのはプロジェクトを失敗させないことにあります。どのような開発手法においても、プロジェクトには必ずリスクが存在します。プロジェクト失敗の原因の多くは以下のようなものです。
・スケジュールの欠陥―強気過ぎるスケジュールは悪。予実の乖離（かいり）を生み出す。
・要求の増大（変更）―外的要因も影響し、時間の経過と共に要求は変わっていく。
・人員の離脱―見積もりの時点で、メンバー離職の可能性は大抵考慮されていない。
・仕様の崩壊―仕様はあいまいに作れるが、製品はあいまいに作れない。
・生産性の低迷―少人数チームでは平均値のブレが大きい。能力がマイナスに振れるリスク
これらのリスクが担保できるのであれば、開発プロセスがアジャイルでもウォーターフォールであっても構いません。それぞれのメリット・デメリットを検討した上、よりプロジェクトが成功しやすい開発プロセスを選択すべきです。
paraword
clueword:
成功, 上, 発, 可能, 検討, 良, 失敗, 時, 過, 員, どの, 値, メンバー, 崩壊, 製品, 変, 少人数, 間, て, マイナス, 人数, いく, いま, リスク, 原因, した, ず, 平均, ない, 悪い, 数, 強, 生産, ど, 気, もの, な, 単純, どのような, こと, 開発, 時間, チーム, 手, 存在, 法, も, メリット, 良い, 影響, 実, 考慮, ナス, 可, の, プロジェクト, 要求, い, や, 大きい, 影, 変更, 単, よう, 外, では, 能力, 人, 選択, 力, プロセス, 離脱, 仕様, 多く, 増大, 生, そ, デメリット, 重要, マイ, 下, バー, 点, 悪
image : 0.718582755544
table : 0.368119931335
graph : 0.371625229893
flow : 0.416482287584

In Section 14, Score:1.846396
Flag：：0100
開発プロセスにより何が変わるのか
ここで、両プロセスを比較してみます。
そして、ウォーターフォールプロセスが得意とする状況とされるのは以下の通りです。
・高い可用性が求められるシステムである場合
・メンバーの開発経験が少ない場合
・要件がほとんど変わらない場合
・開発メンバーの数が多い場合
・組織的文化が秩序を重視するものである場合
対してアジャイルはその正反対の状況を得意とします。
・可用性よりも優先されるものがあるシステム
・メンバーとして開発に熟練した開発者が参加している場合
・要件が常に変化していく場合
・開発メンバーの数が少ない場合
・組織的文化がさまざまな状況に意欲を持って取り組む場合
paraword
description : アジャイル/アジャイルa+開発/かいはつ+プロセス/ぷろせす
	 : 対してアジャイルはその正反対の状況を得意とします。
description : アジャイル/アジャイルa+統一/とういつ+プロセス/ぷろせす
	 : 対してアジャイルはその正反対の状況を得意とします。
clueword:
反, 得意, 発, 持, 変化, 経験, 場合, 状, メンバー, 変, 状況, て, 少ない, 常, いく, さまざま, した, ない, 数, そして, ど, 文, 通り, もの, な, 文化, 何, め, ざ, 比較, 開発, 比, 高い, も, 参加, 組織, その, 可, の, 反対, い, システム, さま, 高, プロセス, 多い, そ, 先, 重視, 下, バー, 正
image : 0.610159587589
table : 0.764735477699
graph : 0.185268851759
flow : 0.286232262252

In Section 5, Score:1.721374
Flag：：1000
・システムのユーザーは、自分自身がどんなシステムが欲しいのかを理解しておらず、さらに、要求を明確に伝えることができない。
・仮にすべての要求を明確にすることができたとしても、そのすべてを実装に落とし込むために必要な詳細には達しない。
・仮にすべての詳細を知ることができたとしても、通常それは複雑過ぎて、人間の理解の範囲を超えている。
・仮に人間がこのすべての複雑な要求を理解できたとしても、外的要因により要件は変化する。場合によっては、以前の決定事項を覆すこともある。
paraword
clueword:
明確, 前, 通常, 変化, ため, 場合, 過, 欲しい, 変, 間, て, 常, どんな, 事項, 仮, ず, 詳細, 複雑, ない, 理解, 必要, ど, 身, ユーザー, な, め, こと, この, 自身, も, その, 実, さら, の, 要求, い, システム, 外, 自分, 人, 人間, 分, そ, 範囲, 理, 以前, 事, 決定
image : 0.708550424734
table : 0.36685596124
graph : 0.217039704401
flow : 0.428928265819

In Section 10, Score:1.577314
Flag：：0001
例えばRUPにおいては、ただやみくもにサイクルを実行するのではなく、各サイクルを「方向付け」「推敲（すいこう）」「作成」「移行」という4つのフェーズに分類し、これらのフェーズを経てリリースにいたります。各フェーズは1つ以上の反復で構成されます。このように、短いスパンで成果物をリリースし、その都度評価を行うことにより、リスクを最小化しようとしたのがRUPのアジャイルプロセスです。
paraword
list
方向付け/ほうこうづけv:
推敲/すいこう?遂行/すいこう:推敲/すいこう
移行/いこう:推敲/すいこう
作成/さくせい:推敲/すいこう
to root
  [言う/いう, 4/4+角/つの+フェーズ/フェーズ, 分類/ぶんるい, 至る/いたる]
to reaf
  []
clueword:
反, 上, 短い, このように, つの, 方向, 分類, こう, て, リスク, した, 度, な, 物, 実行, 方, パン, こと, この, 反復, も, その, 実, 類, の, 成果, い, や, 構成, よう, では, プロセス, 分, そ, 作成, 例
image : 0.602752545865
table : 0.470659900069
graph : 0.15433723112
flow : 0.349564514085

In Section 12, Score:1.553230
Flag：：0000
つまり、このプロセスはプロダクトオーナーに負担が掛かりやすいと言えます。開発者を用意してプロセスに乗せるだけで、希望したものができてくるということはありません。
しかし、これは「アジャイルだから」という問題ではなく、アジャイルの本質を理解しないまま似非（えせ）アジャイルを実践することによる問題です。アジャイルプロセスの理解は、ウォーターフォールのそれよりもはるかに困難です。
paraword
list
問題/もんだい:アジャイル/アジャイルa,本質/ほんしつ,似/にv+非/ひ,理解/りかい,得/えv+瀬/せ?背/せ+アジャイル/アジャイルa,実践/じっせん,こと/こと,よる/よる
問題/もんだい:これ/これ,アジャイルだ/アジャイルだ,言う/いう
to root
  []
to reaf
  [しかし/しかし]
clueword:
発, 問題, て, いま, した, ない, 理解, もの, な, こと, この, 開発, も, まま, 質, しかし, 用意, 実, の, い, や, では, 希望, プロセス, から, そ, 理, 本質, 本, 負担
image : 0.603380324119
table : 0.392574381091
graph : 0.196745328355
flow : 0.3605299436

In Section 6, Score:1.220133
Flag：：0000
ユーザーは出来上がったシステムを目の当たりにして初めて、自分たちが望んでいないものを理解します。また、市場は常に流動しており、提案時には最先端の製品であったにも関わらず、開発完了時には市場の期待に沿っているとは限りません。ビジネスは常に変化していくものです。
paraword
clueword:
上, 発, 変化, 目の当たり, 市場, 時, 製品, 変, て, 完, 期, 常, いく, ず, ない, 動, 理解, 限, ビジネス, ユーザー, 提案, もの, な, 限り, め, 開発, も, また, の, い, システム, 目, 完了, 自分, 分, 端, 理, 期待, 先, 初め
image : 0.56208803423
table : 0.222680688596
graph : 0.171477595119
flow : 0.263886790004

In Section 7, Score:1.189057
Flag：：0010
その結果、プロジェクトの実績を品質コスト工期（QCD）の視点から評価した結果、コストと納期は比較的順守されているものの、品質に関しては計画値に達しないプロジェクトが20％以上にのぼり、QCDをすべて達成したと評価するプロジェクトは63％にとどまります。
paraword
list
  [納期/のうき, コスト/こすと]
to root
  [遵守/じゅんしゅ, もの/もの, 止まる/とどまる]
to reaf
  []
description : 納期/のうき
	 : その結果、プロジェクトの実績を品質コスト工期（QCD）の視点から評価した結果、コストと納期は比較的順守されているものの、品質に関しては計画値に達しないプロジェクトが20％以上にのぼり、QCDをすべて達成したと評価するプロジェクトは63％にとどまります。
description : 納期/のうき
	 : その結果、プロジェクトの実績を品質コスト工期（QCD）の視点から評価した結果、コストと納期は比較的順守されているものの、品質に関しては計画値に達しないプロジェクトが20％以上にのぼり、QCDをすべて達成したと評価するプロジェクトは63％にとどまります。
clueword:
上, 実績, 結果, 達成, 値, コスト, て, 期, した, ない, ど, もの, な, 順, 計画, 比較, 比, も, 質, その, 視点, 実, の, プロジェクト, い, から, そ, 品質, 点
image : 0.545491454502
table : 0.203358274519
graph : 0.223157359523
flow : 0.217049666429

In Section 1, Score:1.071452
Flag；；1000
さまざまな開発手法
開発プロジェクトに内在するリスク
アジャイルソフトウエア開発という言葉が生まれて約8年が経過しました。その間、従来型であるウォーターフォール開発プロセスと対比して、さまざまな議論が繰り返されてきたのはご存じの通りです。
本連載では、代表的な開発手法の紹介および、弊社プロダクトであるSIOSApplications（ProjectKeeper／SalesForceAutomation＋）における事例を元に、その開発手法の選定に至るまでのプロセスを紹介します。
paraword
list
SIOSApplications/SIOSApplications:弊社/へいしゃ+プロ/ぷろ+ダクト/だくと
紹介/しょうかい:開発/かいはつ+手法/しゅほう
to root
  [紹介/しょうかい]
to reaf
  [本/ほん+連載/れんさい, 代表/だいひょう+的だ/てきだ]
clueword:
発, 過, 代表, 型, 間, て, 葉, ソフト, さまざま, リスク, した, 議論, 通り, な, 年, ざ, 開発, 比, 手, 法, 表, 従来, 紹介, その, の, プロジェクト, 元, い, ご存じ, では, さま, プロセス, 言葉, 生, そ, 事例, 事, 弊社, 例, 本
image : 0.49097268214
table : 0.261163284921
graph : 0.133230314809
flow : 0.186086191526

In Section 9, Score:0.996672
Flag：：1000
アジャイル開発プロセス
アジャイル開発プロセスでは1つの開発サイクルを小さく（1サイクルの要求を小さく）し、開発の各サイクルをプロジェクトが完了するまで反復します。問題を細分化し、段階的に開発を進めていきます。アジャイルプロセスの中には、XP、アジャイル統一プロセス（RUP）、SCRUM等のさまざまな方法論があります。
paraword
list
  [アジャイル/アジャイルa+統一/とういつ+プロセス/ぷろせす, XP/XP]
to root
  [有る/ある]
to reaf
  []
list
  [SCRUM/SCRUM, RUP/RUP]
to root
  [方法/ほうほう+論/ろん, 有る/ある]
to reaf
  []
description : アジャイル/アジャイルa+統一/とういつ+プロセス/ぷろせす
	 : 対してアジャイルはその正反対の状況を得意とします。
clueword:
反, 発, つの, 問題, て, 完, さまざま, 分化, 中, な, 方, め, ざ, 反復, 開発, 法, 段階, の, プロジェクト, 要求, い, 等, では, さま, 完了, 細分, プロセス, 分, 方法
image : 0.482682405866
table : 0.170588457713
graph : 0.132816303175
flow : 0.210585251713

In Section 4, Score:0.985061
Flag：：0001
ウォーターフォールプロセスは、従来のソフトウエア開発において最もポピュラーな開発プロセスであり、「要求分析」「設計」「実装」「テスト」「結合」を順序通りにこなしていきます。滝から水が落ちるように、前工程の成果物に基づき次の工程の作業を行い、前工程への手戻りを想定していません。
paraword
list
  [実装/じっそう, 設計/せっけい, テスト/てすと, 要求/ようきゅう+分析/ぶんせき, 結合/けつごう]
to root
  [こなす/こなす]
to reaf
  []
clueword:
基, 発, 前, 水, 作業, 設計, て, ソフト, 次の, いま, なし, 通り, な, 物, 順, 開発, 手, 想定, も, 従来, 実, の, 成果, 要求, 結合, い, 順序, よう, 工程, 分析, プロセス, 次, 分, から
image : 0.477445343269
table : 0.16087372761
graph : 0.112287906432
flow : 0.234454101104

In Section 11, Score:0.963439
Flag：：1000
アジャイルでは以下の要素すべてが成り立たない限り、コミュニケーションコストだけが増大してプロジェクトは崩壊します。
・メンバー間の意思疎通
・問題の理解
・解決策の提案
paraword
clueword:
問題, メンバー, 崩壊, 要素, コスト, 間, て, ない, 理解, 限, 提案, な, 限り, コミュニケーション, 意思, の, プロジェクト, い, では, 解決, 増大, 理, 下, バー
image : 0.484171801667
table : 0.159464036956
graph : 0.145135076714
flow : 0.174668249455

In Section 8, Score:0.919401
Flag：：0000
ウォーターフォールプロセスをうまくコントロールし、リスクを担保できるプロジェクトが少なかったという数値の裏付けが、この値から導き出されます。そこで、このプロセスの弱点を克服すべく登場したのが反復開発を軸とするアジャイルプロセスでした。
paraword
clueword:
反, 発, 軸, 値, 克服, リスク, した, なか, 数, な, この, 反復, 開発, コントロール, の, プロジェクト, い, 登場, プロセス, から, そ, 裏, 点
image : 0.463267652291
table : 0.151317911446
graph : 0.117027242925
flow : 0.187788503371

In Section 3, Score:0.859558
Flag：：0100
ウォーターフォール開発プロセス
ウォーターフォール開発プロセスとアジャイル開発プロセスの根本的な違いは、実行可能なソフトウエア（ビルド）を単位として開発を反復するか否かにあります。
paraword
list
  [ウォーターフォール/ウォーターフォール+開発/かいはつ+プロセス/ぷろせす, アジャイル/アジャイルa+開発/かいはつ+プロセス/ぷろせす]
to root
  [違い/ちがいv, 有る/ある]
to reaf
  []
description : アジャイル/アジャイルa+開発/かいはつ+プロセス/ぷろせす
	 : 対してアジャイルはその正反対の状況を得意とします。
clueword:
反, 発, 可能, 単位, て, ソフト, な, 実行, 反復, 開発, 実, 可, の, ビル, い, ビルド, 単, プロセス, 根, 根本, 本
image : 0.439013057218
table : 0.142309820808
graph : 0.112287906432
flow : 0.165947089608

Flag;;1,0,0,0
さまざまな開発手法
開発プロジェクトに内在するリスク
　アジャイルソフトウエア開発という言葉が生まれて約8年が経過しました。その間、従来型であるウォーターフォール開発プロセスと対比して、さまざまな議論が繰り返されてきたのはご存じの通りです。
　本連載では、代表的な開発手法の紹介および、弊社プロダクトであるSIOS Applications（ProjectKeeper / SalesForceAutomation+）における事例を元に、その開発手法の選定に至るまでのプロセスを紹介します。

Flag::0,1,0,0
　開発手法は単純にウォーターフォールが悪い、アジャイルは良い、というものではなく、重要なのはプロジェクトを失敗させないことにあります。どのような開発手法においても、プロジェクトには必ずリスクが存在します。プロジェクト失敗の原因の多くは以下のようなものです。
・スケジュールの欠陥―強気過ぎるスケジュールは悪。予実の乖離（かいり）を生み出す。
・要求の増大（変更）―外的要因も影響し、時間の経過と共に要求は変わっていく。
・人員の離脱―見積もりの時点で、メンバー離職の可能性は大抵考慮されていない。
・仕様の崩壊―仕様はあいまいに作れるが、製品はあいまいに作れない。
・生産性の低迷―少人数チームでは平均値のブレが大きい。能力がマイナスに振れるリスク
　これらのリスクが担保できるのであれば、開発プロセスがアジャイルでもウォーターフォールであっても構いません。それぞれのメリット・デメリットを検討した上、よりプロジェクトが成功しやすい開発プロセスを選択すべきです。

Flag::0,1,0,0
ウォーターフォール開発プロセス
　ウォーターフォール開発プロセスとアジャイル開発プロセスの根本的な違いは、実行可能なソフトウエア（ビルド）を単位として開発を反復するか否かにあります。

Flag::0,0,0,1
ウォーターフォールプロセスは、従来のソフトウエア開発において最もポピュラーな開発プロセスであり、「要求分析」「設計」「実装」「テスト」「結合」を順序通りにこなしていきます。滝から水が落ちるように、前工程の成果物に基づき次の工程の作業を行い、前工程への手戻りを想定していません。

Flag::1,0,0,0
・システムのユーザーは、自分自身がどんなシステムが欲しいのかを理解しておらず、さらに、要求を明確に伝えることができない。
・仮にすべての要求を明確にすることができたとしても、そのすべてを実装に落とし込むために必要な詳細には達しない。
・仮にすべての詳細を知ることができたとしても、通常それは複雑過ぎて、人間の理解の範囲を超えている。
・仮に人間がこのすべての複雑な要求を理解できたとしても、外的要因により要件は変化する。場合によっては、以前の決定事項を覆すこともある。

Flag::0,0,0,0
　ユーザーは出来上がったシステムを目の当たりにして初めて、自分たちが望んでいないものを理解します。また、市場は常に流動しており、提案時には最先端の製品であったにも関わらず、開発完了時には市場の期待に沿っているとは限りません。ビジネスは常に変化していくものです。

Flag::0,0,1,0
　その結果、プロジェクトの実績を品質,コスト,工期（QCD）の視点から評価した結果、コストと納期は比較的順守されているものの、品質に関しては計画値に 達しないプロジェクトが20％以上にのぼり、QCDをすべて達成したと評価するプロジェクトは63％にとどまります。

Flag::0,0,0,0
　ウォーターフォールプロセスをうまくコントロールし、リスクを担保できるプロジェクトが少なかったという数値の裏付けが、この値から導き出されます。そこで、このプロセスの弱点を克服すべく登場したのが反復開発を軸とするアジャイルプロセスでした。

Flag::1,0,0,0
アジャイル開発プロセス
　アジャイル開発プロセスでは1つの開発サイクルを小さく（1サイクルの要求を小さく）し、開発の各サイクルをプロジェクトが完了するまで反復します。問題を細分化し、段階的に開発を進めていきます。アジャイルプロセスの中には、XP、アジャイル統一プロセス（RUP）、SCRUM等のさまざまな方法論があります。

Flag::0,0,0,1
　例えばRUPにおいては、ただやみくもにサイクルを実行するのではなく、各サイクルを「方向付け」「推敲（すいこう）」「作成」「移行」という4つのフェーズに分類し、これらのフェーズを経てリリースにいたります。各フェーズは1つ以上の反復で構成されます。このように、短いスパンで成果物をリリースし、その都度評価を行うことにより、リスクを最小化しようとしたのがRUPのアジャイルプロセスです。

Flag::1,0,0,0
アジャイルでは以下の要素すべてが成り立たない限り、コミュニケーションコストだけが増大してプロジェクトは崩壊します。
・メンバー間の意思疎通
・問題の理解
・解決策の提案

Flag::0,0,0,0
つまり、このプロセスはプロダクトオーナーに負担が掛かりやすいと言えます。開発者を用意してプロセスに乗せるだけで、希望したものができてくるということはありません。
　しかし、これは「アジャイルだから」という問題ではなく、アジャイルの本質を理解しないまま似非（えせ）アジャイルを実践することによる問題です。アジャイルプロセスの理解は、ウォーターフォールのそれよりもはるかに困難です。

Flag::0,0,1,0
統計・分析における開発現場の実態
　独立行政法人 情報処理推進機構（IPA）の統計（出典：『ソフトウェア開発データ白書　2008』）によると、実に95％以上のプロジェクトがウォーターフォール型のライフサイクルで開発されています。恐らく、ウォーターフォール型のプロセスの方が誰にでも理解しやすいこと、改修案件の場合など前回のプロセスがウォーターフォール型であったため、今回も同じプロセスを採用するという心理が働いたりすることが原因ではないかと考えられます。
　次に、ユーザーの要求仕様に関して、35％以上のプロジェクトは「あいまい」であり、30％以上のプロジェクトで「ユーザー担当者の要求仕様への関与が不十分」という統計もあります。
　その結果、QCDをすべて達成したと評価するプロジェクトは全体の2/3程度で、残りは品質、コスト、工期のいずれかの項目が計画通りに達成できなかったというデータもあります。このように、3つに1つのプロジェクトは、ウォーターフォールの当初の計画通りに進んでないということになります。つまり、プロジェクトの初期段階で完全な計画を立てるのは非常に難しいことが分かります。

Flag::0,1,0,0
開発プロセスにより何が変わるのか
　ここで、両プロセスを比較してみます。
　そして、ウォーターフォールプロセスが得意とする状況とされるのは以下の通りです。
・高い可用性が求められるシステムである場合
・メンバーの開発経験が少ない場合
・要件がほとんど変わらない場合
・開発メンバーの数が多い場合
・組織的文化が秩序を重視するものである場合
　対してアジャイルはその正反対の状況を得意とします。
・可用性よりも優先されるものがあるシステム
・メンバーとして開発に熟練した開発者が参加している場合
・要件が常に変化していく場合
・開発メンバーの数が少ない場合
・組織的文化がさまざまな状況に意欲を持って取り組む場合

Flag::0,0,0,0
　アジャイルプロセスでは、プロジェクトの早い段階から「動くコード」を作成します。当然、機能はまったく足りないかもしれませんが、実装したところまでは動かすことができるコードになっているはずです。また、小さく作りこんでいくプロセスなので、サイクルごとにかじ取りの判断ができ、顧客からの要望が取り入れやすいのが特徴です。アジャイルプロセスの基本スタンスは、変化を受け入れることで、要求の変更が前提に考えられています。
ProjectKeeper / SalesForceAutomation+の開発プロセス
　最初のバージョンの開発が始まってから約4年がたちましたが、当初はメンバー約2名で立ち上げました。自社製のWebシステム構築用のフレームワークがあったことや、受託開発でさまざまなシステムを構築した経験があったメンバーであったため2名で約6ヶ月の期間で開発を行うことはできました。
　当初はパッケージ開発におけるノウハウはほとんどなかったため、受託開発時に当時よく使っていたウォーターフォール手法を必然的に採用しました。
　しかし、パッケージ製品の開発においては延々と開発を継続していかなければならず、受託開発のように納品することで、開発が完了するわけではありません。製品は日々進化する必要があり、顧客からのフィードバックをスムーズに製品に取り入れていかなければ、製品の魅力を維持することができません。
　仕様変更、機能拡張がたびたび発生していく状況では、各機能間の整合性や品質を維持することが困難になり、開発プロセスをより仕様変更に強いアジャイル開発手法へスイッチすることで、柔軟な仕様変更、スピーディーな製品リリースを行うことができるようになりました。
　昨今では多種多様なシステムが身の回りに存在しています。さまざまなシステムを目にし、操作することで、古いシステムの操作性や機能へ不満を抱く機会も多くなるでしょう。このような顧客を常に満足させるためには、システムは常に進化していかなければならず、おのずと今後の開発手法の主流はアジャイルへと進んでいくのではないでしょうか？
Section:14
	Ｆｌａｇ：：０１００
	開発プロセスにより何が変わるのか
	ここで、両プロセスを比較してみます。
	そして、ウォーターフォールプロセスが得意とする状況とされるのは以下の通りです。
	・高い可用性が求められるシステムである場合
	・メンバーの開発経験が少ない場合
	・要件がほとんど変わらない場合
	・開発メンバーの数が多い場合
	・組織的文化が秩序を重視するものである場合
	対してアジャイルはその正反対の状況を得意とします。
	・可用性よりも優先されるものがあるシステム
	・メンバーとして開発に熟練した開発者が参加している場合
	・要件が常に変化していく場合
	・開発メンバーの数が少ない場合
	・組織的文化がさまざまな状況に意欲を持って取り組む場合
Score:0.00152142405373
EACH_TAG_SCORE:
	image:8.24184252705e-05
	table:0.000755192708984
	graph:0.000379990842194
	flow:0.000303822077278
PARA:
Clueword:
	対する:[0.0000,0.0000,0.0000,0.0000]
	多い:[0.0000,0.0088,0.0219,0.0000]
	より:[0.0057,0.0000,0.0251,0.0000]
	よる:[0.0000,0.0000,0.0000,0.0000]
	場合:[0.0047,0.2005,0.0058,0.0000]
	ます:[0.0000,0.0000,0.0000,0.0154]
	さまざまだ:[0.0000,0.0000,0.0000,0.0000]
	比較:[0.0000,0.0269,0.0273,0.0000]
	プロセス:[0.0000,0.0000,0.0000,0.0281]
	その:[0.0000,0.0000,0.0000,0.0239]
	する:[0.0023,0.0000,0.0000,0.0000]
	いる:[0.0023,0.0000,0.0000,0.0000]
	少ない:[0.0000,0.0000,0.0000,0.0000]
	高い:[0.0000,0.0000,0.0328,0.0000]
	変化:[0.0000,0.0000,0.0000,0.0000]
	ほとんど:[0.0000,0.0000,0.0059,0.0000]
	状況:[0.0000,0.0000,0.0000,0.0000]
	そして:[0.0000,0.0000,0.0000,0.0123]
	以下:[0.0108,0.0000,0.0000,0.0000]
	ここ:[0.0000,0.0000,0.0000,0.0153]
	いく:[0.0000,0.0000,0.0000,0.0000]
True-Positive

Section:5
	Ｆｌａｇ：：１０００
	・システムのユーザーは、自分自身がどんなシステムが欲しいのかを理解しておらず、さらに、要求を明確に伝えることができない。
	・仮にすべての要求を明確にすることができたとしても、そのすべてを実装に落とし込むために必要な詳細には達しない。
	・仮にすべての詳細を知ることができたとしても、通常それは複雑過ぎて、人間の理解の範囲を超えている。
	・仮に人間がこのすべての複雑な要求を理解できたとしても、外的要因により要件は変化する。
	場合によっては、以前の決定事項を覆すこともある。
Score:0.00124373332316
EACH_TAG_SCORE:
	image:0.000100560543488
	table:0.000862208699635
	graph:5.21093999937e-05
	flow:0.000228854680042
PARA:
Clueword:
	この:[0.0000,0.0000,0.0000,0.0000]
	よる:[0.0000,0.0000,0.0000,0.0000]
	場合:[0.0047,0.2005,0.0058,0.0000]
	要因:[0.0000,0.0000,0.0000,0.0000]
	すべて:[0.0000,0.0000,0.0069,0.0000]
	その:[0.0000,0.0000,0.0000,0.0239]
	範囲:[0.0074,0.0000,0.0000,0.0000]
	以前:[0.0000,0.0000,0.0000,0.0000]
	する:[0.0023,0.0000,0.0000,0.0000]
	いる:[0.0023,0.0000,0.0000,0.0000]
	さらに:[0.0000,0.0000,0.0000,0.0321]
	変化:[0.0000,0.0000,0.0000,0.0000]
	それ:[0.0000,0.0040,0.0000,0.0000]
	過ぎる:[0.0000,0.0000,0.0000,0.0000]
	事項:[0.0000,0.0067,0.0000,0.0000]
	通常:[0.0000,0.0000,0.0000,0.0000]
	複雑だ:[0.0080,0.0000,0.0000,0.0000]
True-Positive

Section:13
	Ｆｌａｇ：：００１０
	統計・分析における開発現場の実態
	独立行政法人情報処理推進機構（ＩＰＡ）の統計（出典：『ソフトウェア開発データ白書２００８』）によると、実に９５％以上のプロジェクトがウォーターフォール型のライフサイクルで開発されています。
	恐らく、ウォーターフォール型のプロセスの方が誰にでも理解しやすいこと、改修案件の場合など前回のプロセスがウォーターフォール型であったため、今回も同じプロセスを採用するという心理が働いたりすることが原因ではないかと考えられます。
	次に、ユーザーの要求仕様に関して、３５％以上のプロジェクトは「あいまい」であり、３０％以上のプロジェクトで「ユーザー担当者の要求仕様への関与が不十分」という統計もあります。
	その結果、ＱＣＤをすべて達成したと評価するプロジェクトは全体の２／３程度で、残りは品質、コスト、工期のいずれかの項目が計画通りに達成できなかったというデータもあります。
	このように、３つに１つのプロジェクトは、ウォーターフォールの当初の計画通りに進んでないということになります。
	つまり、プロジェクトの初期段階で完全な計画を立てるのは非常に難しいことが分かります。
Score:0.000878992092923
EACH_TAG_SCORE:
	image:2.32147107816e-05
	table:0.000435407877988
	graph:5.59787530103e-05
	flow:0.000364390751143
PARA:
Clueword:
	分析:[0.0000,0.0000,0.0000,0.0000]
	コスト:[0.0000,0.0000,0.0090,0.0000]
	よる:[0.0000,0.0000,0.0000,0.0000]
	同じだ:[0.0024,0.0000,0.0000,0.0000]
	統計:[0.0000,0.0000,0.0000,0.0000]
	計画:[0.0000,0.0000,0.0000,0.0006]
	項目:[0.0000,0.0125,0.0000,0.0000]
	当初:[0.0000,0.0000,0.0000,0.0000]
	処理:[0.0000,0.0000,0.0000,0.0219]
	なる:[0.0000,0.0000,0.0062,0.0000]
	初期:[0.0000,0.0000,0.0000,0.0000]
	する:[0.0023,0.0000,0.0000,0.0000]
	いる:[0.0023,0.0000,0.0000,0.0000]
	次に:[0.0000,0.0000,0.0000,0.0933]
	以上:[0.0000,0.0060,0.0001,0.0000]
	場合:[0.0047,0.2005,0.0058,0.0000]
	ます:[0.0000,0.0000,0.0000,0.0154]
	プロセス:[0.0000,0.0000,0.0000,0.0281]
	サイクル:[0.0000,0.0000,0.0001,0.0000]
	その:[0.0000,0.0000,0.0000,0.0239]
	程度:[0.0000,0.0000,0.0000,0.0000]
	考える:[0.0000,0.0000,0.0000,0.0000]
	やすい:[0.0000,0.0000,0.0000,0.0000]
	すべて:[0.0000,0.0000,0.0069,0.0000]
	でも:[0.0000,0.0000,0.0000,0.0000]
	つまり:[0.0000,0.0000,0.0000,0.0000]
True-Positive

Section:9
	Ｆｌａｇ：：１０００
	アジャイル開発プロセス
	アジャイル開発プロセスでは１つの開発サイクルを小さく（１サイクルの要求を小さく）し、開発の各サイクルをプロジェクトが完了するまで反復します。
	問題を細分化し、段階的に開発を進めていきます。
	アジャイルプロセスの中には、ＸＰ、アジャイル統一プロセス（ＲＵＰ）、ＳＣＲＵＭ等のさまざまな方法論があります。
Score:0.000711874283688
EACH_TAG_SCORE:
	image:0.000101201044506
	table:0.000194586610544
	graph:0.000159035463209
	flow:0.00025705116543
PARA:
Clueword:
	いく:[0.0000,0.0000,0.0000,0.0000]
	細分:[0.0000,0.0029,0.0000,0.0000]
	ます:[0.0000,0.0000,0.0000,0.0154]
	さまざまだ:[0.0000,0.0000,0.0000,0.0000]
	プロセス:[0.0000,0.0000,0.0000,0.0281]
	サイクル:[0.0000,0.0000,0.0001,0.0000]
	方法:[0.0056,0.0166,0.0000,0.0005]
	する:[0.0023,0.0000,0.0000,0.0000]
	小さい:[0.0093,0.0138,0.0271,0.0000]
True-Positive

Section:2
	Ｆｌａｇ：：０１００
	開発手法は単純にウォーターフォールが悪い、アジャイルは良い、というものではなく、重要なのはプロジェクトを失敗させないことにあります。
	どのような開発手法においても、プロジェクトには必ずリスクが存在します。
	プロジェクト失敗の原因の多くは以下のようなものです。
	・スケジュールの欠陥―強気過ぎるスケジュールは悪。
	予実の乖離（かいり）を生み出す。
	・要求の増大（変更）―外的要因も影響し、時間の経過と共に要求は変わっていく。
	・人員の離脱―見積もりの時点で、メンバー離職の可能性は大抵考慮されていない。
	・仕様の崩壊―仕様はあいまいに作れるが、製品はあいまいに作れない。
	・生産性の低迷―少人数チームでは平均値のブレが大きい。
	能力がマイナスに振れるリスク
	これらのリスクが担保できるのであれば、開発プロセスがアジャイルでもウォーターフォールであっても構いません。
	それぞれのメリット・デメリットを検討した上、よりプロジェクトが成功しやすい開発プロセスを選択すべきです。
Score:0.000491064028154
EACH_TAG_SCORE:
	image:7.20339559289e-05
	table:0.000152757598519
	graph:0.000167490833026
	flow:9.87816406798e-05
PARA:
Clueword:
	より:[0.0057,0.0000,0.0251,0.0000]
	増大:[0.0000,0.0000,0.0000,0.0000]
	悪い:[0.0030,0.0000,0.0000,0.0000]
	する:[0.0023,0.0000,0.0000,0.0000]
	いる:[0.0023,0.0000,0.0000,0.0000]
	これ:[0.0000,0.0000,0.0000,0.0000]
	構う:[0.0027,0.0000,0.0000,0.0000]
	以下:[0.0108,0.0000,0.0000,0.0000]
	いく:[0.0000,0.0000,0.0000,0.0000]
	メリット:[0.0000,0.0286,0.0000,0.0000]
	やすい:[0.0000,0.0000,0.0000,0.0000]
	ます:[0.0000,0.0000,0.0000,0.0154]
	経過:[0.0000,0.0000,0.0000,0.0000]
	デメリット:[0.0000,0.0276,0.0000,0.0000]
	大きい:[0.0049,0.0109,0.0215,0.0000]
	プロセス:[0.0000,0.0000,0.0000,0.0281]
	要因:[0.0000,0.0000,0.0000,0.0000]
	それぞれ:[0.0000,0.0001,0.0000,0.0000]
	時間:[0.0000,0.0000,0.0021,0.0000]
	平均:[0.0000,0.0000,0.0000,0.0000]
	過ぎる:[0.0000,0.0000,0.0000,0.0000]
	時点:[0.0000,0.0000,0.0250,0.0000]
True-Positive

Section:11
	Ｆｌａｇ：：１０００
	アジャイルでは以下の要素すべてが成り立たない限り、コミュニケーションコストだけが増大してプロジェクトは崩壊します。
	・メンバー間の意思疎通
	・問題の理解
	・解決策の提案
Score:0.000468058551797
EACH_TAG_SCORE:
	image:0.00013769015691
	table:4.39466362316e-07
	graph:0.000167867385333
	flow:0.000162061543192
PARA:
Clueword:
	する:[0.0023,0.0000,0.0000,0.0000]
	ます:[0.0000,0.0000,0.0000,0.0154]
	増大:[0.0000,0.0000,0.0000,0.0000]
	以下:[0.0108,0.0000,0.0000,0.0000]
	コスト:[0.0000,0.0000,0.0090,0.0000]
	すべて:[0.0000,0.0000,0.0069,0.0000]
True-Positive

Section:10
	Ｆｌａｇ：：０００１
	例えばＲＵＰにおいては、ただやみくもにサイクルを実行するのではなく、各サイクルを「方向付け」「推敲（すいこう）」「作成」「移行」という４つのフェーズに分類し、これらのフェーズを経てリリースにいたります。
	各フェーズは１つ以上の反復で構成されます。
	このように、短いスパンで成果物をリリースし、その都度評価を行うことにより、リスクを最小化しようとしたのがＲＵＰのアジャイルプロセスです。
Score:0.000467997832929
EACH_TAG_SCORE:
	image:0.000101834794889
	table:2.98506694408e-05
	graph:9.78606045124e-07
	flow:0.000335333762554
PARA:
Clueword:
	作成:[0.0000,0.0000,0.0000,0.0000]
	よる:[0.0000,0.0000,0.0000,0.0000]
	ます:[0.0000,0.0000,0.0000,0.0154]
	構成:[0.0089,0.0000,0.0000,0.0000]
	プロセス:[0.0000,0.0000,0.0000,0.0281]
	サイクル:[0.0000,0.0000,0.0001,0.0000]
	これ:[0.0000,0.0000,0.0000,0.0000]
	その:[0.0000,0.0000,0.0000,0.0239]
	短い:[0.0036,0.0000,0.0001,0.0000]
	する:[0.0023,0.0000,0.0000,0.0000]
	例えば:[0.0056,0.0000,0.0000,0.0000]
	分類:[0.0000,0.0000,0.0000,0.0000]
	以上:[0.0000,0.0060,0.0001,0.0000]
True-Positive

Section:12
	Ｆｌａｇ：：００００
	つまり、このプロセスはプロダクトオーナーに負担が掛かりやすいと言えます。
	開発者を用意してプロセスに乗せるだけで、希望したものができてくるということはありません。
	しかし、これは「アジャイルだから」という問題ではなく、アジャイルの本質を理解しないまま似非（えせ）アジャイルを実践することによる問題です。
	アジャイルプロセスの理解は、ウォーターフォールのそれよりもはるかに困難です。
Score:0.000425200894627
EACH_TAG_SCORE:
	image:5.75380330719e-05
	table:2.02083424611e-05
	graph:0.000126056531227
	flow:0.000221397987867
PARA:
Clueword:
	より:[0.0057,0.0000,0.0251,0.0000]
	よる:[0.0000,0.0000,0.0000,0.0000]
	から:[0.0011,0.0000,0.0000,0.0006]
	ます:[0.0000,0.0000,0.0000,0.0154]
	くる:[0.0023,0.0000,0.0000,0.0000]
	プロセス:[0.0000,0.0000,0.0000,0.0281]
	これ:[0.0000,0.0000,0.0000,0.0000]
	する:[0.0023,0.0000,0.0000,0.0000]
	この:[0.0000,0.0000,0.0000,0.0000]
	それ:[0.0000,0.0040,0.0000,0.0000]
	やすい:[0.0000,0.0000,0.0000,0.0000]
	つまり:[0.0000,0.0000,0.0000,0.0000]
False-Positive

Section:1
	Ｆｌａｇ；；１０００
	さまざまな開発手法
	開発プロジェクトに内在するリスク
	アジャイルソフトウエア開発という言葉が生まれて約８年が経過しました。
	その間、従来型であるウォーターフォール開発プロセスと対比して、さまざまな議論が繰り返されてきたのはご存じの通りです。
	本連載では、代表的な開発手法の紹介および、弊社プロダクトであるＳＩＯＳＡｐｐｌｉｃａｔｉｏｎｓ（ＰｒｏｊｅｃｔＫｅｅｐｅｒ／ＳａｌｅｓＦｏｒｃｅＡｕｔｏｍａｔｉｏｎ＋）における事例を元に、その開発手法の選定に至るまでのプロセスを紹介します。
Score:0.000286831074537
EACH_TAG_SCORE:
	image:1.83101694627e-05
	table:4.44945258964e-10
	graph:0.0
	flow:0.000268520460129
PARA:
Clueword:
	ます:[0.0000,0.0000,0.0000,0.0154]
	くる:[0.0023,0.0000,0.0000,0.0000]
	経過:[0.0000,0.0000,0.0000,0.0000]
	対比:[0.0000,0.0000,0.0000,0.0000]
	プロセス:[0.0000,0.0000,0.0000,0.0281]
	その:[0.0000,0.0000,0.0000,0.0239]
	する:[0.0023,0.0000,0.0000,0.0000]
	さまざまだ:[0.0000,0.0000,0.0000,0.0000]
worng file


Section:15
	Ｆｌａｇ：：００００
	アジャイルプロセスでは、プロジェクトの早い段階から「動くコード」を作成します。
	当然、機能はまったく足りないかもしれませんが、実装したところまでは動かすことができるコードになっているはずです。
	また、小さく作りこんでいくプロセスなので、サイクルごとにかじ取りの判断ができ、顧客からの要望が取り入れやすいのが特徴です。
	アジャイルプロセスの基本スタンスは、変化を受け入れることで、要求の変更が前提に考えられています。
	ＰｒｏｊｅｃｔＫｅｅｐｅｒ／ＳａｌｅｓＦｏｒｃｅＡｕｔｏｍａｔｉｏｎ＋の開発プロセス
	最初のバージョンの開発が始まってから約４年がたちましたが、当初はメンバー約２名で立ち上げました。
	自社製のＷｅｂシステム構築用のフレームワークがあったことや、受託開発でさまざまなシステムを構築した経験があったメンバーであったため２名で約６ヶ月の期間で開発を行うことはできました。
	当初はパッケージ開発におけるノウハウはほとんどなかったため、受託開発時に当時よく使っていたウォーターフォール手法を必然的に採用しました。
	しかし、パッケージ製品の開発においては延々と開発を継続していかなければならず、受託開発のように納品することで、開発が完了するわけではありません。
	製品は日々進化する必要があり、顧客からのフィードバックをスムーズに製品に取り入れていかなければ、製品の魅力を維持することができません。
	仕様変更、機能拡張がたびたび発生していく状況では、各機能間の整合性や品質を維持することが困難になり、開発プロセスをより仕様変更に強いアジャイル開発手法へスイッチすることで、柔軟な仕様変更、スピーディーな製品リリースを行うことができるようになりました。
	昨今では多種多様なシステムが身の回りに存在しています。
	さまざまなシステムを目にし、操作することで、古いシステムの操作性や機能へ不満を抱く機会も多くなるでしょう。
	このような顧客を常に満足させるためには、システムは常に進化していかなければならず、おのずと今後の開発手法の主流はアジャイルへと進んでいくのではないでしょうか？
Score:0.000260921025219
EACH_TAG_SCORE:
	image:3.42342295954e-05
	table:6.41055064639e-05
	graph:0.000111543548453
	flow:5.1037740707e-05
PARA:
Clueword:
	当初:[0.0000,0.0000,0.0000,0.0000]
	なる:[0.0000,0.0000,0.0062,0.0000]
	基本:[0.0022,0.0049,0.0000,0.0000]
	状況:[0.0000,0.0000,0.0000,0.0000]
	今後:[0.0000,0.0000,0.0001,0.0008]
	ほとんど:[0.0000,0.0000,0.0059,0.0000]
	多い:[0.0000,0.0088,0.0219,0.0000]
	維持:[0.0000,0.0000,0.0000,0.0000]
	考える:[0.0000,0.0000,0.0000,0.0000]
	変化:[0.0000,0.0000,0.0000,0.0000]
	始まる:[0.0000,0.0000,0.0000,0.0000]
	最初だ:[0.0000,0.0000,0.0000,0.0007]
	作成:[0.0000,0.0000,0.0000,0.0000]
	期間:[0.0000,0.0000,0.0055,0.0000]
	より:[0.0057,0.0000,0.0251,0.0000]
	する:[0.0023,0.0000,0.0000,0.0000]
	いる:[0.0023,0.0000,0.0000,0.0000]
	いく:[0.0000,0.0000,0.0000,0.0000]
	作る:[0.0000,0.0000,0.0000,0.0000]
	から:[0.0011,0.0000,0.0000,0.0006]
	特徴:[0.0075,0.0297,0.0000,0.0000]
	主流:[0.0000,0.0000,0.0000,0.0000]
	プロセス:[0.0000,0.0000,0.0000,0.0281]
	サイクル:[0.0000,0.0000,0.0001,0.0000]
	ます:[0.0000,0.0000,0.0000,0.0154]
	発生:[0.0000,0.0000,0.0075,0.0000]
	さまざまだ:[0.0000,0.0000,0.0000,0.0000]
	小さい:[0.0093,0.0138,0.0271,0.0000]
	やすい:[0.0000,0.0000,0.0000,0.0000]
	使う:[0.0000,0.0000,0.0000,0.0000]
False-Positive

Section:6
	Ｆｌａｇ：：００００
	ユーザーは出来上がったシステムを目の当たりにして初めて、自分たちが望んでいないものを理解します。
	また、市場は常に流動しており、提案時には最先端の製品であったにも関わらず、開発完了時には市場の期待に沿っているとは限りません。
	ビジネスは常に変化していくものです。
Score:0.000142693186175
EACH_TAG_SCORE:
	image:3.27228009684e-05
	table:3.68764285714e-12
	graph:1.50371428571e-12
	flow:0.000109970380015
PARA:
Clueword:
	いく:[0.0000,0.0000,0.0000,0.0000]
	ます:[0.0000,0.0000,0.0000,0.0154]
	する:[0.0023,0.0000,0.0000,0.0000]
	いる:[0.0023,0.0000,0.0000,0.0000]
	変化:[0.0000,0.0000,0.0000,0.0000]
False-Positive

Section:3
	Ｆｌａｇ：：０１００
	ウォーターフォール開発プロセス
	ウォーターフォール開発プロセスとアジャイル開発プロセスの根本的な違いは、実行可能なソフトウエア（ビルド）を単位として開発を反復するか否かにあります。
CUTOFF SECTION:Too Short

Section:4
	Ｆｌａｇ：：０００１
	ウォーターフォールプロセスは、従来のソフトウエア開発において最もポピュラーな開発プロセスであり、「要求分析」「設計」「実装」「テスト」「結合」を順序通りにこなしていきます。
	滝から水が落ちるように、前工程の成果物に基づき次の工程の作業を行い、前工程への手戻りを想定していません。
CUTOFF SECTION:Too Short

Section:7
	Ｆｌａｇ：：００１０
	その結果、プロジェクトの実績を品質コスト工期（ＱＣＤ）の視点から評価した結果、コストと納期は比較的順守されているものの、品質に関しては計画値に達しないプロジェクトが２０％以上にのぼり、ＱＣＤをすべて達成したと評価するプロジェクトは６３％にとどまります。
CUTOFF SECTION:Too Short

Section:8
	Ｆｌａｇ：：００００
	ウォーターフォールプロセスをうまくコントロールし、リスクを担保できるプロジェクトが少なかったという数値の裏付けが、この値から導き出されます。
	そこで、このプロセスの弱点を克服すべく登場したのが反復開発を軸とするアジャイルプロセスでした。
CUTOFF SECTION:Too Short

True-Negative:0
False-Positive:3
Too Short:4
True-Positive:7
False-Negative:0
precision = 0.700000
recall = 1.000000
fvalue = 0.823529
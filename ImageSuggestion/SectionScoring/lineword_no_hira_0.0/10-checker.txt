Section:14
	Ｆｌａｇ：：０１００
	開発プロセスにより何が変わるのか
	ここで、両プロセスを比較してみます。
	そして、ウォーターフォールプロセスが得意とする状況とされるのは以下の通りです。
	・高い可用性が求められるシステムである場合
	・メンバーの開発経験が少ない場合
	・要件がほとんど変わらない場合
	・開発メンバーの数が多い場合
	・組織的文化が秩序を重視するものである場合
	対してアジャイルはその正反対の状況を得意とします。
	・可用性よりも優先されるものがあるシステム
	・メンバーとして開発に熟練した開発者が参加している場合
	・要件が常に変化していく場合
	・開発メンバーの数が少ない場合
	・組織的文化がさまざまな状況に意欲を持って取り組む場合
Score:0.00057244988324
EACH_TAG_SCORE:
	image:8.73446913943e-05
	table:0.000282633414121
	graph:0.000127219598896
	flow:7.52521788289e-05
PARA:
Clueword:
	アジャイルだ:[0.0002,0.0002,0.0000,0.0002]
	対する:[0.0007,0.0012,0.0000,0.0005]
	熟練:[0.0000,0.0001,0.0000,0.0000]
	多い:[0.0032,0.0042,0.0037,0.0009]
	常に:[0.0002,0.0002,0.0001,0.0000]
	可用性:[0.0000,0.0001,0.0000,0.0000]
	取り組む:[0.0001,0.0002,0.0000,0.0000]
	システム:[0.0005,0.0008,0.0000,0.0002]
	的だ:[0.0040,0.0068,0.0016,0.0029]
	場合:[0.0062,0.0488,0.0053,0.0034]
	開発:[0.0005,0.0013,0.0001,0.0003]
	組織:[0.0001,0.0003,0.0000,0.0000]
	求める:[0.0001,0.0002,0.0000,0.0001]
	持つ:[0.0010,0.0011,0.0001,0.0022]
	重視:[0.0002,0.0004,0.0000,0.0000]
	比較:[0.0015,0.0114,0.0125,0.0005]
	プロセス:[0.0002,0.0005,0.0003,0.0066]
	文化:[0.0000,0.0001,0.0000,0.0000]
	通り:[0.0003,0.0004,0.0003,0.0006]
	要件:[0.0004,0.0005,0.0000,0.0000]
	少ない:[0.0017,0.0009,0.0017,0.0000]
	高い:[0.0010,0.0020,0.0121,0.0007]
	正反対だ:[0.0000,0.0001,0.0000,0.0000]
	メンバー:[0.0000,0.0004,0.0000,0.0001]
	意欲:[0.0000,0.0001,0.0000,0.0000]
	変化:[0.0007,0.0004,0.0000,0.0004]
	状況:[0.0004,0.0024,0.0005,0.0003]
	参加:[0.0001,0.0001,0.0000,0.0000]
	以下:[0.0034,0.0013,0.0003,0.0018]
	優先:[0.0000,0.0001,0.0002,0.0000]
	変わる:[0.0004,0.0007,0.0007,0.0005]
	経験:[0.0002,0.0004,0.0002,0.0012]
	秩序:[0.0000,0.0001,0.0000,0.0000]
	ウォーターフォール:[0.0000,0.0003,0.0003,0.0002]
	得意だ:[0.0001,0.0009,0.0000,0.0000]
True-Positive

Section:5
	Ｆｌａｇ：：１０００
	・システムのユーザーは、自分自身がどんなシステムが欲しいのかを理解しておらず、さらに、要求を明確に伝えることができない。
	・仮にすべての要求を明確にすることができたとしても、そのすべてを実装に落とし込むために必要な詳細には達しない。
	・仮にすべての詳細を知ることができたとしても、通常それは複雑過ぎて、人間の理解の範囲を超えている。
	・仮に人間がこのすべての複雑な要求を理解できたとしても、外的要因により要件は変化する。
	場合によっては、以前の決定事項を覆すこともある。
Score:0.000527530010717
EACH_TAG_SCORE:
	image:0.000121463284101
	table:0.000287532048943
	graph:5.03919460314e-05
	flow:6.81427316422e-05
PARA:
Clueword:
	要求:[0.0002,0.0002,0.0002,0.0002]
	覆す:[0.0000,0.0000,0.0000,0.0000]
	システム:[0.0005,0.0008,0.0000,0.0002]
	的だ:[0.0040,0.0068,0.0016,0.0029]
	場合:[0.0062,0.0488,0.0053,0.0034]
	自身:[0.0001,0.0002,0.0000,0.0000]
	要因:[0.0005,0.0016,0.0005,0.0002]
	仮に:[0.0002,0.0000,0.0000,0.0000]
	達する:[0.0001,0.0000,0.0000,0.0000]
	理解:[0.0006,0.0004,0.0001,0.0000]
	込む:[0.0014,0.0008,0.0005,0.0009]
	要件:[0.0004,0.0005,0.0000,0.0000]
	自分:[0.0012,0.0017,0.0009,0.0020]
	範囲:[0.0064,0.0003,0.0001,0.0000]
	以前:[0.0000,0.0002,0.0000,0.0000]
	欲しい:[0.0002,0.0003,0.0000,0.0001]
	落とす:[0.0003,0.0001,0.0000,0.0003]
	必要だ:[0.0019,0.0032,0.0007,0.0029]
	変化:[0.0007,0.0004,0.0000,0.0004]
	伝える:[0.0007,0.0004,0.0003,0.0001]
	詳細だ:[0.0001,0.0006,0.0000,0.0012]
	実装:[0.0000,0.0000,0.0000,0.0002]
	超える:[0.0001,0.0002,0.0000,0.0004]
	過ぎる:[0.0004,0.0005,0.0002,0.0002]
	事項:[0.0005,0.0005,0.0002,0.0000]
	知る:[0.0009,0.0009,0.0008,0.0004]
	ユーザー:[0.0003,0.0000,0.0002,0.0000]
	明確だ:[0.0004,0.0001,0.0000,0.0000]
	通常:[0.0005,0.0004,0.0007,0.0004]
	決定:[0.0004,0.0003,0.0000,0.0003]
	人間:[0.0002,0.0001,0.0000,0.0001]
	複雑だ:[0.0003,0.0003,0.0000,0.0000]
True-Positive

Section:7
	Ｆｌａｇ：：００１０
	その結果、プロジェクトの実績を品質コスト工期（ＱＣＤ）の視点から評価した結果、コストと納期は比較的順守されているものの、品質に関しては計画値に達しないプロジェクトが２０％以上にのぼり、ＱＣＤをすべて達成したと評価するプロジェクトは６３％にとどまります。
Score:0.000468102912557
EACH_TAG_SCORE:
	image:2.33201581742e-05
	table:7.65000969649e-05
	graph:0.00029441304281
	flow:7.38696146086e-05
PARA:
Clueword:
	％:[0.0000,0.0005,0.0313,0.0000]
	コスト:[0.0000,0.0005,0.0004,0.0000]
	結果:[0.0005,0.0005,0.0013,0.0011]
	達成:[0.0000,0.0002,0.0005,0.0000]
	評価:[0.0000,0.0000,0.0001,0.0002]
	達する:[0.0001,0.0000,0.0000,0.0000]
	比較的:[0.0007,0.0061,0.0034,0.0000]
	工期:[0.0000,0.0000,0.0001,0.0000]
	プロジェクト:[0.0002,0.0006,0.0005,0.0000]
	実績:[0.0000,0.0001,0.0000,0.0000]
	以上:[0.0012,0.0013,0.0020,0.0008]
	品質:[0.0000,0.0001,0.0001,0.0000]
	計画:[0.0002,0.0003,0.0005,0.0079]
	関する:[0.0001,0.0002,0.0002,0.0001]
	視点:[0.0002,0.0000,0.0000,0.0000]
True-Positive

Section:13
	Ｆｌａｇ：：００１０
	統計・分析における開発現場の実態
	独立行政法人情報処理推進機構（ＩＰＡ）の統計（出典：『ソフトウェア開発データ白書２００８』）によると、実に９５％以上のプロジェクトがウォーターフォール型のライフサイクルで開発されています。
	恐らく、ウォーターフォール型のプロセスの方が誰にでも理解しやすいこと、改修案件の場合など前回のプロセスがウォーターフォール型であったため、今回も同じプロセスを採用するという心理が働いたりすることが原因ではないかと考えられます。
	次に、ユーザーの要求仕様に関して、３５％以上のプロジェクトは「あいまい」であり、３０％以上のプロジェクトで「ユーザー担当者の要求仕様への関与が不十分」という統計もあります。
	その結果、ＱＣＤをすべて達成したと評価するプロジェクトは全体の２／３程度で、残りは品質、コスト、工期のいずれかの項目が計画通りに達成できなかったというデータもあります。
	このように、３つに１つのプロジェクトは、ウォーターフォールの当初の計画通りに進んでないということになります。
	つまり、プロジェクトの初期段階で完全な計画を立てるのは非常に難しいことが分かります。
Score:0.000434539185963
EACH_TAG_SCORE:
	image:4.83891904782e-05
	table:0.000145350704551
	graph:0.000119847615715
	flow:0.000120951675219
PARA:
Clueword:
	分析:[0.0002,0.0007,0.0002,0.0003]
	今回:[0.0002,0.0002,0.0005,0.0003]
	非常だ:[0.0008,0.0008,0.0003,0.0000]
	完全だ:[0.0001,0.0000,0.0001,0.0000]
	コスト:[0.0000,0.0005,0.0004,0.0000]
	独立:[0.0001,0.0001,0.0000,0.0000]
	要求:[0.0002,0.0002,0.0002,0.0002]
	出典:[0.0000,0.0000,0.0003,0.0000]
	同じだ:[0.0014,0.0018,0.0010,0.0008]
	統計:[0.0000,0.0005,0.0018,0.0000]
	計画:[0.0002,0.0003,0.0005,0.0079]
	項目:[0.0002,0.0008,0.0001,0.0004]
	ユーザー:[0.0003,0.0000,0.0002,0.0000]
	当初:[0.0000,0.0002,0.0010,0.0003]
	法人:[0.0000,0.0001,0.0000,0.0000]
	案件:[0.0000,0.0002,0.0001,0.0001]
	処理:[0.0001,0.0004,0.0000,0.0041]
	情報:[0.0001,0.0010,0.0000,0.0004]
	初期:[0.0000,0.0001,0.0001,0.0015]
	分かる:[0.0003,0.0003,0.0002,0.0002]
	通り:[0.0003,0.0004,0.0003,0.0006]
	次に:[0.0003,0.0001,0.0001,0.0219]
	現場:[0.0000,0.0002,0.0003,0.0016]
	ソフトウェア:[0.0001,0.0001,0.0000,0.0000]
	不十分だ:[0.0000,0.0001,0.0001,0.0000]
	実態:[0.0000,0.0001,0.0001,0.0000]
	段階:[0.0002,0.0002,0.0001,0.0000]
	担当:[0.0002,0.0003,0.0004,0.0000]
	以上:[0.0012,0.0013,0.0020,0.0008]
	残る:[0.0003,0.0002,0.0006,0.0003]
	働く:[0.0005,0.0005,0.0002,0.0008]
	工期:[0.0000,0.0000,0.0001,0.0000]
	理解:[0.0006,0.0004,0.0001,0.0000]
	全体:[0.0012,0.0004,0.0005,0.0018]
	前回:[0.0000,0.0002,0.0004,0.0000]
	進む:[0.0001,0.0003,0.0004,0.0004]
	関与:[0.0000,0.0000,0.0001,0.0000]
	％:[0.0000,0.0005,0.0313,0.0000]
	採用:[0.0003,0.0001,0.0002,0.0000]
	ライフ:[0.0000,0.0001,0.0002,0.0000]
	心理:[0.0002,0.0000,0.0001,0.0000]
	結果:[0.0005,0.0005,0.0013,0.0011]
	場合:[0.0062,0.0488,0.0053,0.0034]
	開発:[0.0005,0.0013,0.0001,0.0003]
	立てる:[0.0002,0.0001,0.0006,0.0004]
	評価:[0.0000,0.0000,0.0001,0.0002]
	プロセス:[0.0002,0.0005,0.0003,0.0066]
	サイクル:[0.0012,0.0000,0.0013,0.0003]
	達成:[0.0000,0.0002,0.0005,0.0000]
	関する:[0.0001,0.0002,0.0002,0.0001]
	プロジェクト:[0.0002,0.0006,0.0005,0.0000]
	改修:[0.0000,0.0000,0.0003,0.0000]
	程度:[0.0013,0.0019,0.0022,0.0012]
	データ:[0.0004,0.0006,0.0001,0.0011]
	推進:[0.0000,0.0000,0.0000,0.0000]
	考える:[0.0017,0.0018,0.0009,0.0005]
	行政:[0.0001,0.0001,0.0001,0.0000]
	仕様:[0.0000,0.0004,0.0002,0.0000]
	恐らく:[0.0000,0.0000,0.0001,0.0000]
	品質:[0.0000,0.0001,0.0001,0.0000]
	ウォーターフォール:[0.0000,0.0003,0.0003,0.0002]
	難しい:[0.0007,0.0004,0.0002,0.0002]
	原因:[0.0012,0.0019,0.0009,0.0007]
True-Positive

Section:9
	Ｆｌａｇ：：１０００
	アジャイル開発プロセス
	アジャイル開発プロセスでは１つの開発サイクルを小さく（１サイクルの要求を小さく）し、開発の各サイクルをプロジェクトが完了するまで反復します。
	問題を細分化し、段階的に開発を進めていきます。
	アジャイルプロセスの中には、ＸＰ、アジャイル統一プロセス（ＲＵＰ）、ＳＣＲＵＭ等のさまざまな方法論があります。
Score:0.000408944676933
EACH_TAG_SCORE:
	image:7.67576831155e-05
	table:0.000101902631874
	graph:4.65137839798e-05
	flow:0.000183770577964
PARA:
Clueword:
	要求:[0.0002,0.0002,0.0002,0.0002]
	反復:[0.0001,0.0001,0.0000,0.0002]
	進める:[0.0000,0.0001,0.0002,0.0000]
	統一:[0.0000,0.0000,0.0000,0.0000]
	細分:[0.0001,0.0000,0.0000,0.0000]
	開発:[0.0005,0.0013,0.0001,0.0003]
	完了:[0.0003,0.0005,0.0000,0.0007]
	プロセス:[0.0002,0.0005,0.0003,0.0066]
	サイクル:[0.0012,0.0000,0.0013,0.0003]
	方法:[0.0026,0.0052,0.0002,0.0194]
	プロジェクト:[0.0002,0.0006,0.0005,0.0000]
	段階:[0.0002,0.0002,0.0001,0.0000]
	問題:[0.0011,0.0008,0.0004,0.0005]
	的だ:[0.0040,0.0068,0.0016,0.0029]
	小さい:[0.0021,0.0009,0.0032,0.0002]
	アジャイルだ:[0.0002,0.0002,0.0000,0.0002]
True-Positive

Section:3
	Ｆｌａｇ：：０１００
	ウォーターフォール開発プロセス
	ウォーターフォール開発プロセスとアジャイル開発プロセスの根本的な違いは、実行可能なソフトウエア（ビルド）を単位として開発を反復するか否かにあります。
Score:0.000379263206811
EACH_TAG_SCORE:
	image:7.64813946439e-05
	table:0.000131631005335
	graph:4.35444648919e-05
	flow:0.00012760634194
PARA:
Clueword:
	反復:[0.0001,0.0001,0.0000,0.0002]
	的だ:[0.0040,0.0068,0.0016,0.0029]
	開発:[0.0005,0.0013,0.0001,0.0003]
	ソフトウエア:[0.0000,0.0001,0.0000,0.0002]
	可能だ:[0.0008,0.0013,0.0011,0.0011]
	プロセス:[0.0002,0.0005,0.0003,0.0066]
	ビルド:[0.0000,0.0001,0.0000,0.0000]
	根本:[0.0002,0.0002,0.0000,0.0007]
	単位:[0.0005,0.0003,0.0000,0.0000]
	実行:[0.0000,0.0007,0.0001,0.0002]
	アジャイルだ:[0.0002,0.0002,0.0000,0.0002]
	違う:[0.0012,0.0015,0.0010,0.0004]
	ウォーターフォール:[0.0000,0.0003,0.0003,0.0002]
True-Positive

Section:4
	Ｆｌａｇ：：０００１
	ウォーターフォールプロセスは、従来のソフトウエア開発において最もポピュラーな開発プロセスであり、「要求分析」「設計」「実装」「テスト」「結合」を順序通りにこなしていきます。
	滝から水が落ちるように、前工程の成果物に基づき次の工程の作業を行い、前工程への手戻りを想定していません。
Score:0.00037832525368
EACH_TAG_SCORE:
	image:3.22182231951e-05
	table:7.20806140054e-05
	graph:4.03197113701e-05
	flow:0.00023370670511
PARA:
Clueword:
	分析:[0.0002,0.0007,0.0002,0.0003]
	要求:[0.0002,0.0002,0.0002,0.0002]
	開発:[0.0005,0.0013,0.0001,0.0003]
	従来:[0.0000,0.0001,0.0000,0.0003]
	順序:[0.0001,0.0000,0.0000,0.0074]
	ソフトウエア:[0.0000,0.0001,0.0000,0.0002]
	基づく:[0.0000,0.0002,0.0000,0.0003]
	成果:[0.0000,0.0001,0.0000,0.0003]
	最も:[0.0009,0.0042,0.0041,0.0002]
	プロセス:[0.0002,0.0005,0.0003,0.0066]
	落ちる:[0.0002,0.0001,0.0000,0.0002]
	想定:[0.0001,0.0001,0.0001,0.0002]
	行う:[0.0008,0.0010,0.0002,0.0035]
	通り:[0.0003,0.0004,0.0003,0.0006]
	テスト:[0.0000,0.0000,0.0000,0.0002]
	設計:[0.0001,0.0002,0.0000,0.0006]
	戻る:[0.0001,0.0001,0.0001,0.0003]
	ポピュラーだ:[0.0001,0.0001,0.0000,0.0002]
	実装:[0.0000,0.0000,0.0000,0.0002]
	次の:[0.0002,0.0008,0.0000,0.0022]
	工程:[0.0000,0.0000,0.0000,0.0064]
	結合:[0.0005,0.0004,0.0000,0.0025]
	作業:[0.0003,0.0002,0.0001,0.0017]
	ウォーターフォール:[0.0000,0.0003,0.0003,0.0002]
True-Positive

Section:2
	Ｆｌａｇ：：０１００
	開発手法は単純にウォーターフォールが悪い、アジャイルは良い、というものではなく、重要なのはプロジェクトを失敗させないことにあります。
	どのような開発手法においても、プロジェクトには必ずリスクが存在します。
	プロジェクト失敗の原因の多くは以下のようなものです。
	・スケジュールの欠陥―強気過ぎるスケジュールは悪。
	予実の乖離（かいり）を生み出す。
	・要求の増大（変更）―外的要因も影響し、時間の経過と共に要求は変わっていく。
	・人員の離脱―見積もりの時点で、メンバー離職の可能性は大抵考慮されていない。
	・仕様の崩壊―仕様はあいまいに作れるが、製品はあいまいに作れない。
	・生産性の低迷―少人数チームでは平均値のブレが大きい。
	能力がマイナスに振れるリスク
	これらのリスクが担保できるのであれば、開発プロセスがアジャイルでもウォーターフォールであっても構いません。
	それぞれのメリット・デメリットを検討した上、よりプロジェクトが成功しやすい開発プロセスを選択すべきです。
Score:0.000310573239187
EACH_TAG_SCORE:
	image:6.01893509956e-05
	table:0.000105030421552
	graph:8.24497564885e-05
	flow:6.29037101513e-05
PARA:
Clueword:
	大抵:[0.0000,0.0001,0.0000,0.0000]
	失敗:[0.0003,0.0002,0.0000,0.0005]
	欠陥:[0.0000,0.0001,0.0000,0.0000]
	重要だ:[0.0005,0.0010,0.0005,0.0000]
	要求:[0.0002,0.0002,0.0002,0.0002]
	離脱:[0.0001,0.0001,0.0001,0.0002]
	スケジュール:[0.0000,0.0002,0.0000,0.0000]
	生む:[0.0001,0.0002,0.0002,0.0002]
	増大:[0.0002,0.0001,0.0010,0.0000]
	存在:[0.0009,0.0006,0.0005,0.0007]
	考慮:[0.0002,0.0001,0.0000,0.0001]
	変更:[0.0001,0.0002,0.0000,0.0000]
	能力:[0.0001,0.0001,0.0001,0.0000]
	強気だ:[0.0000,0.0001,0.0000,0.0000]
	単純だ:[0.0001,0.0001,0.0002,0.0000]
	悪い:[0.0003,0.0008,0.0006,0.0002]
	出す:[0.0010,0.0010,0.0004,0.0009]
	作れる:[0.0000,0.0002,0.0000,0.0000]
	必ず:[0.0004,0.0003,0.0003,0.0005]
	検討:[0.0000,0.0001,0.0001,0.0000]
	チーム:[0.0001,0.0003,0.0001,0.0004]
	構う:[0.0000,0.0001,0.0000,0.0000]
	乖離:[0.0000,0.0001,0.0000,0.0000]
	以下:[0.0034,0.0013,0.0003,0.0018]
	少人数:[0.0000,0.0001,0.0000,0.0000]
	変わる:[0.0004,0.0007,0.0007,0.0005]
	共に:[0.0002,0.0001,0.0000,0.0001]
	人員:[0.0000,0.0001,0.0000,0.0000]
	多く:[0.0009,0.0007,0.0064,0.0001]
	メリット:[0.0003,0.0062,0.0000,0.0000]
	振れる:[0.0000,0.0001,0.0000,0.0000]
	メンバー:[0.0000,0.0004,0.0000,0.0001]
	的だ:[0.0040,0.0068,0.0016,0.0029]
	開発:[0.0005,0.0013,0.0001,0.0003]
	見積もる:[0.0000,0.0001,0.0000,0.0000]
	マイナスだ:[0.0003,0.0002,0.0000,0.0000]
	低迷:[0.0000,0.0001,0.0000,0.0000]
	経過:[0.0000,0.0001,0.0000,0.0017]
	成功:[0.0002,0.0002,0.0003,0.0002]
	デメリット:[0.0008,0.0061,0.0001,0.0000]
	大きい:[0.0025,0.0015,0.0035,0.0022]
	可能だ:[0.0008,0.0013,0.0011,0.0011]
	プロセス:[0.0002,0.0005,0.0003,0.0066]
	崩壊:[0.0001,0.0001,0.0000,0.0000]
	アジャイルだ:[0.0002,0.0002,0.0000,0.0002]
	生産:[0.0000,0.0002,0.0001,0.0000]
	プロジェクト:[0.0002,0.0006,0.0005,0.0000]
	ブレる:[0.0000,0.0001,0.0000,0.0000]
	要因:[0.0005,0.0016,0.0005,0.0002]
	良い:[0.0015,0.0018,0.0008,0.0014]
	担保:[0.0000,0.0001,0.0000,0.0000]
	時間:[0.0005,0.0014,0.0011,0.0005]
	製品:[0.0005,0.0001,0.0000,0.0004]
	平均:[0.0002,0.0019,0.0102,0.0000]
	過ぎる:[0.0004,0.0005,0.0002,0.0002]
	仕様:[0.0000,0.0004,0.0002,0.0000]
	ウォーターフォール:[0.0000,0.0003,0.0003,0.0002]
	影響:[0.0009,0.0005,0.0008,0.0007]
	離職:[0.0000,0.0001,0.0000,0.0000]
	選択:[0.0004,0.0006,0.0000,0.0012]
	手法:[0.0000,0.0001,0.0000,0.0000]
	リスク:[0.0005,0.0003,0.0000,0.0004]
	時点:[0.0001,0.0001,0.0022,0.0002]
	原因:[0.0012,0.0019,0.0009,0.0007]
True-Positive

Section:10
	Ｆｌａｇ：：０００１
	例えばＲＵＰにおいては、ただやみくもにサイクルを実行するのではなく、各サイクルを「方向付け」「推敲（すいこう）」「作成」「移行」という４つのフェーズに分類し、これらのフェーズを経てリリースにいたります。
	各フェーズは１つ以上の反復で構成されます。
	このように、短いスパンで成果物をリリースし、その都度評価を行うことにより、リスクを最小化しようとしたのがＲＵＰのアジャイルプロセスです。
Score:0.00030807874641
EACH_TAG_SCORE:
	image:7.71879116062e-05
	table:7.23612194962e-05
	graph:6.84077382903e-05
	flow:9.01218770174e-05
PARA:
Clueword:
	作成:[0.0004,0.0008,0.0000,0.0009]
	最小だ:[0.0000,0.0000,0.0000,0.0002]
	方向付ける:[0.0000,0.0000,0.0000,0.0002]
	評価:[0.0000,0.0000,0.0001,0.0002]
	行う:[0.0008,0.0010,0.0002,0.0035]
	フェーズ:[0.0000,0.0000,0.0000,0.0005]
	成果:[0.0000,0.0001,0.0000,0.0003]
	推敲:[0.0000,0.0000,0.0000,0.0002]
	構成:[0.0026,0.0012,0.0077,0.0004]
	プロセス:[0.0002,0.0005,0.0003,0.0066]
	サイクル:[0.0012,0.0000,0.0013,0.0003]
	リリース:[0.0000,0.0000,0.0000,0.0003]
	短い:[0.0001,0.0002,0.0015,0.0003]
	例えば:[0.0074,0.0011,0.0004,0.0004]
	反復:[0.0001,0.0001,0.0000,0.0002]
	分類:[0.0007,0.0069,0.0000,0.0014]
	実行:[0.0000,0.0007,0.0001,0.0002]
	スパン:[0.0000,0.0000,0.0000,0.0002]
	以上:[0.0012,0.0013,0.0020,0.0008]
	都度:[0.0000,0.0000,0.0000,0.0002]
	経る:[0.0000,0.0001,0.0001,0.0002]
	アジャイルだ:[0.0002,0.0002,0.0000,0.0002]
	リスク:[0.0005,0.0003,0.0000,0.0004]
	移行:[0.0000,0.0001,0.0001,0.0003]
True-Positive

Section:15
	Ｆｌａｇ：：００００
	アジャイルプロセスでは、プロジェクトの早い段階から「動くコード」を作成します。
	当然、機能はまったく足りないかもしれませんが、実装したところまでは動かすことができるコードになっているはずです。
	また、小さく作りこんでいくプロセスなので、サイクルごとにかじ取りの判断ができ、顧客からの要望が取り入れやすいのが特徴です。
	アジャイルプロセスの基本スタンスは、変化を受け入れることで、要求の変更が前提に考えられています。
	ＰｒｏｊｅｃｔＫｅｅｐｅｒ／ＳａｌｅｓＦｏｒｃｅＡｕｔｏｍａｔｉｏｎ＋の開発プロセス
	最初のバージョンの開発が始まってから約４年がたちましたが、当初はメンバー約２名で立ち上げました。
	自社製のＷｅｂシステム構築用のフレームワークがあったことや、受託開発でさまざまなシステムを構築した経験があったメンバーであったため２名で約６ヶ月の期間で開発を行うことはできました。
	当初はパッケージ開発におけるノウハウはほとんどなかったため、受託開発時に当時よく使っていたウォーターフォール手法を必然的に採用しました。
	しかし、パッケージ製品の開発においては延々と開発を継続していかなければならず、受託開発のように納品することで、開発が完了するわけではありません。
	製品は日々進化する必要があり、顧客からのフィードバックをスムーズに製品に取り入れていかなければ、製品の魅力を維持することができません。
	仕様変更、機能拡張がたびたび発生していく状況では、各機能間の整合性や品質を維持することが困難になり、開発プロセスをより仕様変更に強いアジャイル開発手法へスイッチすることで、柔軟な仕様変更、スピーディーな製品リリースを行うことができるようになりました。
	昨今では多種多様なシステムが身の回りに存在しています。
	さまざまなシステムを目にし、操作することで、古いシステムの操作性や機能へ不満を抱く機会も多くなるでしょう。
	このような顧客を常に満足させるためには、システムは常に進化していかなければならず、おのずと今後の開発手法の主流はアジャイルへと進んでいくのではないでしょうか？
Score:0.000205054191681
EACH_TAG_SCORE:
	image:4.3326994023e-05
	table:6.57014118966e-05
	graph:3.42081459184e-05
	flow:6.18176398432e-05
PARA:
Clueword:
	要求:[0.0002,0.0002,0.0002,0.0002]
	常に:[0.0002,0.0002,0.0001,0.0000]
	動かす:[0.0005,0.0002,0.0000,0.0021]
	当初:[0.0000,0.0002,0.0010,0.0003]
	満足:[0.0000,0.0000,0.0000,0.0024]
	リリース:[0.0000,0.0000,0.0000,0.0003]
	基本:[0.0006,0.0013,0.0003,0.0001]
	状況:[0.0004,0.0024,0.0005,0.0003]
	必要だ:[0.0019,0.0032,0.0007,0.0029]
	今後:[0.0001,0.0002,0.0019,0.0117]
	ヶ月:[0.0001,0.0001,0.0000,0.0002]
	日々:[0.0001,0.0002,0.0000,0.0000]
	アジャイルだ:[0.0002,0.0002,0.0000,0.0002]
	機会:[0.0000,0.0001,0.0002,0.0000]
	当時:[0.0000,0.0002,0.0000,0.0000]
	取り入れる:[0.0003,0.0001,0.0000,0.0003]
	多い:[0.0032,0.0042,0.0037,0.0009]
	システム:[0.0005,0.0008,0.0000,0.0002]
	進む:[0.0001,0.0003,0.0004,0.0004]
	機能:[0.0005,0.0009,0.0000,0.0000]
	受け入れる:[0.0000,0.0001,0.0000,0.0000]
	フレームワーク:[0.0001,0.0001,0.0000,0.0000]
	判断:[0.0009,0.0008,0.0000,0.0001]
	維持:[0.0002,0.0001,0.0028,0.0002]
	考える:[0.0017,0.0018,0.0009,0.0005]
	変化:[0.0007,0.0004,0.0000,0.0004]
	始まる:[0.0000,0.0003,0.0001,0.0023]
	メンバー:[0.0000,0.0004,0.0000,0.0001]
	品質:[0.0000,0.0001,0.0001,0.0000]
	的だ:[0.0040,0.0068,0.0016,0.0029]
	最初だ:[0.0004,0.0001,0.0000,0.0004]
	経験:[0.0002,0.0004,0.0002,0.0012]
	ウォーターフォール:[0.0000,0.0003,0.0003,0.0002]
	進化:[0.0001,0.0001,0.0000,0.0004]
	作成:[0.0004,0.0008,0.0000,0.0009]
	期間:[0.0002,0.0005,0.0048,0.0007]
	当然:[0.0001,0.0001,0.0000,0.0000]
	継続:[0.0000,0.0001,0.0001,0.0004]
	魅力:[0.0001,0.0005,0.0000,0.0000]
	操作:[0.0005,0.0003,0.0000,0.0008]
	完了:[0.0003,0.0005,0.0000,0.0007]
	存在:[0.0009,0.0006,0.0005,0.0007]
	変更:[0.0001,0.0002,0.0000,0.0000]
	バージョン:[0.0001,0.0001,0.0000,0.0000]
	困難だ:[0.0000,0.0001,0.0001,0.0002]
	早い:[0.0001,0.0001,0.0004,0.0002]
	スタンス:[0.0000,0.0001,0.0000,0.0000]
	拡張:[0.0000,0.0001,0.0000,0.0000]
	コード:[0.0002,0.0009,0.0000,0.0002]
	構築:[0.0000,0.0000,0.0000,0.0000]
	動く:[0.0012,0.0006,0.0005,0.0012]
	製品:[0.0005,0.0001,0.0000,0.0004]
	前提:[0.0001,0.0001,0.0000,0.0002]
	古い:[0.0002,0.0001,0.0000,0.0000]
	採用:[0.0003,0.0001,0.0002,0.0000]
	開発:[0.0005,0.0013,0.0001,0.0003]
	作る:[0.0015,0.0016,0.0002,0.0027]
	行う:[0.0008,0.0010,0.0002,0.0035]
	特徴:[0.0027,0.0136,0.0002,0.0000]
	足りる:[0.0000,0.0000,0.0000,0.0000]
	主流:[0.0011,0.0001,0.0010,0.0000]
	仕様:[0.0000,0.0004,0.0002,0.0000]
	プロセス:[0.0002,0.0005,0.0003,0.0066]
	サイクル:[0.0012,0.0000,0.0013,0.0003]
	プロジェクト:[0.0002,0.0006,0.0005,0.0000]
	強い:[0.0006,0.0008,0.0001,0.0000]
	顧客:[0.0000,0.0002,0.0001,0.0000]
	実装:[0.0000,0.0000,0.0000,0.0002]
	発生:[0.0010,0.0008,0.0009,0.0012]
	小さい:[0.0021,0.0009,0.0032,0.0002]
	段階:[0.0002,0.0002,0.0001,0.0000]
	手法:[0.0000,0.0001,0.0000,0.0000]
	身の回り:[0.0000,0.0000,0.0000,0.0001]
	使う:[0.0035,0.0040,0.0008,0.0014]
	立ち上げる:[0.0003,0.0001,0.0000,0.0009]
False-Positive

Section:11
	Ｆｌａｇ：：１０００
	アジャイルでは以下の要素すべてが成り立たない限り、コミュニケーションコストだけが増大してプロジェクトは崩壊します。
	・メンバー間の意思疎通
	・問題の理解
	・解決策の提案
Score:0.000193655346779
EACH_TAG_SCORE:
	image:8.27001631168e-05
	table:5.46883060649e-05
	graph:2.98078102028e-05
	flow:2.64590673947e-05
PARA:
Clueword:
	プロジェクト:[0.0002,0.0006,0.0005,0.0000]
	成り立つ:[0.0002,0.0000,0.0000,0.0000]
	疎通:[0.0000,0.0000,0.0000,0.0000]
	メンバー:[0.0000,0.0004,0.0000,0.0001]
	提案:[0.0001,0.0002,0.0000,0.0000]
	増大:[0.0002,0.0001,0.0010,0.0000]
	要素:[0.0006,0.0004,0.0000,0.0000]
	問題:[0.0011,0.0008,0.0004,0.0005]
	理解:[0.0006,0.0004,0.0001,0.0000]
	以下:[0.0034,0.0013,0.0003,0.0018]
	解決:[0.0005,0.0002,0.0002,0.0000]
	コスト:[0.0000,0.0005,0.0004,0.0000]
	意思:[0.0002,0.0000,0.0000,0.0000]
	アジャイルだ:[0.0002,0.0002,0.0000,0.0002]
	崩壊:[0.0001,0.0001,0.0000,0.0000]
	限り:[0.0002,0.0002,0.0001,0.0000]
	コミュニケーション:[0.0001,0.0000,0.0000,0.0000]
True-Positive

Section:8
	Ｆｌａｇ：：００００
	ウォーターフォールプロセスをうまくコントロールし、リスクを担保できるプロジェクトが少なかったという数値の裏付けが、この値から導き出されます。
	そこで、このプロセスの弱点を克服すべく登場したのが反復開発を軸とするアジャイルプロセスでした。
Score:0.000176501259051
EACH_TAG_SCORE:
	image:3.57500418309e-05
	table:4.12862837953e-05
	graph:2.55238402857e-05
	flow:7.39410931396e-05
PARA:
Clueword:
	登場:[0.0000,0.0001,0.0000,0.0008]
	反復:[0.0001,0.0001,0.0000,0.0002]
	開発:[0.0005,0.0013,0.0001,0.0003]
	克服:[0.0000,0.0001,0.0000,0.0000]
	プロセス:[0.0002,0.0005,0.0003,0.0066]
	出す:[0.0010,0.0010,0.0004,0.0009]
	プロジェクト:[0.0002,0.0006,0.0005,0.0000]
	少ない:[0.0017,0.0009,0.0017,0.0000]
	担保:[0.0000,0.0001,0.0000,0.0000]
	コントロール:[0.0002,0.0000,0.0000,0.0000]
	アジャイルだ:[0.0002,0.0002,0.0000,0.0002]
	リスク:[0.0005,0.0003,0.0000,0.0004]
	ウォーターフォール:[0.0000,0.0003,0.0003,0.0002]
False-Positive

Section:6
	Ｆｌａｇ：：００００
	ユーザーは出来上がったシステムを目の当たりにして初めて、自分たちが望んでいないものを理解します。
	また、市場は常に流動しており、提案時には最先端の製品であったにも関わらず、開発完了時には市場の期待に沿っているとは限りません。
	ビジネスは常に変化していくものです。
Score:0.000176427158139
EACH_TAG_SCORE:
	image:5.20237603062e-05
	table:5.60029726796e-05
	graph:2.16819892881e-05
	flow:4.67184358648e-05
PARA:
Clueword:
	システム:[0.0005,0.0008,0.0000,0.0002]
	ビジネス:[0.0008,0.0005,0.0000,0.0001]
	開発:[0.0005,0.0013,0.0001,0.0003]
	期待:[0.0002,0.0002,0.0003,0.0002]
	完了:[0.0003,0.0005,0.0000,0.0007]
	初めて:[0.0002,0.0001,0.0000,0.0000]
	市場:[0.0002,0.0002,0.0000,0.0010]
	理解:[0.0006,0.0004,0.0001,0.0000]
	沿う:[0.0000,0.0001,0.0001,0.0002]
	自分:[0.0012,0.0017,0.0009,0.0020]
	常に:[0.0002,0.0002,0.0001,0.0000]
	変化:[0.0007,0.0004,0.0000,0.0004]
	提案:[0.0001,0.0002,0.0000,0.0000]
	関わる:[0.0001,0.0001,0.0000,0.0000]
	出来る:[0.0005,0.0006,0.0002,0.0003]
	ユーザー:[0.0003,0.0000,0.0002,0.0000]
	望む:[0.0000,0.0001,0.0000,0.0000]
	製品:[0.0005,0.0001,0.0000,0.0004]
	目の当たり:[0.0001,0.0000,0.0000,0.0000]
	限る:[0.0002,0.0003,0.0004,0.0000]
	上がる:[0.0003,0.0003,0.0007,0.0008]
False-Positive

Section:1
	Ｆｌａｇ；；１０００
	さまざまな開発手法
	開発プロジェクトに内在するリスク
	アジャイルソフトウエア開発という言葉が生まれて約８年が経過しました。
	その間、従来型であるウォーターフォール開発プロセスと対比して、さまざまな議論が繰り返されてきたのはご存じの通りです。
	本連載では、代表的な開発手法の紹介および、弊社プロダクトであるＳＩＯＳＡｐｐｌｉｃａｔｉｏｎｓ（ＰｒｏｊｅｃｔＫｅｅｐｅｒ／ＳａｌｅｓＦｏｒｃｅＡｕｔｏｍａｔｉｏｎ＋）における事例を元に、その開発手法の選定に至るまでのプロセスを紹介します。
Score:0.00015378988282
EACH_TAG_SCORE:
	image:2.96044403053e-05
	table:5.6939616423e-05
	graph:1.30466842351e-05
	flow:5.41991418567e-05
PARA:
Clueword:
	議論:[0.0000,0.0001,0.0000,0.0000]
	至る:[0.0001,0.0002,0.0003,0.0000]
	代表:[0.0002,0.0004,0.0000,0.0000]
	的だ:[0.0040,0.0068,0.0016,0.0029]
	開発:[0.0005,0.0013,0.0001,0.0003]
	従来:[0.0000,0.0001,0.0000,0.0003]
	ソフトウエア:[0.0000,0.0001,0.0000,0.0002]
	紹介:[0.0006,0.0005,0.0000,0.0000]
	経過:[0.0000,0.0001,0.0000,0.0017]
	対比:[0.0000,0.0005,0.0000,0.0000]
	プロセス:[0.0002,0.0005,0.0003,0.0066]
	プロジェクト:[0.0002,0.0006,0.0005,0.0000]
	通り:[0.0003,0.0004,0.0003,0.0006]
	言葉:[0.0001,0.0004,0.0000,0.0000]
	繰り返す:[0.0003,0.0003,0.0000,0.0000]
	生まれる:[0.0000,0.0006,0.0000,0.0001]
	事例:[0.0002,0.0007,0.0000,0.0000]
	アジャイルだ:[0.0002,0.0002,0.0000,0.0002]
	手法:[0.0000,0.0001,0.0000,0.0000]
	リスク:[0.0005,0.0003,0.0000,0.0004]
	ウォーターフォール:[0.0000,0.0003,0.0003,0.0002]
	弊社:[0.0001,0.0001,0.0000,0.0002]
worng file


Section:12
	Ｆｌａｇ：：００００
	つまり、このプロセスはプロダクトオーナーに負担が掛かりやすいと言えます。
	開発者を用意してプロセスに乗せるだけで、希望したものができてくるということはありません。
	しかし、これは「アジャイルだから」という問題ではなく、アジャイルの本質を理解しないまま似非（えせ）アジャイルを実践することによる問題です。
	アジャイルプロセスの理解は、ウォーターフォールのそれよりもはるかに困難です。
Score:9.37293118574e-05
EACH_TAG_SCORE:
	image:2.0226114359e-05
	table:2.19359280603e-05
	graph:1.0073803132e-05
	flow:4.14934663062e-05
PARA:
Clueword:
	開発:[0.0005,0.0013,0.0001,0.0003]
	オーナー:[0.0000,0.0000,0.0002,0.0000]
	負担:[0.0000,0.0001,0.0000,0.0000]
	プロセス:[0.0002,0.0005,0.0003,0.0066]
	困難だ:[0.0000,0.0001,0.0001,0.0002]
	希望:[0.0002,0.0001,0.0000,0.0004]
	ウォーターフォール:[0.0000,0.0003,0.0003,0.0002]
	言える:[0.0003,0.0002,0.0004,0.0000]
	乗せる:[0.0000,0.0001,0.0000,0.0000]
	問題:[0.0011,0.0008,0.0004,0.0005]
	理解:[0.0006,0.0004,0.0001,0.0000]
	本質:[0.0001,0.0000,0.0000,0.0000]
	似る:[0.0005,0.0003,0.0002,0.0000]
	アジャイルだ:[0.0002,0.0002,0.0000,0.0002]
	用意:[0.0000,0.0003,0.0000,0.0000]
False-Positive

True-Negative:0
False-Positive:4
True-Positive:10
False-Negative:0
precision = 0.714286
recall = 1.000000
fvalue = 0.833333
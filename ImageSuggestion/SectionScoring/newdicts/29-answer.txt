In Section 4, Score:0.644684
Ｆｌａｇ：：０１００
１．Ｊａｖａとは
・どんな言語か
ここしばらくＴＩＯＢＥのランキングで１位を取っている有名言語。でも親会社はドナドナされた。
中間コードにコンパイルされＶＭ上で動作するので移植性が高く、Ｗｅｂ系や組込み系、Ａｎｄｒｏｉｄなど幅広い分野で利用されている。でも親会社はドナドナされた。
そんな言語も今ではプロプライエタリの申し子であるＯｒａｃｌｅさんの持ち物となり、今後どうなっていくかは今ひとつ不透明ドナ。
・長所
実行速度はＣに及ばないもののスクリプト言語よりは数十倍速い。ガベージコレクション付き言語の中では最速クラス。
下位互換とクロスプラットフォームが割としっかりしているので、一度コードを書けばそれが広い範囲で長期間利用できる。Ｊａｖａ１．４で書かれたライブラリが今でも普通にＪａｖａ６から呼ばれていたりするみたいな。
・短所
ＶＭを立ち上げるのに時間がかかるので、一瞬で終わる軽い処理を実行する場合はどの言語よりももっさりした動きになる。
名前空間とか、型の宣言とか、かなり厳密にやらないといけない。ダックタイピングなんてお行儀の悪いこともできない。ちゃんとインターフェース書きなさい、とな。
バグを防ぐという意味では厳密さはありがたくもあるけど、コード量は多くなるしディレクトリ構造は複雑になるので、コードを書く時はＩＤＥがないとやってられない。
paraword
list
  [Ｗｅｂ/うぇぶ?Ｗｅｂ/Ｗｅｂ+系/けい, 組/くみ+込み/こみv+系/けい, Ａｎｄｒｏｉｄ/アンドロイド?Ａｎｄｒｏｉｄ/Ａｎｄｒｏｉｄ]
to root
  [分野/ぶんや, 利用/りよう]
to reaf
  []
list
  [クロスプラットフォーム/クロスプラットフォーム, 下位/かい+互換/ごかん]
to root
  [する/する, 利用/りよう]
to reaf
  []
list
宣言/せんげん:型/かた?型/けい
名前/なまえ+空間/くうかん:
to root
  [やる/やる]
to reaf
  []
description : 下位/かい+互換/ごかん
	 : 軽い言語だと勝手に裏側でやってくれるようなメモリの確保とかファイルポインタの操作なんかも、Ｃでは自分で意識して書かないといけない。
description : 組/くみ+込み/こみv+系/けい
	 : 軽い言語だと勝手に裏側でやってくれるようなメモリの確保とかファイルポインタの操作なんかも、Ｃでは自分で意識して書かないといけない。
description : Ａｎｄｒｏｉｄ/アンドロイド?Ａｎｄｒｏｉｄ/Ａｎｄｒｏｉｄ
	 : 軽い言語だと勝手に裏側でやってくれるようなメモリの確保とかファイルポインタの操作なんかも、Ｃでは自分で意識して書かないといけない。
description : 宣言/せんげん
	 : 軽い言語だと勝手に裏側でやってくれるようなメモリの確保とかファイルポインタの操作なんかも、Ｃでは自分で意識して書かないといけない。
description : クロスプラットフォーム/クロスプラットフォーム
	 : 軽い言語だと勝手に裏側でやってくれるようなメモリの確保とかファイルポインタの操作なんかも、Ｃでは自分で意識して書かないといけない。
description : 名前/なまえ+空間/くうかん
	 : 軽い言語だと勝手に裏側でやってくれるようなメモリの確保とかファイルポインタの操作なんかも、Ｃでは自分で意識して書かないといけない。
description : Ｗｅｂ/うぇぶ?Ｗｅｂ/Ｗｅｂ+系/けい
	 : 軽い言語だと勝手に裏側でやってくれるようなメモリの確保とかファイルポインタの操作なんかも、Ｃでは自分で意識して書かないといけない。
description : 名前/なまえ+空間/くうかん
	 : もっと良い名前はなかったのだろうか。
clueword:
かなり, 処理, 期間, 今後, それ, 構造, 多い, 取る, 広い, 書く, 範囲, 短所, 高い, 終わる, でも, より, 数十, 最速, 下位, ランキング, 悪い, 軽い, 分野, 幅広い, ここ, 場合, 複雑だ, 時間, 長所, から
image : 0.1040393613
table : 0.35962339851
graph : 0.0873075872639
flow : 0.093713280105

In Section 14, Score:0.583426
Ｆｌａｇ：：０１００
６．Ｃ＃とは
・どんな言語か
ＣをインクリメントするとＣ＋＋になる。Ｃ＋＋をさらにインクリメントするとＣ＃になる。という名前の見た目からＣに近い系統なのかと誤解してしまいそうだけど、実際のＣ＃はＪａｖａのコピー。
いろんなところがＪａｖａと似ているので（中間コードに翻訳してＶＭで動くところとか、クラスの振る舞いとか）、Ｊａｖａを知っているプログラマはそんなに悩むことなく学習することができる。
・長所
ＷｉｎｄｏｗｓでＧＵＩアプリを作ろうと思った場合、けっこういいものが作れる。ＳｗｉｎｇほどＵＩ的に（お察しください）な状態にもならず、Ｃ＋＋で作るほどコーディングが（お察しください）な状態にもならない。
Ｊａｖａよりも後出しの言語である分、クロージャとか型推論とか、Ｊａｖａにはない便利な機能もちらほら付いている。
実行速度も速い。Ｗｉｎｄｏｗｓで動かす分にはＪａｖａより若干速かったはず。ＩＤＥもＶｉｓｕａｌＳｔｕｄｉｏという鉄板ソフトがある。
・短所
Ｍｏｎｏは頑張ってはいるけど、Ｌｉｎｕｘでの動作に関してはそれほど実績がない。現状ではＡｐｐｌｅ頼みのＯｂｊｅｃｔｉｖｅＣほどではないものの、Ｍｉｃｏｒｏｓｏｆｔ頼みの色が強い。
そのため、ＭＳコケたら使う場所がなくなったという現象が起こらないとも限らない。そう簡単にＭＳが転ぶとは思わないけど、例えばモバイル分野辺りで居場所が確保できるかは少し不透明。いい言語なんだけどね。
Ｊａｖａに似た言語ということで、記述するコードの量は軽量言語と比べると多め。
paraword
list
ところ/ところ:中間/ちゅうかん+コード/こーど,翻訳/ほんやく,ＶＭ/ＶＭ,動く/うごく
振る舞い/ふるまいv:クラス/くらす
to root
  [Ｊａｖａ/ジャバ?Ｊａｖａ/Ｊａｖａ, 知る/しる, プログラマ/プログラマ, 学習/がくしゅう]
to reaf
  []
list
型/かた?型/けい+推論/すいろん:Ｊａｖａ/ジャバ?Ｊａｖａ/Ｊａｖａ,後/あと,出し/だしv,言語/げんご
クロージャ/クロージャ:
機能/きのう:Ｊａｖａ/ジャバ?Ｊａｖａ/Ｊａｖａ,無い/ない,便利だ/べんりだ
分/ぶん:
to root
  [付く/つく]
to reaf
  [Ｊａｖａ/ジャバ?Ｊａｖａ/Ｊａｖａ, 後/あと, 出し/だしv, 言語/げんご]
description : Ｃ＃/Ｃ＃
	 : ６．Ｃ＃とは
description : Ｃ＋＋/Ｃ＋＋
	 : Ｃ＋＋をさらにインクリメントするとＣ＃になる。
description : Ｃ＃/Ｃ＃
	 : という名前の見た目からＣに近い系統なのかと誤解してしまいそうだけど、実際のＣ＃はＪａｖａのコピー。
description : 分/ぶん
	 : Ｗｉｎｄｏｗｓで動かす分にはＪａｖａより若干速かったはず。
description : 確保/かくほ
	 : そう簡単にＭＳが転ぶとは思わないけど、例えばモバイル分野辺りで居場所が確保できるかは少し不透明。
clueword:
より, 多い, 若干, 系統, 例えば, さらに, 見た目, 分野, 近い, 短所, 的だ, 場合, 作る, から, 比べる, 状態, ほど, その, 記述, 長所, 使う
image : 0.0719887717774
table : 0.399241051516
graph : 0.0683783458506
flow : 0.0438176615697

In Section 12, Score:0.482342
Ｆｌａｇ：：０１００
５．Ｐｙｔｈｏｎとは
・どんな言語か
彼の名はＰｙｔｈｏｎ（ニシキヘビ）。ライバル言語はＰｅｒｌ（改名前はＰｅａｒｌ＝真珠だった）とＲｕｂｙ（ルビー）。もっと良い名前はなかったのだろうか。
インデントを使ったブロックの表現と、プログラマがｓｅｌｆという文字をタイプする能力を格段に向上させる言語仕様が特徴的。
とてもお行儀が良い言語。ＰｅｒｌやＲｕｂｙがＴＭＴＯＷＴＤＩ（それをやる方法は幾通りも存在する）な言語であるのに対して、Ｐｙｔｈｏｎはやり方を１つだけ用意するようにしているところとかがお上品に見える。
・長所
簡潔で見やすいコードを書きやすい。書きあがったコードを見ると、なんというかどの言語よりもあっさりしているように感じる。
ＮｕｍＰｙとか数学系のライブラリがけっこう充実している。ＭＡＴＬＡＢの代わりに使う人もいるとか。
あとＧｏｏｇｌｅと仲良しで（Ｐｙｔｈｏｎの神様はＧｏｏｇｌｅで働いている）、ＧＡＥでも利用できたりする。
・短所
実行速度はやはりスクリプト言語らしい速度。
日本ではＰｙｔｈｏｎを使った仕事に出くわすことはあまり多くない。Ｗｅｂフレームワークはいくつか存在するけど、Ｗｅｂ系の仕事で見かけることもあまりない。
参考図書を選ぶ時にリアルなニシキヘビの絵を目にしないといけなかったり、利用している時にあまりかわいくない蛇のアイコンを目にしないといけなかったりすることがあるので、蛇嫌いな人は手を出しづらい言語。
paraword
list
表現/ひょうげん:インデント/インデント,使う/つかう,ブロック/ぶろっく
能力/のうりょく:ｓｅｌｆ/ｓｅｌｆ,言う/いう,プログラマ/プログラマ,文字/もじ,タイプ/たいぷ
to root
  [向上/こうじょう, 言語/げんご+仕様/しよう, 特徴/とくちょう+的だ/てきだ]
to reaf
  []
list
  [Ｐｅｒｌ/Ｐｅｒｌ, Ｒｕｂｙ/Ｒｕｂｙ]
to root
  [言語/げんご, 用意/ようい, ところ/ところ, 見える/みえる]
to reaf
  []
list
用意/ようい:Ｐｙｔｈｏｎ/パイソン?Ｐｙｔｈｏｎ/Ｐｙｔｈｏｎ,やり/やりv+方/かた,１/ひと+つ/つ
言語/げんご:Ｐｅｒｌ/Ｐｅｒｌ,それ/それ,やる/やる,ＴＭＴＯＷＴＤＩ/ＴＭＴＯＷＴＤＩ,方法/ほうほう,幾/いく+通り/とおり,Ｒｕｂｙ/Ｒｕｂｙ,存在/そんざい
to root
  [ところ/ところ, 見える/みえる]
to reaf
  []
list
  [数学/すうがく+系/けい, ＮｕｍＰｙ/ＮｕｍＰｙ]
to root
  [ライブラリー/らいぶらりー, 充実/じゅうじつ]
to reaf
  []
list
  [Ｇｏｏｇｌｅ/Ｇｏｏｇｌｅ, 仲良し/なかよし]
to root
  [利用/りよう]
to reaf
  []
description : 名前/なまえ+空間/くうかん
	 : もっと良い名前はなかったのだろうか。
description : Ｐｅｒｌ/Ｐｅｒｌ
	 : ＰｅｒｌやＲｕｂｙがＴＭＴＯＷＴＤＩ（それをやる方法は幾通りも存在する）な言語であるのに対して、Ｐｙｔｈｏｎはやり方を１つだけ用意するようにしているところとかがお上品に見える。
description : ＮｕｍＰｙ/ＮｕｍＰｙ
	 : ＮｕｍＰｙとか数学系のライブラリがけっこう充実している。
description : こと/こと
	 : 日本ではＰｙｔｈｏｎを使った仕事に出くわすことはあまり多くない。
description : 言語/げんご
	 : あなたがＡｐｐｌｅ信者であれば、他の言語には目も向けずＯｂｊｅｃｔｉｖｅ－Ｃを学びなさい。
description : Ｐｅｒｌ/Ｐｅｒｌ
	 : ８．Ｐｅｒｌとは
description : Ｒｕｂｙ/Ｒｕｂｙ
	 : ９．Ｒｕｂｙとは
description : 言語/げんご
	 : 言語の硬度を測定すると、Ｊａｖａは硬度８くらい、Ｐｙｔｈｏｎは６くらいになるのに対して、Ｒｕｂｙは３くらいになる。
description : Ｒｕｂｙ/Ｒｕｂｙ
	 : 言語の硬度を測定すると、Ｊａｖａは硬度８くらい、Ｐｙｔｈｏｎは６くらいになるのに対して、Ｒｕｂｙは３くらいになる。
description : 言語/げんご
	 : 言語のイメージはここを見ればだいたい分かってもらえると思う。
description : Ｒｕｂｙ/Ｒｕｂｙ
	 : Ｒｕｂｙを使っている人の中で、実行速度がもう少し速くならんものかなぁと思っている人は、今日からでもＳｃａｌａを始めた方がいい。
clueword:
より, 多い, 選ぶ, タイプ, あと, 方法, 通り, それ, ようだ, 特徴, 対する, 見える, 表現, 短所, やすい, 書く, 長所, 的だ, でも, 使う, 向上
image : 0.0949819771677
table : 0.277588923054
graph : 0.0391157929942
flow : 0.0706557519329

In Section 8, Score:0.454237
Ｆｌａｇ：：０１００
３．Ｃ＋＋とは
・どんな言語か
Ｃ言語にテンプレートとか、クラスとか、継承とか、多重継承とか、演算子のオーバーロードとか、デフォルト引数とか、その他いろんなパンドラの箱に入っていそうな仕様を取り付けることで出来上がった言語。
多くの仕様が加わることによって生み出されるコードは混沌としたが、最後には希望が残ったと言われているとかいないとか。
・長所
速度はＣと同じく音速。その上オブジェクト指向やらスマートポインタやら様々な機能が付加され、Ｂｏｏｓｔなんていう強力という言葉がよく似合うライブラリも使えるので、多彩なコードの書き方ができる。
ＣでできることはＣ＋＋でもすべてできるので、個人的にはＣ＋＋を使わずにＣを使うというシーンがあまり思い浮かばない。
・短所
スマートポインタがいるとはいえガベージコレクションはないのでメモリ管理はやはり面倒。
学習する際はＣ言語の基本を学んでからＣ＋＋に手を伸ばすような経路が一般的。つまり、ただでさえ学習コストが他の言語より高めなＣを学んで、さらにＣ＋＋の概念を学ばないといけない。使えるようになるまでかなり時間がかかる。
主観的な点数を付けると、ＰｙｔｈｏｎやＲｕｂｙの学習コストを１０として、Ｊａｖａを１５、Ｃを２０とすると、Ｃ＋＋の学習はコストが３０くらいかかるような感じ。
あと、大規模なプロジェクトだとビルドにけっこうな時間がかかるのが割とストレス。
paraword
list
テンプレート/テンプレート:
クラス/くらす:
継承/けいしょう:
多重/たじゅう+継承/けいしょう:
デフォルト/でふぉると+引数/ひきすう:演算/えんざん+子/こ?子/し,オーバー/おーばー?オーバーだ/おーばーだ+ロード/ろーど
to root
  [いろんな/いろんな, パンドラ/ぱんどら, 箱/はこ, 入る/はいる, 仕様/しよう, 取り付ける/とりつける, こと/こと, 出来る/できる, 言語/げんご]
to reaf
  []
list
  [オーバー/おーばー?オーバーだ/おーばーだ+ロード/ろーど, デフォルト/でふぉると+引数/ひきすう]
to root
  [いろんな/いろんな, パンドラ/ぱんどら, 箱/はこ, 入る/はいる, 仕様/しよう, 取り付ける/とりつける, こと/こと, 出来る/できる, 言語/げんご]
to reaf
  [テンプレート/テンプレート, クラス/くらす, 継承/けいしょう, 多重/たじゅう+継承/けいしょう, 演算/えんざん+子/こ?子/し]
list
  [Ｒｕｂｙ/Ｒｕｂｙ, Ｐｙｔｈｏｎ/パイソン?Ｐｙｔｈｏｎ/Ｐｙｔｈｏｎ]
to root
  [学習/がくしゅう+コスト/こすと, する/する, する/する, 感じ/かんじv]
to reaf
  []
list
２０/にぜろ:
１５/いちご:
to root
  [する/する, 感じ/かんじv]
to reaf
  [Ｊａｖａ/ジャバ?Ｊａｖａ/Ｊａｖａ]
description : 言語/げんご
	 : Ｃ言語にテンプレートとか、クラスとか、継承とか、多重継承とか、演算子のオーバーロードとか、デフォルト引数とか、その他いろんなパンドラの箱に入っていそうな仕様を取り付けることで出来上がった言語。
description : こと/こと
	 : ＣでできることはＣ＋＋でもすべてできるので、個人的にはＣ＋＋を使わずにＣを使うというシーンがあまり思い浮かばない。
description : Ｒｕｂｙ/Ｒｕｂｙ
	 : ＲｕｂｙやＰｙｔｈｏｎの求人よりも圧倒的に多い。
description : Ｒｕｂｙ/Ｒｕｂｙ
	 : ９．Ｒｕｂｙとは
description : Ｒｕｂｙ/Ｒｕｂｙ
	 : 言語の硬度を測定すると、Ｊａｖａは硬度８くらい、Ｐｙｔｈｏｎは６くらいになるのに対して、Ｒｕｂｙは３くらいになる。
description : Ｒｕｂｙ/Ｒｕｂｙ
	 : Ｒｕｂｙを使っている人の中で、実行速度がもう少し速くならんものかなぁと思っている人は、今日からでもＳｃａｌａを始めた方がいい。
clueword:
より, 同じだ, コスト, かなり, あと, 一般, 付ける, 言う, 点数, さらに, 長所, ようだ, 基本, 多く, 様々だ, 的だ, まで, から, その, その他, 短所, 最後だ, 高い, 伸ばす, 時間, シーン, すべて, でも, 使う, つまり
image : 0.0683987958258
table : 0.252622725861
graph : 0.0464920816717
flow : 0.0867238587174

In Section 10, Score:0.445358
Ｆｌａｇ：：０１００
４．ＰＨＰとは
・どんな言語か
正式名称は「ＰＨＰ：ＨｙｐｅｒｔｅｘｔＰｒｅｐｒｏｃｅｓｓｏｒ」（意訳：我はＨＴＭＬを生み出すために在る）。
ＪａｖａやＲｕｂｙがＷｅｂアプリでも使える汎用的な言語なのに対して、ＰＨＰはその名の通りＷｅｂアプリで使うことを目的として作られた男らしい言語。
スクリプトレットでＨＴＭＬの中にさらっとプログラムを書きこんで動的なページを作る目的で作られた。その後、あれも欲しいこれも欲しいと拡張を続けていったら、いつの間にかもっともらしい言語っぽくなっていた。こうした日々拡張を重ねる言語をハウルの動く城式言語と呼ぶ（今考えた）。
・長所
初心者がプログラムを学び始めてから動的なページが作れるようになるまでにかかる学習時間の短さは魅力的。コードの量も短い。環境設定も簡単。
多くの有料レンタルサーバはＰＨＰを使える環境を用意しているので、仕事じゃなく個人で使う用途でも活躍する機会が多い。
巷に出回っている求人の量が多いのも魅力。ＲｕｂｙやＰｙｔｈｏｎの求人よりも圧倒的に多い。但しＰＨＰを使える人の数も多いので仕事が取りやすいかどうかは別の話。
・短所
実行速度はスクリプト言語らしい速度。
Ｗｅｂアプリ以外の場所ではあまり利用されない。ので、Ｗｅｂ向け以外の用途で使うためのライブラリとかはそんなに多くない。
ＰＨＰしか使えないプログラマはＰＨＰｅｒと呼ばれて迫害される決まりになっている。
paraword
list
有る/ある:ＨＴＭＬ/ＨＴＭＬ,生む/うむ,意訳/いやく+我/われ,為/ため
ＰＨＰ/ＰＨＰ+ＨｙｐｅｒｔｅｘｔＰｒｅｐｒｏｃｅｓｓｏｒ/ＨｙｐｅｒｔｅｘｔＰｒｅｐｒｏｃｅｓｓｏｒ:正式/せいしきa+名称/めいしょう
to root
  []
to reaf
  []
list
  [Ｊａｖａ/ジャバ?Ｊａｖａ/Ｊａｖａ, Ｒｕｂｙ/Ｒｕｂｙ]
to root
  [言語/げんご, 対する/たいする, 言語/げんご]
to reaf
  []
list
あれ/あれ:
これ/これ:欲しい/ほしい
to root
  [欲しい/ほしい, 続ける/つづける, 言語/げんご]
to reaf
  []
list
  [Ｐｙｔｈｏｎ/パイソン?Ｐｙｔｈｏｎ/Ｐｙｔｈｏｎ, Ｒｕｂｙ/Ｒｕｂｙ]
to root
  [求人/きゅうじん, 多い/おおい]
to reaf
  []
description : ＰＨＰ/ＰＨＰ
	 : ４．ＰＨＰとは
description : ＰＨＰ/ＰＨＰ
	 : ＪａｖａやＲｕｂｙがＷｅｂアプリでも使える汎用的な言語なのに対して、ＰＨＰはその名の通りＷｅｂアプリで使うことを目的として作られた男らしい言語。
description : ＰＨＰ/ＰＨＰ+ＨｙｐｅｒｔｅｘｔＰｒｅｐｒｏｃｅｓｓｏｒ/ＨｙｐｅｒｔｅｘｔＰｒｅｐｒｏｃｅｓｓｏｒ
	 : ＪａｖａやＲｕｂｙがＷｅｂアプリでも使える汎用的な言語なのに対して、ＰＨＰはその名の通りＷｅｂアプリで使うことを目的として作られた男らしい言語。
description : Ｒｕｂｙ/Ｒｕｂｙ
	 : ＲｕｂｙやＰｙｔｈｏｎの求人よりも圧倒的に多い。
description : ＰＨＰ/ＰＨＰ
	 : ＰＨＰしか使えないプログラマはＰＨＰｅｒと呼ばれて迫害される決まりになっている。
description : これ/これ
	 : これからプログラムを学びたいという人で、Ｗｅｂ系を考えている人はとりあえずＰＨＰから始めると手っ取り早いかもしれない（もちろんその前にＨＴＭＬは覚えておく必要はある）。
description : これ/これ
	 : これから学ぶのであれば、まずどのバージョンを学ぶのかから考える必要がある。
description : Ｒｕｂｙ/Ｒｕｂｙ
	 : ９．Ｒｕｂｙとは
description : Ｒｕｂｙ/Ｒｕｂｙ
	 : ９．Ｒｕｂｙとは
description : Ｒｕｂｙ/Ｒｕｂｙ
	 : 言語の硬度を測定すると、Ｊａｖａは硬度８くらい、Ｐｙｔｈｏｎは６くらいになるのに対して、Ｒｕｂｙは３くらいになる。
description : Ｒｕｂｙ/Ｒｕｂｙ
	 : 言語の硬度を測定すると、Ｊａｖａは硬度８くらい、Ｐｙｔｈｏｎは６くらいになるのに対して、Ｒｕｂｙは３くらいになる。
description : Ｒｕｂｙ/Ｒｕｂｙ
	 : Ｒｕｂｙを使っている人の中で、実行速度がもう少し速くならんものかなぁと思っている人は、今日からでもＳｃａｌａを始めた方がいい。
description : Ｒｕｂｙ/Ｒｕｂｙ
	 : Ｒｕｂｙを使っている人の中で、実行速度がもう少し速くならんものかなぁと思っている人は、今日からでもＳｃａｌａを始めた方がいい。
clueword:
より, 多い, 通り, 用途, 回る, ようだ, 取る, 作る, まで, 短所, 書く, 多く, から, これ, その, 短い, 対する, あれ, 考える, やすい, 時間, 以外, その後, 長所, 的だ, でも, 使う
image : 0.0650225131883
table : 0.226655125983
graph : 0.0459358399524
flow : 0.107744154985

In Section 16, Score:0.382821
Ｆｌａｇ：：０１００
７．Ｏｂｊｅｃｔｉｖｅ－Ｃとは
・どんな言語か
名前の通り、Ｃにオブジェクト指向を組み込んだ言語。まさかこの言語が人気言語を扱う記事の中に登場するようになるとは、数年前までは予想もしていなかった。すいません、Ｄ言語より来ないだろうなんて思ってました。
スティーブ・ジョブズがＭａｃに戻る前あたりから使っているお気に入りの言語。人気が出た理由はひとえにｉＰｈｏｎｅ。ｉＰｈｏｎｅアプリを作るにはＯｂｊｅｃｔｉｖｅ－Ｃを使う必要があったことから利用者が急増していつの間にやらＴＯＰ１０に入るような言語になっていた。
なぜＣ＋＋じゃなくＯｂｊｅｃｔｉｖｅ－Ｃなのか。それはジョブズにしか分からない。
・長所
Ｃと互換性があるので、Ｃが使えるならＯｂｊｅｃｔｉｖｅ－Ｃを学習するのは割と簡単。もちろん実行速度も十分に高速。ｉＰｈｏｎｅのようなＣＰＵを使い過ぎると電池的に困るような端末はこういう言語が向いてるのかもしれない。
最近のＯｂｊｅｃｔｉｖｅ－Ｃはガベージコレクションも付いてるらしい（今知った）。何かと進歩してるのだなぁ。
・短所
使いこなすにはＣを知らないといけない。ということはＣ＋＋と同じく、学習コストはスクリプト言語とは比べものにならないくらい高くなる。記述するコードの量ももちろん多くなる。
Ａｐｐｌｅ以外の機器で利用されるケースはけして多くないので、もしＡｐｐｌｅが「Ｏｂｊｅｃｔｉｖｅ－Ｃ、やめました」と言ったら一気にマイナー言語に逆戻りすることも考えられる。
paraword
list
  [互換/ごかん+性/せい, ]
to root
  [有る/ある, 簡単だ/かんたんだ]
to reaf
  []
description : 
	 : Ｃと互換性があるので、Ｃが使えるならＯｂｊｅｃｔｉｖｅ－Ｃを学習するのは割と簡単。
description : 
	 : もちろん実行速度も十分に高速。
description : 
	 : ｉＰｈｏｎｅのようなＣＰＵを使い過ぎると電池的に困るような端末はこういう言語が向いてるのかもしれない。
description : 
	 : 最近のＯｂｊｅｃｔｉｖｅ－Ｃはガベージコレクションも付いてるらしい（今知った）。
description : 
	 : 何かと進歩してるのだなぁ。
description : 
	 : ・短所
description : 
	 : 使いこなすにはＣを知らないといけない。
description : 
	 : ということはＣ＋＋と同じく、学習コストはスクリプト言語とは比べものにならないくらい高くなる。
description : こと/こと
	 : ということはＣ＋＋と同じく、学習コストはスクリプト言語とは比べものにならないくらい高くなる。
description : 
	 : 記述するコードの量ももちろん多くなる。
description : 
	 : Ａｐｐｌｅ以外の機器で利用されるケースはけして多くないので、もしＡｐｐｌｅが「Ｏｂｊｅｃｔｉｖｅ－Ｃ、やめました」と言ったら一気にマイナー言語に逆戻りすることも考えられる。
description : 
	 : Ｆｌａｇ：：００００
description : 
	 : ・誰が学ぶべきか
description : 
	 : あなたがＡｐｐｌｅ信者であれば、他の言語には目も向けずＯｂｊｅｃｔｉｖｅ－Ｃを学びなさい。
description : 
	 : あなたがＭＳ信者であれば、Ｃ＃かＶＢを学びなさい。
description : 
	 : あなたがＧｏｏｇｌｅ信者であれば、Ｐｙｔｈｏｎかｇｏを学びなさい。
description : 
	 : あなたがＳｕｎ信者なら．．．．．．過去は忘れて新しい企業に入信しなさい。
description : 
	 : ＩＢＭあたりはどうでしょう？
description : 
	 : ｉＰｈｏｎｅアプリを作りたいのであれば、宗派に関係なくＯｂｊｅｃｔｉｖｅ－Ｃを学んでおけば良いと思われる。
description : 
	 : 逆にＡｎｄｒｏｉｄ派なら目を向けなくても良い言語。
description : 
	 : Ｆｌａｇ：：０１００
description : 
	 : ８．Ｐｅｒｌとは
description : 
	 : ・どんな言語か
description : 
	 : 古くからＣで書くほどでもないことをさらっと書きたい時に愛用されてきた歴史ある言語。
description : 
	 : 銃器で言えばコルト・ガバメントみたいなものだと言えば分りやすいのではないだろうか。
description : 
	 : つまりＣがトンプソンＭ１で、ＰｙｔｈｏｎはベレッタＭ９２くらいということだ。
description : 
	 : 十分に手に馴染んでいる銃器をあえて手放すほどの理由をベレッタに感じなければ、コルトを使い続けるのも良いのではないだろうか。
description : 
	 : ・長所
description : 
	 : 長く使われてきた分、いろんなモジュールが揃っている。
description : 
	 : あと、たいていの環境に入っているので、客先のサーバで作業をしないといけない時とかにも役に立つことがある。
description : 
	 : ＬｅａｒｎｉｎｇＰｅｒｌは読み物としても面白い。
description : 
	 : あとラクダの絵がかわいい。
description : 
	 : ・短所
description : 
	 : 実行速度はスクリプト言語らしい速度。
description : 
	 : 用途的にＰｙｔｈｏｎやＲｕｂｙと被るので、今あえてＰｅｒｌを取る理由というのが個人的には思い浮かばない。
description : 
	 : 生粋のＰｅｒｌ使いならきっと流暢な解答を用意してくれると思う。
description : 
	 : Ｆｌａｇ：：００００
description : 
	 : ・誰が学ぶべきか
description : 
	 : 職場で昔のＰｅｒｌのソースをメンテする必要に迫られるというシチュエーションはけっこうあるので、さらっと読める程度は学んでおいた方が良いかもしれない。
description : 
	 : これから学ぶのであれば、まずどのバージョンを学ぶのかから考える必要がある。
description : 
	 : 新しくＰｅｒｌ６（ＲａｋｕｄｏＳｔａｒ）が用意されつつあるけど、Ｐｅｒｌ５と比べるとだいぶ違う言語になっている。
description : 
	 : レガシーなＰｅｒｌを触る必要性を意識して学ぶならＰｅｒｌ５を、新しいＰｅｒｌってどんなものだろうと探究心から学ぶならＰｅｒｌ６を手にとれば良いんじゃないだろうか。
description : 
	 : Ｆｌａｇ：：０１００
description : 
	 : ９．Ｒｕｂｙとは
description : 
	 : ・どんな言語か
description : 
	 : 純粋オブジェクト指向でメタプロでＰｅｒｌとＬｉｓｐが結婚して隔世遺伝が黒魔術で生まれた言語。
description : 
	 : 主な出産地は島根県の県庁所在地、松江市。
description : 
	 : 小学校の頃に全県の県庁所在地を覚えるように言われた時、どうしても覚えられなかった松江市。
description : 
	 : ・長所
description : 
	 : 楽しくプログラミングができることを意識しているそうで、あまりプログラマを束縛するようなことはしない開放感溢れる言語仕様になっている。
description : 
	 : 作者が日本人なので、言語仕様に関するメーリングリストの議論も普通に日本語で行われている。
description : 
	 : 日本人にはその辺が取っつきやすい。
description : 
	 : Ｒａｉｌｓがけっこう便利。
description : 
	 : ・短所
description : 
	 : 実行速度はスクリプト言語らしい速度。
description : 
	 : ｅｎｄｅｎｄｅｎｄ．．．
description : 
	 : 行儀の悪い書き方をしてもあまり怒られない。
description : 
	 : ので、大人数で開発した時に「わるいプログラマＬＶ２６」が混ざっていると混沌としやすい。
description : 
	 : 目の届く範囲の少人数チームで使うのが正しい利用法なんじゃないだろうか。
description : 
	 : Ｆｌａｇ：：００００
description : 
	 : ・誰が学ぶべきか
description : 
	 : Ｐｙｔｈｏｎを学ぶか、Ｐｅｒｌを学ぶか、Ｒｕｂｙを学ぶか、と考えた時に、日本人だしＲｕｂｙに一番親近感が湧くなと思ったら手を出すと良いかも。
description : 
	 : Ｒａｉｌｓ系の仕事はポツポツあるので、周囲で最近そういう案件見かけるなぁと感じた人は学んでおくと仕事の足しになるかも。
description : 
	 : 言語の硬度を測定すると、Ｊａｖａは硬度８くらい、Ｐｙｔｈｏｎは６くらいになるのに対して、Ｒｕｂｙは３くらいになる。
description : 
	 : 柔らかい手触りが好きだなと思う人はＲｕｂｙを学ぶといいかも。
description : 
	 : Ｆｌａｇ：：０１００
description : 
	 : １０．ＪａｖａＳｃｒｉｐｔとは
description : 
	 : ・どんな言語か
description : 
	 : ブラウザ上で動く言語。
description : 
	 : 最近はｎｏｄｅ．ｊｓなんていうサーバサイドＪａｖａＳｃｒｉｐｔなんてものも出てきている。
description : 
	 : ブラウザの世界はどこの国土にも属さない紛争地域になっているので、そこで生息するＪａｖａＳｃｒｉｐｔは周囲からのいろんな要求を受け入れてファットになるか、何も受け入れずに「勝手にしろ」と開き直るかのどちらかを選択する必要があった。
description : 
	 : そこで彼は基本的なことだけをサポートした上で「あとはｊＱｕｅｒｙにでも言えよ。俺に言うな」というスタンスを取った。
description : 
	 : それで彼はあの激戦区の中にいてもハウルの城になることもなく、小さくシンプルなままの姿で居ることができている。
description : 
	 : ・長所
description : 
	 : ブラウザ紛争地域で勝者になるには速度を追い求める必要があることから、実行速度は「その辺のスクリプト言語よりもよほど速いんじゃない？」というベンチマークをたたき出すようになっている。
description : 
	 : ＪＩＴがトレーシングで最適化な感じで。
description : 
	 : ＪａｖａＳｃｒｉｐｔは軽量な言語だけど意外と何でもできる。
description : 
	 : オブジェクト指向だろうと、イベント指向だろうと、メタプロだろうと、関数型プログラミングだろうと、割と無理なく実現できる。
description : 
	 : ・短所
description : 
	 : メインはブラウザ上で動作する言語なので、用途は限られる。
description : 
	 : 間違っても巨大ファイルを操作してデータ処理をしようなんて用途に使うものではない。
description : 
	 : 一人前のＪａｖａＳｃｒｉｐｔ使いになるためには、ブラウザの違いに翻弄されて目を血走らせながら「ＩＥがぁ、ＩＥがあぁぁ」と叫ぶ儀式を通過しなければいけない。
description : 
	 : Ｆｌａｇ：：００００
description : 
	 : ・誰が学ぶべきか
description : 
	 : Ｗｅｂ業界で生きていくなら知っていないといけない言語。
description : 
	 : Ｗｅｂじゃない世界で生きていくなら知っていても役立つことが少ない言語。
description : 
	 : 手軽にＧＵＩでグリグリするものが書きたい、と思った時に実はＪａｖａＳｃｒｉｐｔを学ぶのが一番近道なんじゃないかと思ったりすることもある。
description : 
	 : できることに制限はあるけど短時間で動くものが作れる。
description : 
	 : レトロゲームを再現する程度のアニメーションもできる。
description : 
	 : Ｆｌａｇ：：０１００
description : 
	 : 番外．Ｓｃａｌａとは
description : 
	 : ・どんな言語か
description : 
	 : 最近私がハマっている関数型オブジェクト指向言語。
description : 
	 : コンパイルされるとＪａｖａと同じｃｌａｓｓファイルに変換され、ＪＶＭ上で動作する。
description : 
	 : 言語のイメージはここを見ればだいたい分かってもらえると思う。
description : 
	 : （ＵＲＬＳ）
description : 
	 : ・長所
description : 
	 : Ｊａｖａ並の実行速度とＲｕｂｙ並の書きやすさが合わさり最強に見える。
description : 
	 : Ｊａｖａの資産が使い放題で、Ｅｒｌａｎｇのような並列処理まで合わせ持つのでもう手に負えない。
description : 
	 : コードの量もその辺のスクリプト言語並に短くて済む。
description : 
	 : ・短所
description : 
	 : 覚えるのにけっこう時間がかかる。
description : 
	 : ＣやＣ＋＋ほどではないけどＪａｖａよりも難易度高め。
description : 
	 : Ｆｌａｇ：：００００
description : 
	 : ・誰が学ぶべきか
description : 
	 : 初心者がいきなり手を出すのは少し難しいかもしれない。
description : 
	 : まずはＪａｖａかＲｕｂｙに手を出し、その後Ｓｃａｌａにとりかかるのが良いと思われる。
description : 
	 : Ｊａｖａを使っている人は、老若男女問わず今日からでもＳｃａｌａを始めた方がいい。
description : 
	 : Ｒｕｂｙを使っている人の中で、実行速度がもう少し速くならんものかなぁと思っている人は、今日からでもＳｃａｌａを始めた方がいい。
description : 
	 : Ｐｙｔｈｏｎを使っている人は、Ｐｙｔｈｏｎの神様が微妙と言っていたようにちょっと言語の方向性が違うので、興味があるなら使ってみるくらいのスタンスで。
clueword:
コスト, あたり, より, 多い, なら, 言う, 通り, 記述, この, それ, 長所, 予想, ようだ, 以外, 同じだ, 的だ, 作る, まで, ケース, から, 短所, 向く, 考える, 高い, 最近, 過ぎる, 高速だ, 使う
image : 0.0494381688756
table : 0.200909329063
graph : 0.0568829474193
flow : 0.0755904714191

In Section 22, Score:0.375466
Ｆｌａｇ：：０１００
１０．ＪａｖａＳｃｒｉｐｔとは
・どんな言語か
ブラウザ上で動く言語。最近はｎｏｄｅ．ｊｓなんていうサーバサイドＪａｖａＳｃｒｉｐｔなんてものも出てきている。
ブラウザの世界はどこの国土にも属さない紛争地域になっているので、そこで生息するＪａｖａＳｃｒｉｐｔは周囲からのいろんな要求を受け入れてファットになるか、何も受け入れずに「勝手にしろ」と開き直るかのどちらかを選択する必要があった。
そこで彼は基本的なことだけをサポートした上で「あとはｊＱｕｅｒｙにでも言えよ。俺に言うな」というスタンスを取った。それで彼はあの激戦区の中にいてもハウルの城になることもなく、小さくシンプルなままの姿で居ることができている。
・長所
ブラウザ紛争地域で勝者になるには速度を追い求める必要があることから、実行速度は「その辺のスクリプト言語よりもよほど速いんじゃない？」というベンチマークをたたき出すようになっている。ＪＩＴがトレーシングで最適化な感じで。
ＪａｖａＳｃｒｉｐｔは軽量な言語だけど意外と何でもできる。オブジェクト指向だろうと、イベント指向だろうと、メタプロだろうと、関数型プログラミングだろうと、割と無理なく実現できる。
・短所
メインはブラウザ上で動作する言語なので、用途は限られる。間違っても巨大ファイルを操作してデータ処理をしようなんて用途に使うものではない。
一人前のＪａｖａＳｃｒｉｐｔ使いになるためには、ブラウザの違いに翻弄されて目を血走らせながら「ＩＥがぁ、ＩＥがあぁぁ」と叫ぶ儀式を通過しなければいけない。
paraword
list
  [関数/かんすう+型/かた?型/けい+プログラミング/ぷろぐらみんぐ, イベント/いべんと+指向/しこう, オブジェクト/おぶじぇくと+指向/しこう, メタプロ/メタプロ]
to root
  [実現/じつげん]
to reaf
  []
list
  [ＩＥ/ＩＥ, ぁ/ぁ]
to root
  [ああ/ああ, 叫ぶ/さけぶ, 儀式/ぎしき, 通過/つうか]
to reaf
  []
description : 
	 : Ｆｌａｇ：：０１００
description : 
	 : １０．ＪａｖａＳｃｒｉｐｔとは
description : 
	 : ・どんな言語か
description : 
	 : ブラウザ上で動く言語。
description : 
	 : 最近はｎｏｄｅ．ｊｓなんていうサーバサイドＪａｖａＳｃｒｉｐｔなんてものも出てきている。
description : 
	 : ブラウザの世界はどこの国土にも属さない紛争地域になっているので、そこで生息するＪａｖａＳｃｒｉｐｔは周囲からのいろんな要求を受け入れてファットになるか、何も受け入れずに「勝手にしろ」と開き直るかのどちらかを選択する必要があった。
description : 
	 : そこで彼は基本的なことだけをサポートした上で「あとはｊＱｕｅｒｙにでも言えよ。俺に言うな」というスタンスを取った。
description : 
	 : それで彼はあの激戦区の中にいてもハウルの城になることもなく、小さくシンプルなままの姿で居ることができている。
description : 
	 : ・長所
description : 
	 : ブラウザ紛争地域で勝者になるには速度を追い求める必要があることから、実行速度は「その辺のスクリプト言語よりもよほど速いんじゃない？」というベンチマークをたたき出すようになっている。
description : 
	 : ＪＩＴがトレーシングで最適化な感じで。
description : 
	 : ＪａｖａＳｃｒｉｐｔは軽量な言語だけど意外と何でもできる。
description : 
	 : オブジェクト指向だろうと、イベント指向だろうと、メタプロだろうと、関数型プログラミングだろうと、割と無理なく実現できる。
description : 
	 : ・短所
description : 
	 : メインはブラウザ上で動作する言語なので、用途は限られる。
description : 
	 : 間違っても巨大ファイルを操作してデータ処理をしようなんて用途に使うものではない。
description : 
	 : 一人前のＪａｖａＳｃｒｉｐｔ使いになるためには、ブラウザの違いに翻弄されて目を血走らせながら「ＩＥがぁ、ＩＥがあぁぁ」と叫ぶ儀式を通過しなければいけない。
clueword:
あと, 処理, 基本, 言う, それ, そこ, 取る, 短所, 最近, 的だ, でも, サイド, より, 用途, ようだ, 長所, 小さい, 使う, から
image : 0.0838261556943
table : 0.181473710306
graph : 0.0194597775275
flow : 0.0907061839747

In Section 24, Score:0.308388
Ｆｌａｇ：：０１００
番外．Ｓｃａｌａとは
・どんな言語か
最近私がハマっている関数型オブジェクト指向言語。コンパイルされるとＪａｖａと同じｃｌａｓｓファイルに変換され、ＪＶＭ上で動作する。
言語のイメージはここを見ればだいたい分かってもらえると思う。
（ＵＲＬＳ）
・長所
Ｊａｖａ並の実行速度とＲｕｂｙ並の書きやすさが合わさり最強に見える。Ｊａｖａの資産が使い放題で、Ｅｒｌａｎｇのような並列処理まで合わせ持つのでもう手に負えない。
コードの量もその辺のスクリプト言語並に短くて済む。
・短所
覚えるのにけっこう時間がかかる。ＣやＣ＋＋ほどではないけどＪａｖａよりも難易度高め。
paraword
list
書く/かく+さ/さ:Ｒｕｂｙ/Ｒｕｂｙ+並み/なみ
実行/じっこう+速度/そくど:Ｊａｖａ/ジャバ?Ｊａｖａ/Ｊａｖａ+並み/なみ
to root
  [合わさる/あわさる, 見える/みえる]
to reaf
  []
list
  [, Ｃ＋＋/Ｃ＋＋]
to root
  [難易/なんい+度/たび?度/ど+高/こう?高/たか]
to reaf
  []
description : 
	 : Ｆｌａｇ：：０１００
description : 
	 : 番外．Ｓｃａｌａとは
description : 
	 : ・どんな言語か
description : 
	 : 最近私がハマっている関数型オブジェクト指向言語。
description : 
	 : コンパイルされるとＪａｖａと同じｃｌａｓｓファイルに変換され、ＪＶＭ上で動作する。
description : 
	 : 言語のイメージはここを見ればだいたい分かってもらえると思う。
description : 言語/げんご
	 : 言語のイメージはここを見ればだいたい分かってもらえると思う。
description : 
	 : （ＵＲＬＳ）
description : 
	 : ・長所
description : 
	 : Ｊａｖａ並の実行速度とＲｕｂｙ並の書きやすさが合わさり最強に見える。
description : 
	 : Ｊａｖａの資産が使い放題で、Ｅｒｌａｎｇのような並列処理まで合わせ持つのでもう手に負えない。
description : 
	 : コードの量もその辺のスクリプト言語並に短くて済む。
description : 
	 : ・短所
description : 
	 : 覚えるのにけっこう時間がかかる。
description : 
	 : ＣやＣ＋＋ほどではないけどＪａｖａよりも難易度高め。
description : 
	 : Ｆｌａｇ：：００００
description : 
	 : ・誰が学ぶべきか
description : 
	 : 初心者がいきなり手を出すのは少し難しいかもしれない。
description : 
	 : まずはＪａｖａかＲｕｂｙに手を出し、その後Ｓｃａｌａにとりかかるのが良いと思われる。
description : 
	 : Ｊａｖａを使っている人は、老若男女問わず今日からでもＳｃａｌａを始めた方がいい。
description : 
	 : Ｒｕｂｙを使っている人の中で、実行速度がもう少し速くならんものかなぁと思っている人は、今日からでもＳｃａｌａを始めた方がいい。
description : 
	 : Ｐｙｔｈｏｎを使っている人は、Ｐｙｔｈｏｎの神様が微妙と言っていたようにちょっと言語の方向性が違うので、興味があるなら使ってみるくらいのスタンスで。
clueword:
同じだ, 難易, 処理, ここ, 長所, ようだ, より, まで, 書く, 見える, 短い, 短所, 最近, 時間, ほど, やすい
image : 0.0330412324536
table : 0.188347551102
graph : 0.0196606566534
flow : 0.0673382797897

In Section 6, Score:0.301344
Ｆｌａｇ：：０１００
２．Ｃ言語とは
・どんな言語か
世の中はＣでできている。ＷｉｎｄｏｗｓだってＬｉｎｕｘだってアメンボだって、みんなみんなＣでできている。
プログラミング言語だってＣでできている。ＰｙｔｈｏｎだってＲｕｂｙだってオケラだって、みんなＣでできている友達なんだ。
というように世の中の基板になるところを支えている言語。
・長所
有名な高級（？）言語の中では最速の実行速度を誇る。なのでスクリプト言語を利用している時に速度が出なくて困ったら、その部分をちょろっとＣで書き直すと平気で１００倍速になったりすることもある。
何十年も使われてきた歴史ある言語なので、周りにはＣで書かれたいろんな資産がある。学習する時に参考になる良いソースを探すのも楽。参考図書にも困らない。
・短所
ガベージコレクションがないのでメモリ管理を忘れた世代には使いづらい言語。コード量も軽量な言語と比べるとかなり多くなる。
自分で何かソフトを作ることになったとして、ピュアなＣでガリガリ書くというシチュエーションはあまり思い浮かばない。Ｃ＋＋を使うような気がする。
あと移植性が低い。たとえばＬｉｎｕｘで動いているコードをＷｉｎｄｏｗｓで動かそうと思ったら、いろいろ書き換えないといけないところが出てくる。＃ｉｆｄｅｆＷｉｎｄｏｗｓみたいな。
paraword
clueword:
最速, あと, 多い, ようだ, 比べる, 作る, 低い, 書く, その, 部分, 短所, たとえば, 長所, かなり, 使う
image : 0.0347405561995
table : 0.180515892488
graph : 0.0546396897062
flow : 0.0314474134607

In Section 5, Score:0.287549
Ｆｌａｇ：：００００
・誰が学ぶべきか
最近だと話題のＨａｄｏｏｐとかＣａｓｓａｎｄｒａとかがＪａｖａで書かれている。その辺りのソフトと親しくなりたい場合は覚えておくと良いかもしれない。
あとは企業で利用されているケースが目立つので、覚えておけば仕事を得る手助けになる。
けど、言語としてはだいぶ古いし、なんとか０ｘほどではないにしても新しいバージョンの仕様がなかなか決まらないし（クロージャ入れると言い始めてはや何年？）、モダンなものを求めてしまう人には向かないかもしれない。
paraword
list
  [Ｃａｓｓａｎｄｒａ/Ｃａｓｓａｎｄｒａ, Ｈａｄｏｏｐ/Ｈａｄｏｏｐ]
to root
  [書く/かく]
to reaf
  [話題/わだい]
list
もの/もの:モダンだ/もだんだ
何/なん+年/ねん:や/やa
to root
  [求める/もとめる, 人/じん?人/ひと, 向く/むく]
to reaf
  []
description : Ｈａｄｏｏｐ/Ｈａｄｏｏｐ
	 : 軽い言語だと勝手に裏側でやってくれるようなメモリの確保とかファイルポインタの操作なんかも、Ｃでは自分で意識して書かないといけない。
description : 何/なん+年/ねん
	 : 軽い言語だと勝手に裏側でやってくれるようなメモリの確保とかファイルポインタの操作なんかも、Ｃでは自分で意識して書かないといけない。
description : もの/もの
	 : 軽い言語だと勝手に裏側でやってくれるようなメモリの確保とかファイルポインタの操作なんかも、Ｃでは自分で意識して書かないといけない。
description : Ｃａｓｓａｎｄｒａ/Ｃａｓｓａｎｄｒａ
	 : 軽い言語だと勝手に裏側でやってくれるようなメモリの確保とかファイルポインタの操作なんかも、Ｃでは自分で意識して書かないといけない。
clueword:
あと, 場合, 言う, 書く, その, 向く, 最近, ほど, ケース
image : 0.0308860346057
table : 0.180930520592
graph : 0.0136082608592
flow : 0.0621239418304

In Section 18, Score:0.284743
Ｆｌａｇ：：０１００
８．Ｐｅｒｌとは
・どんな言語か
古くからＣで書くほどでもないことをさらっと書きたい時に愛用されてきた歴史ある言語。銃器で言えばコルト・ガバメントみたいなものだと言えば分りやすいのではないだろうか。つまりＣがトンプソンＭ１で、ＰｙｔｈｏｎはベレッタＭ９２くらいということだ。
十分に手に馴染んでいる銃器をあえて手放すほどの理由をベレッタに感じなければ、コルトを使い続けるのも良いのではないだろうか。
・長所
長く使われてきた分、いろんなモジュールが揃っている。あと、たいていの環境に入っているので、客先のサーバで作業をしないといけない時とかにも役に立つことがある。
ＬｅａｒｎｉｎｇＰｅｒｌは読み物としても面白い。あとラクダの絵がかわいい。
・短所
実行速度はスクリプト言語らしい速度。
用途的にＰｙｔｈｏｎやＲｕｂｙと被るので、今あえてＰｅｒｌを取る理由というのが個人的には思い浮かばない。生粋のＰｅｒｌ使いならきっと流暢な解答を用意してくれると思う。
paraword
list
ベレッタ/ベレッタ+９２/きゅうに:Ｐｙｔｈｏｎ/パイソン?Ｐｙｔｈｏｎ/Ｐｙｔｈｏｎ
トンプソン/トンプソン+１/いち:
to root
  [言う/いう]
to reaf
  [つまり/つまり]
list
モジュール/もじゅーる:いろんな/いろんな
分/ぶん:長い/ながい,使う/つかう
to root
  [揃う/そろう]
to reaf
  []
list
  [Ｒｕｂｙ/Ｒｕｂｙ, Ｐｙｔｈｏｎ/パイソン?Ｐｙｔｈｏｎ/Ｐｙｔｈｏｎ]
to root
  [被る/かぶる?被る/こうむる, 思い浮かぶ/おもいうかぶ]
to reaf
  []
description : 
	 : Ｆｌａｇ：：０１００
description : 
	 : ８．Ｐｅｒｌとは
description : Ｐｅｒｌ/Ｐｅｒｌ
	 : ８．Ｐｅｒｌとは
description : 
	 : ・どんな言語か
description : 
	 : 古くからＣで書くほどでもないことをさらっと書きたい時に愛用されてきた歴史ある言語。
description : 
	 : 銃器で言えばコルト・ガバメントみたいなものだと言えば分りやすいのではないだろうか。
description : 
	 : つまりＣがトンプソンＭ１で、ＰｙｔｈｏｎはベレッタＭ９２くらいということだ。
description : 
	 : 十分に手に馴染んでいる銃器をあえて手放すほどの理由をベレッタに感じなければ、コルトを使い続けるのも良いのではないだろうか。
description : 
	 : ・長所
description : 
	 : 長く使われてきた分、いろんなモジュールが揃っている。
description : 
	 : あと、たいていの環境に入っているので、客先のサーバで作業をしないといけない時とかにも役に立つことがある。
description : 
	 : ＬｅａｒｎｉｎｇＰｅｒｌは読み物としても面白い。
description : 
	 : あとラクダの絵がかわいい。
description : 
	 : ・短所
description : 
	 : 実行速度はスクリプト言語らしい速度。
description : 
	 : 用途的にＰｙｔｈｏｎやＲｕｂｙと被るので、今あえてＰｅｒｌを取る理由というのが個人的には思い浮かばない。
description : 
	 : 生粋のＰｅｒｌ使いならきっと流暢な解答を用意してくれると思う。
description : Ｒｕｂｙ/Ｒｕｂｙ
	 : ９．Ｒｕｂｙとは
description : Ｒｕｂｙ/Ｒｕｂｙ
	 : 言語の硬度を測定すると、Ｊａｖａは硬度８くらい、Ｐｙｔｈｏｎは６くらいになるのに対して、Ｒｕｂｙは３くらいになる。
description : Ｒｕｂｙ/Ｒｕｂｙ
	 : Ｒｕｂｙを使っている人の中で、実行速度がもう少し速くならんものかなぁと思っている人は、今日からでもＳｃａｌａを始めた方がいい。
clueword:
あと, なら, 言う, 的だ, 用途, 取る, 書く, 短所, ほど, 長い, 長所, やすい, 使う, たいてい, つまり
image : 0.0341323713004
table : 0.213202709287
graph : 0.0131037941679
flow : 0.024303849055

In Section 17, Score:0.262723
Ｆｌａｇ：：００００
・誰が学ぶべきか
あなたがＡｐｐｌｅ信者であれば、他の言語には目も向けずＯｂｊｅｃｔｉｖｅ－Ｃを学びなさい。
あなたがＭＳ信者であれば、Ｃ＃かＶＢを学びなさい。
あなたがＧｏｏｇｌｅ信者であれば、Ｐｙｔｈｏｎかｇｏを学びなさい。
あなたがＳｕｎ信者なら．．．．．．過去は忘れて新しい企業に入信しなさい。ＩＢＭあたりはどうでしょう？
ｉＰｈｏｎｅアプリを作りたいのであれば、宗派に関係なくＯｂｊｅｃｔｉｖｅ－Ｃを学んでおけば良いと思われる。逆にＡｎｄｒｏｉｄ派なら目を向けなくても良い言語。
paraword
description : 
	 : Ｆｌａｇ：：００００
description : 
	 : ・誰が学ぶべきか
description : 
	 : あなたがＡｐｐｌｅ信者であれば、他の言語には目も向けずＯｂｊｅｃｔｉｖｅ－Ｃを学びなさい。
description : 言語/げんご
	 : あなたがＡｐｐｌｅ信者であれば、他の言語には目も向けずＯｂｊｅｃｔｉｖｅ－Ｃを学びなさい。
description : 
	 : あなたがＭＳ信者であれば、Ｃ＃かＶＢを学びなさい。
description : 
	 : あなたがＧｏｏｇｌｅ信者であれば、Ｐｙｔｈｏｎかｇｏを学びなさい。
description : 
	 : あなたがＳｕｎ信者なら．．．．．．過去は忘れて新しい企業に入信しなさい。
description : 
	 : ＩＢＭあたりはどうでしょう？
description : 
	 : ｉＰｈｏｎｅアプリを作りたいのであれば、宗派に関係なくＯｂｊｅｃｔｉｖｅ－Ｃを学んでおけば良いと思われる。
description : 
	 : 逆にＡｎｄｒｏｉｄ派なら目を向けなくても良い言語。
clueword:
あたり, 作る, 関係, なら, 過去, 向ける, 逆だ
image : 0.0177889661858
table : 0.231516960292
graph : 0.00610169491521
flow : 0.00731509625126

In Section 20, Score:0.256805
Ｆｌａｇ：：０１００
９．Ｒｕｂｙとは
・どんな言語か
純粋オブジェクト指向でメタプロでＰｅｒｌとＬｉｓｐが結婚して隔世遺伝が黒魔術で生まれた言語。
主な出産地は島根県の県庁所在地、松江市。小学校の頃に全県の県庁所在地を覚えるように言われた時、どうしても覚えられなかった松江市。
・長所
楽しくプログラミングができることを意識しているそうで、あまりプログラマを束縛するようなことはしない開放感溢れる言語仕様になっている。
作者が日本人なので、言語仕様に関するメーリングリストの議論も普通に日本語で行われている。日本人にはその辺が取っつきやすい。
Ｒａｉｌｓがけっこう便利。
・短所
実行速度はスクリプト言語らしい速度。
ｅｎｄｅｎｄｅｎｄ．．．
行儀の悪い書き方をしてもあまり怒られない。ので、大人数で開発した時に「わるいプログラマＬＶ２６」が混ざっていると混沌としやすい。目の届く範囲の少人数チームで使うのが正しい利用法なんじゃないだろうか。
paraword
list
  [Ｐｅｒｌ/Ｐｅｒｌ, Ｌｉｓｐ/Ｌｉｓｐ]
to root
  [結婚/けっこん, 生まれる/うまれる, 言語/げんご]
to reaf
  []
list
  [松江/まつえ+市/し, 県庁/けんちょう+所在/しょざい+地/ち]
to root
  []
to reaf
  [主だ/おもだ, 出産/しゅっさん+地/ち, 島根/しまね+県/けん]
description : 
	 : Ｆｌａｇ：：０１００
description : 
	 : ９．Ｒｕｂｙとは
description : Ｒｕｂｙ/Ｒｕｂｙ
	 : ９．Ｒｕｂｙとは
description : 
	 : ・どんな言語か
description : 
	 : 純粋オブジェクト指向でメタプロでＰｅｒｌとＬｉｓｐが結婚して隔世遺伝が黒魔術で生まれた言語。
description : 
	 : 主な出産地は島根県の県庁所在地、松江市。
description : 
	 : 小学校の頃に全県の県庁所在地を覚えるように言われた時、どうしても覚えられなかった松江市。
description : 
	 : ・長所
description : 
	 : 楽しくプログラミングができることを意識しているそうで、あまりプログラマを束縛するようなことはしない開放感溢れる言語仕様になっている。
description : こと/こと
	 : 楽しくプログラミングができることを意識しているそうで、あまりプログラマを束縛するようなことはしない開放感溢れる言語仕様になっている。
description : 
	 : 作者が日本人なので、言語仕様に関するメーリングリストの議論も普通に日本語で行われている。
description : 
	 : 日本人にはその辺が取っつきやすい。
description : 
	 : Ｒａｉｌｓがけっこう便利。
description : 
	 : ・短所
description : 
	 : 実行速度はスクリプト言語らしい速度。
description : 
	 : ｅｎｄｅｎｄｅｎｄ．．．
description : 
	 : 行儀の悪い書き方をしてもあまり怒られない。
description : 
	 : ので、大人数で開発した時に「わるいプログラマＬＶ２６」が混ざっていると混沌としやすい。
description : 
	 : 目の届く範囲の少人数チームで使うのが正しい利用法なんじゃないだろうか。
clueword:
主だ, ようだ, 言う, 範囲, 短所, やすい, 長所, 使う, 悪い
image : 0.0784157164248
table : 0.168198514454
graph : 0.00763763880771
flow : 0.00255319148936

In Section 15, Score:0.233634
Ｆｌａｇ：：００００
・誰が学ぶべきか
ＭＳシンパな人、Ｗｉｎｄｏｗｓが大好きな人は、Ｃ＃を学ぶことが義務付けられている。
逆にＭＳを敵だと認識している人は、どんなことがあっても使ってはいけない。
Ｗｉｎｄｏｗｓで動くＧＵＩアプリを作りたい場合は、Ｃ＃から始めるのもアリなんじゃないかと思う。
paraword
list
人/じん?人/ひと:ＭＳ/ＭＳ+シンパ/しんぱ
人/じん?人/ひと:Ｗｉｎｄｏｗｓ/Ｗｉｎｄｏｗｓ,大好きだ/だいすきだ
to root
  [学ぶ/まなぶ, こと/こと, 義務付ける/ぎむづける]
to reaf
  []
clueword:
場合, 作る, 逆だ, 使う, から
image : 0.00684852250382
table : 0.183371169123
graph : 0.0125498287356
flow : 0.0308640219642

In Section 3, Score:0.210378
Ｆｌａｇ：：００００
ＶＢを落としている理由は、今年（２０１１年）はＪａｖａＳｃｒｉｐｔの年になりそうな予兆がちらほら見えることと、ＶＢの説明がＣ＃と若干被る部分があるので（ＭＳの話とか、ＭＳの話とか）、ネタ的な問題もあって入れ替えています。
一応、これを書いてる人間はＯｂｊｅｃｔｉｖｅ－Ｃ以外の９言語は仕事で使ったことがあります。Ｊａｖａ、ＪａｖａＳｃｒｉｐｔ、Ｒｕｂｙ、Ｐｙｔｈｏｎはけっこうガリガリ使ってます。Ｃ＃、Ｐｅｒｌはさらっとしか使ったことがないのであまり自信はないです。お察しください。
以上、前置きでした。では本編をどうぞ。
paraword
list
  [こと/こと, ＶＢ/ＶＢ]
to root
  [説明/せつめい, 有る/ある, 入れ替える/いれかえる]
to reaf
  [ＪａｖａＳｃｒｉｐｔ/ジャバスクリプト?ＪａｖａＳｃｒｉｐｔ/ＪａｖａＳｃｒｉｐｔ, 年/とし?年/ねん, 成る/なる?鳴る/なる, ２０１１/にぜろいちいち+年/ねん, 予兆/よちょう, チラホラ/ちらほら, 見える/みえる]
list
部分/ぶぶん:若干/じゃっかん,被る/かぶる?被る/こうむる
Ｃ＃/Ｃ＃:
to root
  [有る/ある, 入れ替える/いれかえる]
to reaf
  []
list
話/はなし:ＭＳ/ＭＳ
話/はなし:ＭＳ/ＭＳ
to root
  [問題/もんだい, 入れ替える/いれかえる]
to reaf
  []
list
  [Ｊａｖａ/ジャバ?Ｊａｖａ/Ｊａｖａ, ＪａｖａＳｃｒｉｐｔ/ジャバスクリプト?ＪａｖａＳｃｒｉｐｔ/ＪａｖａＳｃｒｉｐｔ, Ｐｙｔｈｏｎ/パイソン?Ｐｙｔｈｏｎ/Ｐｙｔｈｏｎ, Ｒｕｂｙ/Ｒｕｂｙ]
to root
  [使う/つかう]
to reaf
  []
list
  [Ｃ＃/Ｃ＃, Ｐｅｒｌ/Ｐｅｒｌ]
to root
  [使う/つかう, 無い/ない]
to reaf
  []
description : ＶＢ/ＶＢ
	 : ＶＢを落としている理由は、今年（２０１１年）はＪａｖａＳｃｒｉｐｔの年になりそうな予兆がちらほら見えることと、ＶＢの説明がＣ＃と若干被る部分があるので（ＭＳの話とか、ＭＳの話とか）、ネタ的な問題もあって入れ替えています。
description : Ｃ＃/Ｃ＃
	 : Ｃ＃、Ｐｅｒｌはさらっとしか使ったことがないのであまり自信はないです。
description : Ｐｅｒｌ/Ｐｅｒｌ
	 : Ｃ＃、Ｐｅｒｌはさらっとしか使ったことがないのであまり自信はないです。
description : Ｐｙｔｈｏｎ/パイソン?Ｐｙｔｈｏｎ/Ｐｙｔｈｏｎ
	 : 軽い言語だと勝手に裏側でやってくれるようなメモリの確保とかファイルポインタの操作なんかも、Ｃでは自分で意識して書かないといけない。
description : ＶＢ/ＶＢ
	 : 軽い言語だと勝手に裏側でやってくれるようなメモリの確保とかファイルポインタの操作なんかも、Ｃでは自分で意識して書かないといけない。
description : Ｐｅｒｌ/Ｐｅｒｌ
	 : 軽い言語だと勝手に裏側でやってくれるようなメモリの確保とかファイルポインタの操作なんかも、Ｃでは自分で意識して書かないといけない。
description : 話/はなし
	 : 軽い言語だと勝手に裏側でやってくれるようなメモリの確保とかファイルポインタの操作なんかも、Ｃでは自分で意識して書かないといけない。
description : 話/はなし
	 : 軽い言語だと勝手に裏側でやってくれるようなメモリの確保とかファイルポインタの操作なんかも、Ｃでは自分で意識して書かないといけない。
description : Ｃ＃/Ｃ＃
	 : 軽い言語だと勝手に裏側でやってくれるようなメモリの確保とかファイルポインタの操作なんかも、Ｃでは自分で意識して書かないといけない。
description : Ｃ＃/Ｃ＃
	 : 軽い言語だと勝手に裏側でやってくれるようなメモリの確保とかファイルポインタの操作なんかも、Ｃでは自分で意識して書かないといけない。
description : こと/こと
	 : 軽い言語だと勝手に裏側でやってくれるようなメモリの確保とかファイルポインタの操作なんかも、Ｃでは自分で意識して書かないといけない。
description : Ｊａｖａ/ジャバ?Ｊａｖａ/Ｊａｖａ
	 : 軽い言語だと勝手に裏側でやってくれるようなメモリの確保とかファイルポインタの操作なんかも、Ｃでは自分で意識して書かないといけない。
description : ＪａｖａＳｃｒｉｐｔ/ジャバスクリプト?ＪａｖａＳｃｒｉｐｔ/ＪａｖａＳｃｒｉｐｔ
	 : 軽い言語だと勝手に裏側でやってくれるようなメモリの確保とかファイルポインタの操作なんかも、Ｃでは自分で意識して書かないといけない。
description : 部分/ぶぶん
	 : 軽い言語だと勝手に裏側でやってくれるようなメモリの確保とかファイルポインタの操作なんかも、Ｃでは自分で意識して書かないといけない。
description : Ｒｕｂｙ/Ｒｕｂｙ
	 : 軽い言語だと勝手に裏側でやってくれるようなメモリの確保とかファイルポインタの操作なんかも、Ｃでは自分で意識して書かないといけない。
description : こと/こと
	 : ＣでできることはＣ＋＋でもすべてできるので、個人的にはＣ＋＋を使わずにＣを使うというシーンがあまり思い浮かばない。
description : こと/こと
	 : 悪いことは言わないので高尾山（ＰＨＰとかＪａｖａＳｃｒｉｐｔ）あたりから初めておこう。
description : こと/こと
	 : そういう良く呼び出され、速度が求められ、書き捨てられるようなコードではない系のソフトを作りたい人は甘えたことは言わずにＣ＋＋に手を出すのが良いかもしれない。
description : Ｒｕｂｙ/Ｒｕｂｙ
	 : ＲｕｂｙやＰｙｔｈｏｎの求人よりも圧倒的に多い。
description : Ｐｅｒｌ/Ｐｅｒｌ
	 : ＰｅｒｌやＲｕｂｙがＴＭＴＯＷＴＤＩ（それをやる方法は幾通りも存在する）な言語であるのに対して、Ｐｙｔｈｏｎはやり方を１つだけ用意するようにしているところとかがお上品に見える。
description : こと/こと
	 : 日本ではＰｙｔｈｏｎを使った仕事に出くわすことはあまり多くない。
description : Ｃ＃/Ｃ＃
	 : ６．Ｃ＃とは
description : Ｃ＃/Ｃ＃
	 : ６．Ｃ＃とは
description : Ｃ＃/Ｃ＃
	 : という名前の見た目からＣに近い系統なのかと誤解してしまいそうだけど、実際のＣ＃はＪａｖａのコピー。
description : Ｃ＃/Ｃ＃
	 : という名前の見た目からＣに近い系統なのかと誤解してしまいそうだけど、実際のＣ＃はＪａｖａのコピー。
description : こと/こと
	 : ということはＣ＋＋と同じく、学習コストはスクリプト言語とは比べものにならないくらい高くなる。
description : Ｐｅｒｌ/Ｐｅｒｌ
	 : ８．Ｐｅｒｌとは
description : Ｒｕｂｙ/Ｒｕｂｙ
	 : ９．Ｒｕｂｙとは
description : こと/こと
	 : 楽しくプログラミングができることを意識しているそうで、あまりプログラマを束縛するようなことはしない開放感溢れる言語仕様になっている。
description : Ｒｕｂｙ/Ｒｕｂｙ
	 : 言語の硬度を測定すると、Ｊａｖａは硬度８くらい、Ｐｙｔｈｏｎは６くらいになるのに対して、Ｒｕｂｙは３くらいになる。
description : Ｒｕｂｙ/Ｒｕｂｙ
	 : Ｒｕｂｙを使っている人の中で、実行速度がもう少し速くならんものかなぁと思っている人は、今日からでもＳｃａｌａを始めた方がいい。
clueword:
これ, 若干, 以上, 書く, 見える, 部分, 問題, 的だ, 使う, 以外
image : 0.110429209424
table : 0.0581946280744
graph : 0.0231708709623
flow : 0.0185837541719

In Section 1, Score:0.173871
Ｆｌａｇ：：００００
前書き
この世にはたくさんのプログラミング言語が存在します。Ｗｉｋｉｅｐｄｉａのプログラミング言語一覧を見ると、実に２００個以上というわけの分からない数の言語が並んでいたりします。
２００の中にはほとんど使われてない言語も混じってるので、実際に仕事でざくざく使われている言語は２０とか３０とかそういうオーダーなのですが、それでも１人の人間が把握するにはちょっと多過ぎる数です。
本記事では、そうした有り余るプログラミング言語の海の中で「どれを勉強したらいいの？」とか「どれを採用するのが適切？」という悩みをお持ちの方が「よし、この言語に決めた！」と自信を持って決断できるように背中を押すことを目的として書かれました。
無責任に背中をドンと押すことが目的なので、これを読めば正しい判断ができるかという点についてはノーコメントとさせていただきます。使ってみないと過ちには気付けないものさ。
０－２．人気ＴＯＰ１０言語の条件
paraword
list
２０/にぜろ:
３０/さんぜろ:
オーダー/おーだー:実際/じっさい,仕事/しごと,ざくざく/ざくざく,使う/つかう,言語/げんご,そういう/そういう
把握/はあく:そういう/そういう,１/ひと?１/いち+人/り?人/にん,それ/それ,人間/にんげん
to root
  [多い/おおい, 数/すう?数/かず]
to reaf
  [実際/じっさい, 仕事/しごと, ざくざく/ざくざく, 使う/つかう, 言語/げんご]
description : 把握/はあく
	 : ２００の中にはほとんど使われてない言語も混じってるので、実際に仕事でざくざく使われている言語は２０とか３０とかそういうオーダーなのですが、それでも１人の人間が把握するにはちょっと多過ぎる数です。
description : 把握/はあく
	 : 軽い言語だと勝手に裏側でやってくれるようなメモリの確保とかファイルポインタの操作なんかも、Ｃでは自分で意識して書かないといけない。
description : ２０/にぜろ
	 : 軽い言語だと勝手に裏側でやってくれるようなメモリの確保とかファイルポインタの操作なんかも、Ｃでは自分で意識して書かないといけない。
description : ３０/さんぜろ
	 : 軽い言語だと勝手に裏側でやってくれるようなメモリの確保とかファイルポインタの操作なんかも、Ｃでは自分で意識して書かないといけない。
description : オーダー/おーだー
	 : 軽い言語だと勝手に裏側でやってくれるようなメモリの確保とかファイルポインタの操作なんかも、Ｃでは自分で意識して書かないといけない。
clueword:
これ, 書く, 条件, 多い, この, それ, ほとんど, 以上, ようだ, 一覧, いただく, 付ける, 過ぎる, でも, 使う
image : 0.027925743091
table : 0.080602185203
graph : 0.0390993432932
flow : 0.02624332864

In Section 25, Score:0.165023
Ｆｌａｇ：：００００
・誰が学ぶべきか
初心者がいきなり手を出すのは少し難しいかもしれない。まずはＪａｖａかＲｕｂｙに手を出し、その後Ｓｃａｌａにとりかかるのが良いと思われる。
Ｊａｖａを使っている人は、老若男女問わず今日からでもＳｃａｌａを始めた方がいい。
Ｒｕｂｙを使っている人の中で、実行速度がもう少し速くならんものかなぁと思っている人は、今日からでもＳｃａｌａを始めた方がいい。
Ｐｙｔｈｏｎを使っている人は、Ｐｙｔｈｏｎの神様が微妙と言っていたようにちょっと言語の方向性が違うので、興味があるなら使ってみるくらいのスタンスで。
paraword
list
  [Ｒｕｂｙ/Ｒｕｂｙ, Ｊａｖａ/ジャバ?Ｊａｖａ/Ｊａｖａ]
to root
  [出す/だす, 取り掛かる/とりかかる, 良い/よい, 思う/おもう]
to reaf
  []
description : 
	 : Ｆｌａｇ：：００００
description : 
	 : ・誰が学ぶべきか
description : 
	 : 初心者がいきなり手を出すのは少し難しいかもしれない。
description : 
	 : まずはＪａｖａかＲｕｂｙに手を出し、その後Ｓｃａｌａにとりかかるのが良いと思われる。
description : 
	 : Ｊａｖａを使っている人は、老若男女問わず今日からでもＳｃａｌａを始めた方がいい。
description : 
	 : Ｒｕｂｙを使っている人の中で、実行速度がもう少し速くならんものかなぁと思っている人は、今日からでもＳｃａｌａを始めた方がいい。
description : Ｒｕｂｙ/Ｒｕｂｙ
	 : Ｒｕｂｙを使っている人の中で、実行速度がもう少し速くならんものかなぁと思っている人は、今日からでもＳｃａｌａを始めた方がいい。
description : 
	 : Ｐｙｔｈｏｎを使っている人は、Ｐｙｔｈｏｎの神様が微妙と言っていたようにちょっと言語の方向性が違うので、興味があるなら使ってみるくらいのスタンスで。
clueword:
まずは, ようだ, なら, から, 方向, その後, 言う, でも, 使う, 違う
image : 0.0274334765582
table : 0.0369846705273
graph : 0.00101694915254
flow : 0.0995880158371

In Section 19, Score:0.156410
Ｆｌａｇ：：００００
・誰が学ぶべきか
職場で昔のＰｅｒｌのソースをメンテする必要に迫られるというシチュエーションはけっこうあるので、さらっと読める程度は学んでおいた方が良いかもしれない。
これから学ぶのであれば、まずどのバージョンを学ぶのかから考える必要がある。新しくＰｅｒｌ６（ＲａｋｕｄｏＳｔａｒ）が用意されつつあるけど、Ｐｅｒｌ５と比べるとだいぶ違う言語になっている。
レガシーなＰｅｒｌを触る必要性を意識して学ぶならＰｅｒｌ５を、新しいＰｅｒｌってどんなものだろうと探究心から学ぶならＰｅｒｌ６を手にとれば良いんじゃないだろうか。
paraword
description : 
	 : Ｆｌａｇ：：００００
description : 
	 : ・誰が学ぶべきか
description : 
	 : 職場で昔のＰｅｒｌのソースをメンテする必要に迫られるというシチュエーションはけっこうあるので、さらっと読める程度は学んでおいた方が良いかもしれない。
description : 
	 : これから学ぶのであれば、まずどのバージョンを学ぶのかから考える必要がある。
description : これ/これ
	 : これから学ぶのであれば、まずどのバージョンを学ぶのかから考える必要がある。
description : 
	 : 新しくＰｅｒｌ６（ＲａｋｕｄｏＳｔａｒ）が用意されつつあるけど、Ｐｅｒｌ５と比べるとだいぶ違う言語になっている。
description : 
	 : レガシーなＰｅｒｌを触る必要性を意識して学ぶならＰｅｒｌ５を、新しいＰｅｒｌってどんなものだろうと探究心から学ぶならＰｅｒｌ６を手にとれば良いんじゃないだろうか。
clueword:
なら, まず, から, これ, 程度, 比べる, 考える, 違う
image : 0.00885605072371
table : 0.0449245256973
graph : 0.0241225478375
flow : 0.0785068693222

In Section 9, Score:0.114579
Ｆｌａｇ：：００００
・誰が学ぶべきか
間違っても「ちょっとプログラムというのを学んでみたい。Ｃ＋＋ってかっこよさそう」なんていう気持ちで手をつけてはいけない。「ちょっと登山を経験してみよっかな」と言ってチョモランマに登るようなものである。悪いことは言わないので高尾山（ＰＨＰとかＪａｖａＳｃｒｉｐｔ）あたりから初めておこう。
速くて省メモリな○○ライブラリというような触れ込みで公開されるライブラリはＣ＋＋で書かれていることが多い。たとえば去年（２０１０年）Ｇｏｏｇｌｅが公開したＲＥ２という速くて省メモリな正規表現ライブラリはＣ＋＋で書かれていた。
そういう良く呼び出され、速度が求められ、書き捨てられるようなコードではない系のソフトを作りたい人は甘えたことは言わずにＣ＋＋に手を出すのが良いかもしれない。
paraword
list
  [ＰＨＰ/ＰＨＰ, ＪａｖａＳｃｒｉｐｔ/ジャバスクリプト?ＪａｖａＳｃｒｉｐｔ/ＪａｖａＳｃｒｉｐｔ]
to root
  [初める/初める]
to reaf
  [高尾/たかお+山/さん?山/やま]
description : こと/こと
	 : 悪いことは言わないので高尾山（ＰＨＰとかＪａｖａＳｃｒｉｐｔ）あたりから初めておこう。
description : こと/こと
	 : そういう良く呼び出され、速度が求められ、書き捨てられるようなコードではない系のソフトを作りたい人は甘えたことは言わずにＣ＋＋に手を出すのが良いかもしれない。
description : ＰＨＰ/ＰＨＰ
	 : ４．ＰＨＰとは
description : ＰＨＰ/ＰＨＰ
	 : ＪａｖａやＲｕｂｙがＷｅｂアプリでも使える汎用的な言語なのに対して、ＰＨＰはその名の通りＷｅｂアプリで使うことを目的として作られた男らしい言語。
description : ＰＨＰ/ＰＨＰ
	 : ＰＨＰしか使えないプログラマはＰＨＰｅｒと呼ばれて迫害される決まりになっている。
clueword:
あたり, 多い, 言う, 悪い, ようだ, 作る, 書く, から, 表現, たとえば
image : 0.0426748784528
table : 0.0083323671237
graph : 0.0246878095582
flow : 0.0388835176995

In Section 11, Score:0.098392
Ｆｌａｇ：：００００
・誰が学ぶべきか
これからプログラムを学びたいという人で、Ｗｅｂ系を考えている人はとりあえずＰＨＰから始めると手っ取り早いかもしれない（もちろんその前にＨＴＭＬは覚えておく必要はある）。
逆にＷｅｂ系以外（データ処理、ＧＵＩプログラム等）に手を出したいと思っている人にとっては、検討する必要がまったくない言語である。
既にいくつか言語を学んだことがある人なら学習にそれほど手間取ることはないはずなので、必要になった時に学ぶくらいのスタンスで良いかもしれない。
paraword
list
  [データ/でーた+処理/しょり, ＧＵＩ/ＧＵＩ+プログラム/ぷろぐらむ]
to root
  [出す/だす, 思う/おもう, 人/じん?人/ひと, 取る/とる?執る/とる?捕る/とる?採る/とる?摂る/とる?撮る/とる?盗る/とる, 言語/げんご]
to reaf
  []
description : これ/これ
	 : これからプログラムを学びたいという人で、Ｗｅｂ系を考えている人はとりあえずＰＨＰから始めると手っ取り早いかもしれない（もちろんその前にＨＴＭＬは覚えておく必要はある）。
clueword:
処理, なら, これ, その, 以外, から, 考える, 逆だ
image : 0.0248767984976
table : 0.0268687136142
graph : 0.00485807637327
flow : 0.0417882016679

In Section 7, Score:0.078570
Ｆｌａｇ：：００００
・誰が学ぶべきか
軽い言語だと勝手に裏側でやってくれるようなメモリの確保とかファイルポインタの操作なんかも、Ｃでは自分で意識して書かないといけない。ので、一度触れておくとプログラムが裏側で何をしているかが意識できて良いかもしれない。
ＯＳや言語の細かい挙動を追いたいという願望が生まれた時に（たとえばＰＨＰのネットワーク関連の機能について、実際にこれは裏では何をしてるんだ、ということが知りたくなった時とか）、Ｃが読めると割とあっさり答えに辿りつけたりもする。
ガリガリ書けるようになる必要があるかは別として、とりあえず知っておいて損はない言語。
paraword
list
確保/かくほ:メモリー/めもりー
操作/そうさ:ファイル/ふぁいる+ポインター/ポインター
to root
  [書く/かく]
to reaf
  [裏/うら?裏/り, やる/やる]
list
  [言語/げんご, ＯＳ/ＯＳ]
to root
  [細かい/こまかい, 挙動/きょどう, 追う/おう, 言う/いう, 願望/がんぼう, 生まれる/うまれる, 時/とき, 読める/よめる, 辿り着ける/たどりつける]
to reaf
  []
description : 下位/かい+互換/ごかん
	 : 軽い言語だと勝手に裏側でやってくれるようなメモリの確保とかファイルポインタの操作なんかも、Ｃでは自分で意識して書かないといけない。
description : 組/くみ+込み/こみv+系/けい
	 : 軽い言語だと勝手に裏側でやってくれるようなメモリの確保とかファイルポインタの操作なんかも、Ｃでは自分で意識して書かないといけない。
description : Ｐｙｔｈｏｎ/パイソン?Ｐｙｔｈｏｎ/Ｐｙｔｈｏｎ
	 : 軽い言語だと勝手に裏側でやってくれるようなメモリの確保とかファイルポインタの操作なんかも、Ｃでは自分で意識して書かないといけない。
description : 把握/はあく
	 : 軽い言語だと勝手に裏側でやってくれるようなメモリの確保とかファイルポインタの操作なんかも、Ｃでは自分で意識して書かないといけない。
description : ＶＢ/ＶＢ
	 : 軽い言語だと勝手に裏側でやってくれるようなメモリの確保とかファイルポインタの操作なんかも、Ｃでは自分で意識して書かないといけない。
description : Ｐｅｒｌ/Ｐｅｒｌ
	 : 軽い言語だと勝手に裏側でやってくれるようなメモリの確保とかファイルポインタの操作なんかも、Ｃでは自分で意識して書かないといけない。
description : 話/はなし
	 : 軽い言語だと勝手に裏側でやってくれるようなメモリの確保とかファイルポインタの操作なんかも、Ｃでは自分で意識して書かないといけない。
description : 操作/そうさ
	 : 軽い言語だと勝手に裏側でやってくれるようなメモリの確保とかファイルポインタの操作なんかも、Ｃでは自分で意識して書かないといけない。
description : Ｈａｄｏｏｐ/Ｈａｄｏｏｐ
	 : 軽い言語だと勝手に裏側でやってくれるようなメモリの確保とかファイルポインタの操作なんかも、Ｃでは自分で意識して書かないといけない。
description : ２０/にぜろ
	 : 軽い言語だと勝手に裏側でやってくれるようなメモリの確保とかファイルポインタの操作なんかも、Ｃでは自分で意識して書かないといけない。
description : Ａｎｄｒｏｉｄ/アンドロイド?Ａｎｄｒｏｉｄ/Ａｎｄｒｏｉｄ
	 : 軽い言語だと勝手に裏側でやってくれるようなメモリの確保とかファイルポインタの操作なんかも、Ｃでは自分で意識して書かないといけない。
description : Ｃ＃/Ｃ＃
	 : 軽い言語だと勝手に裏側でやってくれるようなメモリの確保とかファイルポインタの操作なんかも、Ｃでは自分で意識して書かないといけない。
description : こと/こと
	 : 軽い言語だと勝手に裏側でやってくれるようなメモリの確保とかファイルポインタの操作なんかも、Ｃでは自分で意識して書かないといけない。
description : 宣言/せんげん
	 : 軽い言語だと勝手に裏側でやってくれるようなメモリの確保とかファイルポインタの操作なんかも、Ｃでは自分で意識して書かないといけない。
description : 何/なん+年/ねん
	 : 軽い言語だと勝手に裏側でやってくれるようなメモリの確保とかファイルポインタの操作なんかも、Ｃでは自分で意識して書かないといけない。
description : Ｊａｖａ/ジャバ?Ｊａｖａ/Ｊａｖａ
	 : 軽い言語だと勝手に裏側でやってくれるようなメモリの確保とかファイルポインタの操作なんかも、Ｃでは自分で意識して書かないといけない。
description : もの/もの
	 : 軽い言語だと勝手に裏側でやってくれるようなメモリの確保とかファイルポインタの操作なんかも、Ｃでは自分で意識して書かないといけない。
description : ＪａｖａＳｃｒｉｐｔ/ジャバスクリプト?ＪａｖａＳｃｒｉｐｔ/ＪａｖａＳｃｒｉｐｔ
	 : 軽い言語だと勝手に裏側でやってくれるようなメモリの確保とかファイルポインタの操作なんかも、Ｃでは自分で意識して書かないといけない。
description : クロスプラットフォーム/クロスプラットフォーム
	 : 軽い言語だと勝手に裏側でやってくれるようなメモリの確保とかファイルポインタの操作なんかも、Ｃでは自分で意識して書かないといけない。
description : 部分/ぶぶん
	 : 軽い言語だと勝手に裏側でやってくれるようなメモリの確保とかファイルポインタの操作なんかも、Ｃでは自分で意識して書かないといけない。
description : 名前/なまえ+空間/くうかん
	 : 軽い言語だと勝手に裏側でやってくれるようなメモリの確保とかファイルポインタの操作なんかも、Ｃでは自分で意識して書かないといけない。
description : 確保/かくほ
	 : 軽い言語だと勝手に裏側でやってくれるようなメモリの確保とかファイルポインタの操作なんかも、Ｃでは自分で意識して書かないといけない。
description : ３０/さんぜろ
	 : 軽い言語だと勝手に裏側でやってくれるようなメモリの確保とかファイルポインタの操作なんかも、Ｃでは自分で意識して書かないといけない。
description : Ｃａｓｓａｎｄｒａ/Ｃａｓｓａｎｄｒａ
	 : 軽い言語だと勝手に裏側でやってくれるようなメモリの確保とかファイルポインタの操作なんかも、Ｃでは自分で意識して書かないといけない。
description : Ｒｕｂｙ/Ｒｕｂｙ
	 : 軽い言語だと勝手に裏側でやってくれるようなメモリの確保とかファイルポインタの操作なんかも、Ｃでは自分で意識して書かないといけない。
description : Ｗｅｂ/うぇぶ?Ｗｅｂ/Ｗｅｂ+系/けい
	 : 軽い言語だと勝手に裏側でやってくれるようなメモリの確保とかファイルポインタの操作なんかも、Ｃでは自分で意識して書かないといけない。
description : オーダー/おーだー
	 : 軽い言語だと勝手に裏側でやってくれるようなメモリの確保とかファイルポインタの操作なんかも、Ｃでは自分で意識して書かないといけない。
description : ＯＳ/ＯＳ
	 : ＯＳや言語の細かい挙動を追いたいという願望が生まれた時に（たとえばＰＨＰのネットワーク関連の機能について、実際にこれは裏では何をしてるんだ、ということが知りたくなった時とか）、Ｃが読めると割とあっさり答えに辿りつけたりもする。
description : 言語/げんご
	 : Ｃ言語にテンプレートとか、クラスとか、継承とか、多重継承とか、演算子のオーバーロードとか、デフォルト引数とか、その他いろんなパンドラの箱に入っていそうな仕様を取り付けることで出来上がった言語。
description : 確保/かくほ
	 : そう簡単にＭＳが転ぶとは思わないけど、例えばモバイル分野辺りで居場所が確保できるかは少し不透明。
description : 言語/げんご
	 : あなたがＡｐｐｌｅ信者であれば、他の言語には目も向けずＯｂｊｅｃｔｉｖｅ－Ｃを学びなさい。
description : 言語/げんご
	 : 言語の硬度を測定すると、Ｊａｖａは硬度８くらい、Ｐｙｔｈｏｎは６くらいになるのに対して、Ｒｕｂｙは３くらいになる。
description : 言語/げんご
	 : 言語のイメージはここを見ればだいたい分かってもらえると思う。
clueword:
細かい, ようだ, 書く, たとえば, これ, 軽い
image : 0.040181637899
table : 0.0229311090813
graph : 0.00180722891566
flow : 0.0136496103016

In Section 13, Score:0.066917
Ｆｌａｇ：：００００
・誰が学ぶべきか
プログラミング言語は、ヘビー級（Ｃ＋＋やＪａｖａ）とライト級（ＰｙｔｈｏｎやＲｕｂｙ）を１つずつ覚えておくと、その場に応じて使い分けられるので何かと便利。
ライト級の言語を１つも習得してなくてどれにしようか迷っているなら、Ｐｙｔｈｏｎは１つの選択肢になる。
既にライト級の言語を覚えているなら、無理にＰｙｔｈｏｎに手を出す必要はあまりないかもしれない。
paraword
list
Ｃ＋＋/Ｃ＋＋:
Ｊａｖａ/ジャバ?Ｊａｖａ/Ｊａｖａ:ヘビー/ヘビー
Ｒｕｂｙ/Ｒｕｂｙ:ライト/らいと,Ｐｙｔｈｏｎ/パイソン?Ｐｙｔｈｏｎ/Ｐｙｔｈｏｎ
to root
  [覚える/おぼえる, 使い分ける/つかいわける, 便利だ/べんりだ]
to reaf
  [ヘビー/ヘビー]
list
  [Ｒｕｂｙ/Ｒｕｂｙ, Ｐｙｔｈｏｎ/パイソン?Ｐｙｔｈｏｎ/Ｐｙｔｈｏｎ]
to root
  [覚える/おぼえる, 使い分ける/つかいわける, 便利だ/べんりだ]
to reaf
  [ヘビー/ヘビー, Ｃ＋＋/Ｃ＋＋, Ｊａｖａ/ジャバ?Ｊａｖａ/Ｊａｖａ, ライト/らいと]
description : Ｃ＋＋/Ｃ＋＋
	 : Ｃ＋＋をさらにインクリメントするとＣ＃になる。
description : Ｒｕｂｙ/Ｒｕｂｙ
	 : ９．Ｒｕｂｙとは
description : Ｒｕｂｙ/Ｒｕｂｙ
	 : ９．Ｒｕｂｙとは
description : Ｒｕｂｙ/Ｒｕｂｙ
	 : 言語の硬度を測定すると、Ｊａｖａは硬度８くらい、Ｐｙｔｈｏｎは６くらいになるのに対して、Ｒｕｂｙは３くらいになる。
description : Ｒｕｂｙ/Ｒｕｂｙ
	 : 言語の硬度を測定すると、Ｊａｖａは硬度８くらい、Ｐｙｔｈｏｎは６くらいになるのに対して、Ｒｕｂｙは３くらいになる。
description : Ｒｕｂｙ/Ｒｕｂｙ
	 : Ｒｕｂｙを使っている人の中で、実行速度がもう少し速くならんものかなぁと思っている人は、今日からでもＳｃａｌａを始めた方がいい。
description : Ｒｕｂｙ/Ｒｕｂｙ
	 : Ｒｕｂｙを使っている人の中で、実行速度がもう少し速くならんものかなぁと思っている人は、今日からでもＳｃａｌａを始めた方がいい。
clueword:
ライト, その, なら, 使い分ける, ずつ
image : 0.0210290566004
table : 0.0365180789854
graph : 0.0
flow : 0.00936942365282

In Section 23, Score:0.062024
Ｆｌａｇ：：００００
・誰が学ぶべきか
Ｗｅｂ業界で生きていくなら知っていないといけない言語。Ｗｅｂじゃない世界で生きていくなら知っていても役立つことが少ない言語。
手軽にＧＵＩでグリグリするものが書きたい、と思った時に実はＪａｖａＳｃｒｉｐｔを学ぶのが一番近道なんじゃないかと思ったりすることもある。できることに制限はあるけど短時間で動くものが作れる。レトロゲームを再現する程度のアニメーションもできる。
paraword
description : 
	 : Ｆｌａｇ：：００００
description : 
	 : ・誰が学ぶべきか
description : 
	 : Ｗｅｂ業界で生きていくなら知っていないといけない言語。
description : 
	 : Ｗｅｂじゃない世界で生きていくなら知っていても役立つことが少ない言語。
description : 
	 : 手軽にＧＵＩでグリグリするものが書きたい、と思った時に実はＪａｖａＳｃｒｉｐｔを学ぶのが一番近道なんじゃないかと思ったりすることもある。
description : 
	 : できることに制限はあるけど短時間で動くものが作れる。
description : 
	 : レトロゲームを再現する程度のアニメーションもできる。
clueword:
程度, 書く, なら, 少ない, 時間, 一番
image : 0.0108515700311
table : 0.0122788752989
graph : 0.0253425676219
flow : 0.013551410629

In Section 21, Score:0.058500
Ｆｌａｇ：：００００
・誰が学ぶべきか
Ｐｙｔｈｏｎを学ぶか、Ｐｅｒｌを学ぶか、Ｒｕｂｙを学ぶか、と考えた時に、日本人だしＲｕｂｙに一番親近感が湧くなと思ったら手を出すと良いかも。
Ｒａｉｌｓ系の仕事はポツポツあるので、周囲で最近そういう案件見かけるなぁと感じた人は学んでおくと仕事の足しになるかも。
言語の硬度を測定すると、Ｊａｖａは硬度８くらい、Ｐｙｔｈｏｎは６くらいになるのに対して、Ｒｕｂｙは３くらいになる。柔らかい手触りが好きだなと思う人はＲｕｂｙを学ぶといいかも。
paraword
description : 
	 : Ｆｌａｇ：：００００
description : 
	 : ・誰が学ぶべきか
description : 
	 : Ｐｙｔｈｏｎを学ぶか、Ｐｅｒｌを学ぶか、Ｒｕｂｙを学ぶか、と考えた時に、日本人だしＲｕｂｙに一番親近感が湧くなと思ったら手を出すと良いかも。
description : 
	 : Ｒａｉｌｓ系の仕事はポツポツあるので、周囲で最近そういう案件見かけるなぁと感じた人は学んでおくと仕事の足しになるかも。
description : 
	 : 言語の硬度を測定すると、Ｊａｖａは硬度８くらい、Ｐｙｔｈｏｎは６くらいになるのに対して、Ｒｕｂｙは３くらいになる。
description : 言語/げんご
	 : 言語の硬度を測定すると、Ｊａｖａは硬度８くらい、Ｐｙｔｈｏｎは６くらいになるのに対して、Ｒｕｂｙは３くらいになる。
description : Ｒｕｂｙ/Ｒｕｂｙ
	 : 言語の硬度を測定すると、Ｊａｖａは硬度８くらい、Ｐｙｔｈｏｎは６くらいになるのに対して、Ｒｕｂｙは３くらいになる。
description : 
	 : 柔らかい手触りが好きだなと思う人はＲｕｂｙを学ぶといいかも。
clueword:
最近, 考える, 測定, 対する, 一番
image : 0.0
table : 0.0097442977321
graph : 0.0129728762195
flow : 0.0357829113484

In Section 2, Score:0.048634
Ｆｌａｇ：：０１００
２０１１年１月度のＴＩＯＢＥのランキング上位１０言語を基本とし、そこから７位のＶＢを排除して１１位のＪａｖａＳｃｒｉｐｔを格上げしています。
paraword
clueword:
基本, そこ, 上位, から, 格上げ, ランキング
image : 0.00521162510053
table : 0.00905327901153
graph : 0.00101694915254
flow : 0.0333525756943

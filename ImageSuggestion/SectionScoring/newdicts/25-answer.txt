In Section 4, Score:1.628906
Flag：：0100
コーディング規約の内容
コーディング規約の内容は、プロジェクトの規模や特性、参加メンバーのスキル、使用言語などにより変更すべきですが、たいていこんな内容が書かれています。
目的
プロジェクトの構成
命名規則
コーディングスタイル
禁止事項
制限事項
推奨事項
目的
そのコーディング規約の適用範囲、なぜ必要なのか、それを守ることによりどんなメリットがあるかを書く。
プロジェクトの構成
コーディングにはあまり関係なさそうな内容ですが、ソースプログラムの先頭にコメントを入れたりするのに使います。プロジェクトの名称などはあらかじめ決まっていることが多いので、もし、そうなら一覧表を付けます。メタ情報の指定方法、フォルダの構成方法なども決めておきます。
命名規則
変数、定数、メソッド（関数）、クラスなどの名前の付け方の基準を決める。変数名の先頭は小文字だとか、クラス名の先頭は大文字だとかがよく使われます。
コーディングスタイル
コーディングスタイルはインデントの仕方とか、中かっこの位置とか、コメントの位置や内容とかを決めておきます。
リソース
エラーメッセージなどはハードコーディングしないで、よくリソースファイルのインデックスを指定したりします。もし使うなら、リソースの使用についての説明、制限なども書いておきましょう。（あまり大きいリソースの管理はたいへんなのでバランスを考えたほうがいいです。特にIDEを使う場合。）
禁止事項
使ってはいけない文法や今はほとんど使われない保守用になっているものとかを揚げておきます。一律に禁止でなく、場合によっては例外も設けておきます。（なぜ禁止なのか、その理由も必ず書きます）
制限事項
あまり推奨されない機能、コーディング方法、クラスなどを揚げておきます。また、その条件を明示します。
推奨事項
好ましいコーディング方法や複数の似たようなクラスや関数などがある場合、どちらが推奨されるかを書いておきます。
paraword
list
特性/とくせい:
使用/しよう+言語/げんご:参加/さんか+メンバー/めんばー,スキル/すきる
規模/きぼ:
to root
  [よる/よる, 変更/へんこう, 書く/かく]
to reaf
  [プロジェクト/ぷろじぇくと]
list
  [使用/しよう+言語/げんご, スキル/すきる]
to root
  [よる/よる, 変更/へんこう, 書く/かく]
to reaf
  [規模/きぼ, プロジェクト/ぷろじぇくと, 特性/とくせい, 参加/さんか+メンバー/めんばー]
list
構成/こうせい+方法/ほうほう:フォルダ/ふぉるだ
指定/してい+方法/ほうほう:メタ情報/メタ情報
to root
  [決める/きめる]
to reaf
  []
list
  [定数/ていすう, メソッド/めそっど, 変数/へんすう]
to root
  [決める/きめる]
to reaf
  []
list
  [クラス/くらす, 関数/かんすう]
to root
  [名前/なまえ, 付け/つけv+方/かた, 基準/きじゅん, 決める/きめる]
to reaf
  []
list
小文字/こもじ:変数/へんすう+名/な?名/めい,先頭/せんとう
大文字/おおもじ:クラス/くらす+名/な?名/めい,先頭/せんとう
to root
  [使う/つかう]
to reaf
  []
list
位置/いち:インデント/インデント,中/ちゅう+括弧/かっこ?各戸/かっこ
内容/ないよう:中/ちゅう+括弧/かっこ?各戸/かっこ,コメント/こめんと,位置/いち
仕方/しかた:インデント/インデント
to root
  [決める/きめる]
to reaf
  []
list
  [位置/いち, 内容/ないよう]
to root
  [決める/きめる]
to reaf
  [インデント/インデント, 仕方/しかた, 中/ちゅう+括弧/かっこ?各戸/かっこ, 位置/いち, コメント/こめんと]
list
  [説明/せつめい, 制限/せいげん]
to root
  [書く/かく]
to reaf
  [リソース/リソース, 使用/しよう, つく/つく]
list
  [今/いま, 文法/ぶんぽう]
to root
  [揚げる/あげる]
to reaf
  [使う/つかう]
list
  [機能/きのう, コーディング/コーディング+方法/ほうほう, クラス/くらす]
to root
  [揚げる/あげる]
to reaf
  [余り/あまり, 推奨/すいしょう]
list
関数/かんすう:複数/ふくすう,似る/にる,クラス/くらす
コーディング/コーディング+方法/ほうほう:好ましい/このましい
to root
  [有る/ある, 場合/ばあい, 推奨/すいしょう, 書く/かく]
to reaf
  []
list
  [クラス/くらす, 関数/かんすう]
to root
  [有る/ある, 場合/ばあい, 推奨/すいしょう, 書く/かく]
to reaf
  [好ましい/このましい, 複数/ふくすう, コーディング/コーディング+方法/ほうほう, 似る/にる]
description : 変数/へんすう
	 : 変数、定数、メソッド（関数）、クラスなどの名前の付け方の基準を決める。
description : 変数/へんすう
	 : 変数名の先頭は小文字だとか、クラス名の先頭は大文字だとかがよく使われます。
description : 今/いま
	 : 使ってはいけない文法や今はほとんど使われない保守用になっているものとかを揚げておきます。
description : 制限/せいげん
	 : 制限事項
clueword:
内容, する, たいてい, ようだ, 事項, 構成, 使う, その, れる, 方法, ます, する, 場合, 構成, ます, ます, その, 方法, する, 書く, 内容, 書く, メリット, その, 内容, 方法, ます, 事項, いる, ほう, 位置, 位置, バランス, 場合, 付ける, 書く, なる, なら, 事項, ます, 基準, 内容, 使う, ます, ます, 大きい, 事項, れる, れる, ます, いる, それ, 内容, ます, する, ます, する, ます, れる, 使う, 書く, 事項, いる, よる, 範囲, 書く, 使う, 方法, する, 構成, れる, 多い, ます, よる, 場合, する, ほとんど, ます, よる, 使う, する, 使う, 考える, なら, 条件, 関係, ます, 事項, 一覧, 仕方
image : 0.226704171413
table : 0.862270662072
graph : 0.143910693807
flow : 0.396020405808

In Section 3, Score:0.380968
Flag：：0100
コーディング規約のメリット・デメリット
コーディング規約のメリットはプログラマの個性を殺して均質なプログラムを作ること、過去の知識や経験から得られたバグの発生源となりやすいコーディングの防止、インデントやコメントの基準を決めて見やすさ保守性の高さを求める・・・等々です。
一方、デメリットですが、使える文法を制限してスキルの高いプログラマの生産性を殺したり、過去のプログラムとの互換性を追求するあまり新しい機能の使用を制限したり・・・等々があります。
一般に、大きなプロジェクトほどコーディング規約の内容は強制的、制限的です。これは、大きなプロジェクトだと、スキルの低い人もメンバーに入っていることが多く、コーディングを自由にやらせると、品質が落ちたり、プログラムが見づらく保守性が悪くなるったりするためです。
paraword
list
  [知識/ちしき, 経験/けいけん]
to root
  [得る/える, バグ/バグ, 発生/はっせい+源/げん?源/みなもと, 成る/なる?鳴る/なる, コーディング/コーディング, 基準/きじゅん, 決める/きめる, 求める/もとめる+等/とう]
to reaf
  [過去/かこ]
list
防止/ぼうし:
基準/きじゅん:コメント/こめんと
インデント/インデント:
to root
  [決める/きめる, 求める/もとめる+等/とう]
to reaf
  [過去/かこ, 知識/ちしき, 経験/けいけん, 得る/える, バグ/バグ, 発生/はっせい+源/げん?源/みなもと, 成る/なる?鳴る/なる, コーディング/コーディング]
clueword:
過去, 大きな, ます, 基準, 内容, 発生, これ, やすい, 的だ, られる, 過去, 高い, 高い, 低い, 大きな, やる, 悪い, デメリット, 作る, する, メリット, ほど, 一方, する, 多い, いる, する, する, メリット, から, なる, 一般に, 的だ, デメリット
image : 0.0508373459981
table : 0.138969196738
graph : 0.0924167561747
flow : 0.0987446082998

In Section 2, Score:0.057595
Flag：：1000
内容は変数などの命名規則、禁止事項（例えばgoto文はダメとか）、コメントの付け方とか、いろいろプロジェクトの特性やその会社の文化などで変わります。
paraword
list
  [命名/めいめい+規則/きそく, 禁止/きんし+事項/じこう]
to root
  [駄目/だめa, コメント/こめんと, 付け/つけv+方/かた, 変わる/かわる]
to reaf
  [変数/へんすう]
list
特性/とくせい:プロジェクト/ぷろじぇくと
文化/ぶんか:その/その,会社/かいしゃ
to root
  [変わる/かわる]
to reaf
  []
clueword:
内容, ます, 例えば, その, 事項
image : 0.0223959105978
table : 0.0248886173519
graph : 0.0
flow : 0.0103104677994

In Section 5, Score:0.054265
Flag：：0000
コーディング規約を作るときの注意
続く．．
VB．NET版のサンプルを作ってみました
たたき台程度の内容ですが、参考になればと思います。
あと、用例も入れたほうがいいですね。
paraword
clueword:
作る, ます, とき, 程度, 続く, ほう, ます, なる, 内容, 作る, あと
image : 0.00814392686817
table : 0.00658798846049
graph : 0.00743215593081
flow : 0.0321006634194

In Section 1, Score:0.025749
Flag：：0000
コーディング規約とは
「コーディング規約」は多数のプログラマが参加するプロジェクトにおいて、プログラミング品質を均等にするために定める文書です。
paraword
clueword:
する, 文書, する
image : 0.00702531112036
table : 0.0
graph : 0.0
flow : 0.0187234042555

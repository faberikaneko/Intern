Ｆｌａｇ：：００００
・誰が学ぶべきか
ＭＳシンパな人、Ｗｉｎｄｏｗｓが大好きな人は、Ｃ＃を学ぶことが義務付けられている。
逆にＭＳを敵だと認識している人は、どんなことがあっても使ってはいけない。
Ｗｉｎｄｏｗｓで動くＧＵＩアプリを作りたい場合は、Ｃ＃から始めるのもアリなんじゃないかと思う。
image : 4.69076883823e-05
table : 0.00111898061043
graph : 8.59577310655e-05
flow : 0.000211397410714
BAD, pattern C

Ｆｌａｇ：：００００
・誰が学ぶべきか
最近だと話題のＨａｄｏｏｐとかＣａｓｓａｎｄｒａとかがＪａｖａで書かれている。その辺りのソフトと親しくなりたい場合は覚えておくと良いかもしれない。
あとは企業で利用されているケースが目立つので、覚えておけば仕事を得る手助けになる。
けど、言語としてはだいぶ古いし、なんとか０ｘほどではないにしても新しいバージョンの仕様がなかなか決まらないし（クロージャ入れると言い始めてはや何年？）、モダンなものを求めてしまう人には向かないかもしれない。
image : 4.55482619486e-05
table : 0.000673349458543
graph : 5.69383299548e-05
flow : 0.000259932811006
BAD, pattern C

Ｆｌａｇ：：０１００
１．Ｊａｖａとは
・どんな言語か
ここしばらくＴＩＯＢＥのランキングで１位を取っている有名言語。でも親会社はドナドナされた。
中間コードにコンパイルされＶＭ上で動作するので移植性が高く、Ｗｅｂ系や組込み系、Ａｎｄｒｏｉｄなど幅広い分野で利用されている。でも親会社はドナドナされた。
そんな言語も今ではプロプライエタリの申し子であるＯｒａｃｌｅさんの持ち物となり、今後どうなっていくかは今ひとつ不透明ドナ。
・長所
実行速度はＣに及ばないもののスクリプト言語よりは数十倍速い。ガベージコレクション付き言語の中では最速クラス。
下位互換とクロスプラットフォームが割としっかりしているので、一度コードを書けばそれが広い範囲で長期間利用できる。Ｊａｖａ１．４で書かれたライブラリが今でも普通にＪａｖａ６から呼ばれていたりするみたいな。
・短所
ＶＭを立ち上げるのに時間がかかるので、一瞬で終わる軽い処理を実行する場合はどの言語よりももっさりした動きになる。
名前空間とか、型の宣言とか、かなり厳密にやらないといけない。ダックタイピングなんてお行儀の悪いこともできない。ちゃんとインターフェース書きなさい、とな。
バグを防ぐという意味では厳密さはありがたくもあるけど、コード量は多くなるしディレクトリ構造は複雑になるので、コードを書く時はＩＤＥがないとやってられない。
image : 9.15921377974e-05
table : 0.000321395590694
graph : 0.000147978961464
flow : 0.000158836067975
BAD, pattern B

Ｆｌａｇ：：０１００
２０１１年１月度のＴＩＯＢＥのランキング上位１０言語を基本とし、そこから７位のＶＢを排除して１１位のＪａｖａＳｃｒｉｐｔを格上げしています。
image : 6.43410506238e-05
table : 0.000111768876686
graph : 1.25549278091e-05
flow : 0.000411760193757
BAD, pattern B

Ｆｌａｇ：：００００
・誰が学ぶべきか
職場で昔のＰｅｒｌのソースをメンテする必要に迫られるというシチュエーションはけっこうあるので、さらっと読める程度は学んでおいた方が良いかもしれない。
これから学ぶのであれば、まずどのバージョンを学ぶのかから考える必要がある。新しくＰｅｒｌ６（ＲａｋｕｄｏＳｔａｒ）が用意されつつあるけど、Ｐｅｒｌ５と比べるとだいぶ違う言語になっている。
レガシーなＰｅｒｌを触る必要性を意識して学ぶならＰｅｒｌ５を、新しいＰｅｒｌってどんなものだろうと探究心から学ぶならＰｅｒｌ６を手にとれば良いんじゃないだろうか。
image : 3.28001878656e-05
table : 0.000166387132212
graph : 8.93427697686e-05
flow : 0.000290766182675
no, pattern A

Ｆｌａｇ：：０１００
６．Ｃ＃とは
・どんな言語か
ＣをインクリメントするとＣ＋＋になる。Ｃ＋＋をさらにインクリメントするとＣ＃になる。という名前の見た目からＣに近い系統なのかと誤解してしまいそうだけど、実際のＣ＃はＪａｖａのコピー。
いろんなところがＪａｖａと似ているので（中間コードに翻訳してＶＭで動くところとか、クラスの振る舞いとか）、Ｊａｖａを知っているプログラマはそんなに悩むことなく学習することができる。
・長所
ＷｉｎｄｏｗｓでＧＵＩアプリを作ろうと思った場合、けっこういいものが作れる。ＳｗｉｎｇほどＵＩ的に（お察しください）な状態にもならず、Ｃ＋＋で作るほどコーディングが（お察しください）な状態にもならない。
Ｊａｖａよりも後出しの言語である分、クロージャとか型推論とか、Ｊａｖａにはない便利な機能もちらほら付いている。
実行速度も速い。Ｗｉｎｄｏｗｓで動かす分にはＪａｖａより若干速かったはず。ＩＤＥもＶｉｓｕａｌＳｔｕｄｉｏという鉄板ソフトがある。
・短所
Ｍｏｎｏは頑張ってはいるけど、Ｌｉｎｕｘでの動作に関してはそれほど実績がない。現状ではＡｐｐｌｅ頼みのＯｂｊｅｃｔｉｖｅＣほどではないものの、Ｍｉｃｏｒｏｓｏｆｔ頼みの色が強い。
そのため、ＭＳコケたら使う場所がなくなったという現象が起こらないとも限らない。そう簡単にＭＳが転ぶとは思わないけど、例えばモバイル分野辺りで居場所が確保できるかは少し不透明。いい言語なんだけどね。
Ｊａｖａに似た言語ということで、記述するコードの量は軽量言語と比べると多め。
image : 0.000107767622421
table : 0.000283294987299
graph : 0.00010236279319
flow : 6.55953017511e-05
BAD, pattern B

Ｆｌａｇ：：００００
・誰が学ぶべきか
初心者がいきなり手を出すのは少し難しいかもしれない。まずはＪａｖａかＲｕｂｙに手を出し、その後Ｓｃａｌａにとりかかるのが良いと思われる。
Ｊａｖａを使っている人は、老若男女問わず今日からでもＳｃａｌａを始めた方がいい。
Ｒｕｂｙを使っている人の中で、実行速度がもう少し速くならんものかなぁと思っている人は、今日からでもＳｃａｌａを始めた方がいい。
Ｐｙｔｈｏｎを使っている人は、Ｐｙｔｈｏｎの神様が微妙と言っていたようにちょっと言語の方向性が違うので、興味があるなら使ってみるくらいのスタンスで。
image : 2.77368528292e-05
table : 0.000138002501967
graph : 3.79458639006e-06
flow : 0.000371597074019
no, pattern A

Ｆｌａｇ：：０１００
番外．Ｓｃａｌａとは
・どんな言語か
最近私がハマっている関数型オブジェクト指向言語。コンパイルされるとＪａｖａと同じｃｌａｓｓファイルに変換され、ＪＶＭ上で動作する。
言語のイメージはここを見ればだいたい分かってもらえると思う。
（ＵＲＬＳ）
・長所
Ｊａｖａ並の実行速度とＲｕｂｙ並の書きやすさが合わさり最強に見える。Ｊａｖａの資産が使い放題で、Ｅｒｌａｎｇのような並列処理まで合わせ持つのでもう手に負えない。
コードの量もその辺のスクリプト言語並に短くて済む。
・短所
覚えるのにけっこう時間がかかる。ＣやＣ＋＋ほどではないけどＪａｖａよりも難易度高め。
image : 4.48152317991e-05
table : 6.30500037858e-05
graph : 6.75623939978e-05
flow : 0.000240176877248
BAD, pattern B

Ｆｌａｇ：：０１００
５．Ｐｙｔｈｏｎとは
・どんな言語か
彼の名はＰｙｔｈｏｎ（ニシキヘビ）。ライバル言語はＰｅｒｌ（改名前はＰｅａｒｌ＝真珠だった）とＲｕｂｙ（ルビー）。もっと良い名前はなかったのだろうか。
インデントを使ったブロックの表現と、プログラマがｓｅｌｆという文字をタイプする能力を格段に向上させる言語仕様が特徴的。
とてもお行儀が良い言語。ＰｅｒｌやＲｕｂｙがＴＭＴＯＷＴＤＩ（それをやる方法は幾通りも存在する）な言語であるのに対して、Ｐｙｔｈｏｎはやり方を１つだけ用意するようにしているところとかがお上品に見える。
・長所
簡潔で見やすいコードを書きやすい。書きあがったコードを見ると、なんというかどの言語よりもあっさりしているように感じる。
ＮｕｍＰｙとか数学系のライブラリがけっこう充実している。ＭＡＴＬＡＢの代わりに使う人もいるとか。
あとＧｏｏｇｌｅと仲良しで（Ｐｙｔｈｏｎの神様はＧｏｏｇｌｅで働いている）、ＧＡＥでも利用できたりする。
・短所
実行速度はやはりスクリプト言語らしい速度。
日本ではＰｙｔｈｏｎを使った仕事に出くわすことはあまり多くない。Ｗｅｂフレームワークはいくつか存在するけど、Ｗｅｂ系の仕事で見かけることもあまりない。
参考図書を選ぶ時にリアルなニシキヘビの絵を目にしないといけなかったり、利用している時にあまりかわいくない蛇のアイコンを目にしないといけなかったりすることがあるので、蛇嫌いな人は手を出しづらい言語。
image : 5.52637869948e-05
table : 0.000138371126468
graph : 6.17943017287e-05
flow : 0.000111620461189
BAD, pattern B

Ｆｌａｇ：：０１００
４．ＰＨＰとは
・どんな言語か
正式名称は「ＰＨＰ：ＨｙｐｅｒｔｅｘｔＰｒｅｐｒｏｃｅｓｓｏｒ」（意訳：我はＨＴＭＬを生み出すために在る）。
ＪａｖａやＲｕｂｙがＷｅｂアプリでも使える汎用的な言語なのに対して、ＰＨＰはその名の通りＷｅｂアプリで使うことを目的として作られた男らしい言語。
スクリプトレットでＨＴＭＬの中にさらっとプログラムを書きこんで動的なページを作る目的で作られた。その後、あれも欲しいこれも欲しいと拡張を続けていったら、いつの間にかもっともらしい言語っぽくなっていた。こうした日々拡張を重ねる言語をハウルの動く城式言語と呼ぶ（今考えた）。
・長所
初心者がプログラムを学び始めてから動的なページが作れるようになるまでにかかる学習時間の短さは魅力的。コードの量も短い。環境設定も簡単。
多くの有料レンタルサーバはＰＨＰを使える環境を用意しているので、仕事じゃなく個人で使う用途でも活躍する機会が多い。
巷に出回っている求人の量が多いのも魅力。ＲｕｂｙやＰｙｔｈｏｎの求人よりも圧倒的に多い。但しＰＨＰを使える人の数も多いので仕事が取りやすいかどうかは別の話。
・短所
実行速度はスクリプト言語らしい速度。
Ｗｅｂアプリ以外の場所ではあまり利用されない。ので、Ｗｅｂ向け以外の用途で使うためのライブラリとかはそんなに多くない。
ＰＨＰしか使えないプログラマはＰＨＰｅｒと呼ばれて迫害される決まりになっている。
image : 4.01645476538e-05
table : 5.88364783031e-05
graph : 7.37332904533e-05
flow : 0.000172944068996
BAD, pattern B

Ｆｌａｇ：：０１００
３．Ｃ＋＋とは
・どんな言語か
Ｃ言語にテンプレートとか、クラスとか、継承とか、多重継承とか、演算子のオーバーロードとか、デフォルト引数とか、その他いろんなパンドラの箱に入っていそうな仕様を取り付けることで出来上がった言語。
多くの仕様が加わることによって生み出されるコードは混沌としたが、最後には希望が残ったと言われているとかいないとか。
・長所
速度はＣと同じく音速。その上オブジェクト指向やらスマートポインタやら様々な機能が付加され、Ｂｏｏｓｔなんていう強力という言葉がよく似合うライブラリも使えるので、多彩なコードの書き方ができる。
ＣでできることはＣ＋＋でもすべてできるので、個人的にはＣ＋＋を使わずにＣを使うというシーンがあまり思い浮かばない。
・短所
スマートポインタがいるとはいえガベージコレクションはないのでメモリ管理はやはり面倒。
学習する際はＣ言語の基本を学んでからＣ＋＋に手を伸ばすような経路が一般的。つまり、ただでさえ学習コストが他の言語より高めなＣを学んで、さらにＣ＋＋の概念を学ばないといけない。使えるようになるまでかなり時間がかかる。
主観的な点数を付けると、ＰｙｔｈｏｎやＲｕｂｙの学習コストを１０として、Ｊａｖａを１５、Ｃを２０とすると、Ｃ＋＋の学習はコストが３０くらいかかるような感じ。
あと、大規模なプロジェクトだとビルドにけっこうな時間がかかるのが割とストレス。
image : 4.99817069389e-05
table : 5.3218149854e-05
graph : 7.58435263813e-05
flow : 0.000158721934653
BAD, pattern B

Ｆｌａｇ：：００００
ＶＢを落としている理由は、今年（２０１１年）はＪａｖａＳｃｒｉｐｔの年になりそうな予兆がちらほら見えることと、ＶＢの説明がＣ＃と若干被る部分があるので（ＭＳの話とか、ＭＳの話とか）、ネタ的な問題もあって入れ替えています。
一応、これを書いてる人間はＯｂｊｅｃｔｉｖｅ－Ｃ以外の９言語は仕事で使ったことがあります。Ｊａｖａ、ＪａｖａＳｃｒｉｐｔ、Ｒｕｂｙ、Ｐｙｔｈｏｎはけっこうガリガリ使ってます。Ｃ＃、Ｐｅｒｌはさらっとしか使ったことがないのであまり自信はないです。お察しください。
以上、前置きでした。では本編をどうぞ。
image : 0.000111872093471
table : 6.68920149794e-05
graph : 8.51870255966e-05
flow : 6.83226256321e-05
no, pattern A

Ｆｌａｇ：：０１００
７．Ｏｂｊｅｃｔｉｖｅ－Ｃとは
・どんな言語か
名前の通り、Ｃにオブジェクト指向を組み込んだ言語。まさかこの言語が人気言語を扱う記事の中に登場するようになるとは、数年前までは予想もしていなかった。すいません、Ｄ言語より来ないだろうなんて思ってました。
スティーブ・ジョブズがＭａｃに戻る前あたりから使っているお気に入りの言語。人気が出た理由はひとえにｉＰｈｏｎｅ。ｉＰｈｏｎｅアプリを作るにはＯｂｊｅｃｔｉｖｅ－Ｃを使う必要があったことから利用者が急増していつの間にやらＴＯＰ１０に入るような言語になっていた。
なぜＣ＋＋じゃなくＯｂｊｅｃｔｉｖｅ－Ｃなのか。それはジョブズにしか分からない。
・長所
Ｃと互換性があるので、Ｃが使えるならＯｂｊｅｃｔｉｖｅ－Ｃを学習するのは割と簡単。もちろん実行速度も十分に高速。ｉＰｈｏｎｅのようなＣＰＵを使い過ぎると電池的に困るような端末はこういう言語が向いてるのかもしれない。
最近のＯｂｊｅｃｔｉｖｅ－Ｃはガベージコレクションも付いてるらしい（今知った）。何かと進歩してるのだなぁ。
・短所
使いこなすにはＣを知らないといけない。ということはＣ＋＋と同じく、学習コストはスクリプト言語とは比べものにならないくらい高くなる。記述するコードの量ももちろん多くなる。
Ａｐｐｌｅ以外の機器で利用されるケースはけして多くないので、もしＡｐｐｌｅが「Ｏｂｊｅｃｔｉｖｅ－Ｃ、やめました」と言ったら一気にマイナー言語に逆戻りすることも考えられる。
image : 4.53592740764e-05
table : 7.84427258293e-05
graph : 8.76470684428e-05
flow : 0.000116472220985
BAD, pattern B

Ｆｌａｇ：：００００
・誰が学ぶべきか
これからプログラムを学びたいという人で、Ｗｅｂ系を考えている人はとりあえずＰＨＰから始めると手っ取り早いかもしれない（もちろんその前にＨＴＭＬは覚えておく必要はある）。
逆にＷｅｂ系以外（データ処理、ＧＵＩプログラム等）に手を出したいと思っている人にとっては、検討する必要がまったくない言語である。
既にいくつか言語を学んだことがある人なら学習にそれほど手間取ることはないはずなので、必要になった時に学ぶくらいのスタンスで良いかもしれない。
image : 2.03199937399e-05
table : 0.000111952973393
graph : 2.02419848886e-05
flow : 0.00017411750695
no, pattern A

Ｆｌａｇ：：００００
前書き
この世にはたくさんのプログラミング言語が存在します。Ｗｉｋｉｅｐｄｉａのプログラミング言語一覧を見ると、実に２００個以上というわけの分からない数の言語が並んでいたりします。
２００の中にはほとんど使われてない言語も混じってるので、実際に仕事でざくざく使われている言語は２０とか３０とかそういうオーダーなのですが、それでも１人の人間が把握するにはちょっと多過ぎる数です。
本記事では、そうした有り余るプログラミング言語の海の中で「どれを勉強したらいいの？」とか「どれを採用するのが適切？」という悩みをお持ちの方が「よし、この言語に決めた！」と自信を持って決断できるように背中を押すことを目的として書かれました。
無責任に背中をドンと押すことが目的なので、これを読めば正しい判断ができるかという点についてはノーコメントとさせていただきます。使ってみないと過ちには気付けないものさ。
０－２．人気ＴＯＰ１０言語の条件
image : 6.64898645025e-05
table : 9.6671869531e-05
graph : 9.30936745076e-05
flow : 6.24841158095e-05
no, pattern A

Ｆｌａｇ：：００００
・誰が学ぶべきか
Ｗｅｂ業界で生きていくなら知っていないといけない言語。Ｗｅｂじゃない世界で生きていくなら知っていても役立つことが少ない言語。
手軽にＧＵＩでグリグリするものが書きたい、と思った時に実はＪａｖａＳｃｒｉｐｔを学ぶのが一番近道なんじゃないかと思ったりすることもある。できることに制限はあるけど短時間で動くものが作れる。レトロゲームを再現する程度のアニメーションもできる。
image : 5.34560100054e-05
table : 6.04870704379e-05
graph : 0.000124840234591
flow : 6.6755717384e-05
no, pattern A

Ｆｌａｇ：：０１００
１０．ＪａｖａＳｃｒｉｐｔとは
・どんな言語か
ブラウザ上で動く言語。最近はｎｏｄｅ．ｊｓなんていうサーバサイドＪａｖａＳｃｒｉｐｔなんてものも出てきている。
ブラウザの世界はどこの国土にも属さない紛争地域になっているので、そこで生息するＪａｖａＳｃｒｉｐｔは周囲からのいろんな要求を受け入れてファットになるか、何も受け入れずに「勝手にしろ」と開き直るかのどちらかを選択する必要があった。
そこで彼は基本的なことだけをサポートした上で「あとはｊＱｕｅｒｙにでも言えよ。俺に言うな」というスタンスを取った。それで彼はあの激戦区の中にいてもハウルの城になることもなく、小さくシンプルなままの姿で居ることができている。
・長所
ブラウザ紛争地域で勝者になるには速度を追い求める必要があることから、実行速度は「その辺のスクリプト言語よりもよほど速いんじゃない？」というベンチマークをたたき出すようになっている。ＪＩＴがトレーシングで最適化な感じで。
ＪａｖａＳｃｒｉｐｔは軽量な言語だけど意外と何でもできる。オブジェクト指向だろうと、イベント指向だろうと、メタプロだろうと、関数型プログラミングだろうと、割と無理なく実現できる。
・短所
メインはブラウザ上で動作する言語なので、用途は限られる。間違っても巨大ファイルを操作してデータ処理をしようなんて用途に使うものではない。
一人前のＪａｖａＳｃｒｉｐｔ使いになるためには、ブラウザの違いに翻弄されて目を血走らせながら「ＩＥがぁ、ＩＥがあぁぁ」と叫ぶ儀式を通過しなければいけない。
image : 3.61064779453e-05
table : 9.03595521792e-05
graph : 2.89580022731e-05
flow : 0.000134979440439
BAD, pattern B

Ｆｌａｇ：：０１００
２．Ｃ言語とは
・どんな言語か
世の中はＣでできている。ＷｉｎｄｏｗｓだってＬｉｎｕｘだってアメンボだって、みんなみんなＣでできている。
プログラミング言語だってＣでできている。ＰｙｔｈｏｎだってＲｕｂｙだってオケラだって、みんなＣでできている友達なんだ。
というように世の中の基板になるところを支えている言語。
・長所
有名な高級（？）言語の中では最速の実行速度を誇る。なのでスクリプト言語を利用している時に速度が出なくて困ったら、その部分をちょろっとＣで書き直すと平気で１００倍速になったりすることもある。
何十年も使われてきた歴史ある言語なので、周りにはＣで書かれたいろんな資産がある。学習する時に参考になる良いソースを探すのも楽。参考図書にも困らない。
・短所
ガベージコレクションがないのでメモリ管理を忘れた世代には使いづらい言語。コード量も軽量な言語と比べるとかなり多くなる。
自分で何かソフトを作ることになったとして、ピュアなＣでガリガリ書くというシチュエーションはあまり思い浮かばない。Ｃ＋＋を使うような気がする。
あと移植性が低い。たとえばＬｉｎｕｘで動いているコードをＷｉｎｄｏｗｓで動かそうと思ったら、いろいろ書き換えないといけないところが出てくる。＃ｉｆｄｅｆＷｉｎｄｏｗｓみたいな。
image : 6.14877100877e-05
table : 5.40104291816e-05
graph : 9.67074154092e-05
flow : 5.56591388685e-05
BAD, pattern B

Ｆｌａｇ：：００００
・誰が学ぶべきか
間違っても「ちょっとプログラムというのを学んでみたい。Ｃ＋＋ってかっこよさそう」なんていう気持ちで手をつけてはいけない。「ちょっと登山を経験してみよっかな」と言ってチョモランマに登るようなものである。悪いことは言わないので高尾山（ＰＨＰとかＪａｖａＳｃｒｉｐｔ）あたりから初めておこう。
速くて省メモリな○○ライブラリというような触れ込みで公開されるライブラリはＣ＋＋で書かれていることが多い。たとえば去年（２０１０年）Ｇｏｏｇｌｅが公開したＲＥ２という速くて省メモリな正規表現ライブラリはＣ＋＋で書かれていた。
そういう良く呼び出され、速度が求められ、書き捨てられるようなコードではない系のソフトを作りたい人は甘えたことは言わずにＣ＋＋に手を出すのが良いかもしれない。
image : 6.387289705e-05
table : 2.34714566865e-05
graph : 6.95431255161e-05
flow : 0.000109531035773
no, pattern A

Ｆｌａｇ：：００００
・誰が学ぶべきか
あなたがＡｐｐｌｅ信者であれば、他の言語には目も向けずＯｂｊｅｃｔｉｖｅ－Ｃを学びなさい。
あなたがＭＳ信者であれば、Ｃ＃かＶＢを学びなさい。
あなたがＧｏｏｇｌｅ信者であれば、Ｐｙｔｈｏｎかｇｏを学びなさい。
あなたがＳｕｎ信者なら．．．．．．過去は忘れて新しい企業に入信しなさい。ＩＢＭあたりはどうでしょう？
ｉＰｈｏｎｅアプリを作りたいのであれば、宗派に関係なくＯｂｊｅｃｔｉｖｅ－Ｃを学んでおけば良いと思われる。逆にＡｎｄｒｏｉｄ派なら目を向けなくても良い言語。
image : 6.97606517092e-05
table : 0.000123595922714
graph : 2.39282153538e-05
flow : 2.86866519657e-05
no, pattern A

Ｆｌａｇ：：００００
・誰が学ぶべきか
Ｐｙｔｈｏｎを学ぶか、Ｐｅｒｌを学ぶか、Ｒｕｂｙを学ぶか、と考えた時に、日本人だしＲｕｂｙに一番親近感が湧くなと思ったら手を出すと良いかも。
Ｒａｉｌｓ系の仕事はポツポツあるので、周囲で最近そういう案件見かけるなぁと感じた人は学んでおくと仕事の足しになるかも。
言語の硬度を測定すると、Ｊａｖａは硬度８くらい、Ｐｙｔｈｏｎは６くらいになるのに対して、Ｒｕｂｙは３くらいになる。柔らかい手触りが好きだなと思う人はＲｕｂｙを学ぶといいかも。
image : 0.0
table : 4.09424274458e-05
graph : 5.45078832754e-05
flow : 0.00015034836701
no, pattern A

Ｆｌａｇ：：０１００
９．Ｒｕｂｙとは
・どんな言語か
純粋オブジェクト指向でメタプロでＰｅｒｌとＬｉｓｐが結婚して隔世遺伝が黒魔術で生まれた言語。
主な出産地は島根県の県庁所在地、松江市。小学校の頃に全県の県庁所在地を覚えるように言われた時、どうしても覚えられなかった松江市。
・長所
楽しくプログラミングができることを意識しているそうで、あまりプログラマを束縛するようなことはしない開放感溢れる言語仕様になっている。
作者が日本人なので、言語仕様に関するメーリングリストの議論も普通に日本語で行われている。日本人にはその辺が取っつきやすい。
Ｒａｉｌｓがけっこう便利。
・短所
実行速度はスクリプト言語らしい速度。
ｅｎｄｅｎｄｅｎｄ．．．
行儀の悪い書き方をしてもあまり怒られない。ので、大人数で開発した時に「わるいプログラマＬＶ２６」が混ざっていると混沌としやすい。目の届く範囲の少人数チームで使うのが正しい利用法なんじゃないだろうか。
image : 9.63405378022e-05
table : 4.31244418334e-05
graph : 1.80986701604e-05
flow : 3.11039779954e-05
BAD, pattern B

Ｆｌａｇ：：０１００
８．Ｐｅｒｌとは
・どんな言語か
古くからＣで書くほどでもないことをさらっと書きたい時に愛用されてきた歴史ある言語。銃器で言えばコルト・ガバメントみたいなものだと言えば分りやすいのではないだろうか。つまりＣがトンプソンＭ１で、ＰｙｔｈｏｎはベレッタＭ９２くらいということだ。
十分に手に馴染んでいる銃器をあえて手放すほどの理由をベレッタに感じなければ、コルトを使い続けるのも良いのではないだろうか。
・長所
長く使われてきた分、いろんなモジュールが揃っている。あと、たいていの環境に入っているので、客先のサーバで作業をしないといけない時とかにも役に立つことがある。
ＬｅａｒｎｉｎｇＰｅｒｌは読み物としても面白い。あとラクダの絵がかわいい。
・短所
実行速度はスクリプト言語らしい速度。
用途的にＰｙｔｈｏｎやＲｕｂｙと被るので、今あえてＰｅｒｌを取る理由というのが個人的には思い浮かばない。生粋のＰｅｒｌ使いならきっと流暢な解答を用意してくれると思う。
image : 3.22656879004e-05
table : 5.29742221154e-05
graph : 2.99173382829e-05
flow : 5.54882398516e-05
BAD, pattern B

Ｆｌａｇ：：００００
・誰が学ぶべきか
軽い言語だと勝手に裏側でやってくれるようなメモリの確保とかファイルポインタの操作なんかも、Ｃでは自分で意識して書かないといけない。ので、一度触れておくとプログラムが裏側で何をしているかが意識できて良いかもしれない。
ＯＳや言語の細かい挙動を追いたいという願望が生まれた時に（たとえばＰＨＰのネットワーク関連の機能について、実際にこれは裏では何をしてるんだ、ということが知りたくなった時とか）、Ｃが読めると割とあっさり答えに辿りつけたりもする。
ガリガリ書けるようになる必要があるかは別として、とりあえず知っておいて損はない言語。
image : 7.10621052781e-05
table : 1.03208066244e-05
graph : 6.3634820974e-06
flow : 4.80620081043e-05
no, pattern A

Ｆｌａｇ：：００００
・誰が学ぶべきか
プログラミング言語は、ヘビー級（Ｃ＋＋やＪａｖａ）とライト級（ＰｙｔｈｏｎやＲｕｂｙ）を１つずつ覚えておくと、その場に応じて使い分けられるので何かと便利。
ライト級の言語を１つも習得してなくてどれにしようか迷っているなら、Ｐｙｔｈｏｎは１つの選択肢になる。
既にライト級の言語を覚えているなら、無理にＰｙｔｈｏｎに手を出す必要はあまりないかもしれない。
image : 5.25028877766e-06
table : 3.32555050278e-05
graph : 0.0
flow : 4.78031819021e-05
no, pattern A


a,b,c,d = 11,12,2,0
precision = 0.000000
recall = 0.000000
fvalue = 0.000000
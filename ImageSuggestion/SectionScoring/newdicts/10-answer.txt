In Section 14, Score:2.057991
Flag：：0100
開発プロセスにより何が変わるのか
ここで、両プロセスを比較してみます。
そして、ウォーターフォールプロセスが得意とする状況とされるのは以下の通りです。
・高い可用性が求められるシステムである場合
・メンバーの開発経験が少ない場合
・要件がほとんど変わらない場合
・開発メンバーの数が多い場合
・組織的文化が秩序を重視するものである場合
対してアジャイルはその正反対の状況を得意とします。
・可用性よりも優先されるものがあるシステム
・メンバーとして開発に熟練した開発者が参加している場合
・要件が常に変化していく場合
・開発メンバーの数が少ない場合
・組織的文化がさまざまな状況に意欲を持って取り組む場合
paraword
description : アジャイル/アジャイルa+開発/かいはつ+プロセス/ぷろせす
	 : 対してアジャイルはその正反対の状況を得意とします。
description : アジャイル/アジャイルa+統一/とういつ+プロセス/ぷろせす
	 : 対してアジャイルはその正反対の状況を得意とします。
clueword:
場合, れる, ここ, 場合, られる, より, 以下, 場合, 状況, よる, する, 高い, 場合, 場合, する, 状況, 的だ, そして, プロセス, プロセス, ます, 場合, いる, する, 的だ, 通り, する, する, 状況, する, いく, 少ない, れる, する, 場合, その, 変化, する, する, 少ない, 場合, 比較, 多い, 対する, さまざまだ, 場合, する, プロセス, ほとんど, ます
image : 0.120384128078
table : 1.58966115747
graph : 0.184478851168
flow : 0.16346700041

In Section 15, Score:0.744812
Flag：：0000
アジャイルプロセスでは、プロジェクトの早い段階から「動くコード」を作成します。当然、機能はまったく足りないかもしれませんが、実装したところまでは動かすことができるコードになっているはずです。また、小さく作りこんでいくプロセスなので、サイクルごとにかじ取りの判断ができ、顧客からの要望が取り入れやすいのが特徴です。アジャイルプロセスの基本スタンスは、変化を受け入れることで、要求の変更が前提に考えられています。
ProjectKeeper／SalesForceAutomation＋の開発プロセス
最初のバージョンの開発が始まってから約4年がたちましたが、当初はメンバー約2名で立ち上げました。自社製のWebシステム構築用のフレームワークがあったことや、受託開発でさまざまなシステムを構築した経験があったメンバーであったため2名で約6ヶ月の期間で開発を行うことはできました。
当初はパッケージ開発におけるノウハウはほとんどなかったため、受託開発時に当時よく使っていたウォーターフォール手法を必然的に採用しました。
しかし、パッケージ製品の開発においては延々と開発を継続していかなければならず、受託開発のように納品することで、開発が完了するわけではありません。製品は日々進化する必要があり、顧客からのフィードバックをスムーズに製品に取り入れていかなければ、製品の魅力を維持することができません。
仕様変更、機能拡張がたびたび発生していく状況では、各機能間の整合性や品質を維持することが困難になり、開発プロセスをより仕様変更に強いアジャイル開発手法へスイッチすることで、柔軟な仕様変更、スピーディーな製品リリースを行うことができるようになりました。
昨今では多種多様なシステムが身の回りに存在しています。さまざまなシステムを目にし、操作することで、古いシステムの操作性や機能へ不満を抱く機会も多くなるでしょう。このような顧客を常に満足させるためには、システムは常に進化していかなければならず、おのずと今後の開発手法の主流はアジャイルへと進んでいくのではないでしょうか？
paraword
list
こと/こと:自社/じしゃ+製/せい,Web/Web+システム/しすてむ+構築/こうちく+用/よう,フレームワーク/フレームワーク,有る/ある?会う/あう?合う/あう
メンバー/めんばー:様々だ/さまざまだ,受託/じゅたく+開発/かいはつ,システム/しすてむ,構築/こうちく,経験/けいけん,有る/ある?会う/あう?合う/あう
to root
  [為/ため, 行う/おこなう]
to reaf
  []
list
  [仕様/しよう+変更/へんこう, 機能/きのう+拡張/かくちょう]
to root
  [スイッチ/すいっち, こと/こと, 行う/おこなう]
to reaf
  []
list
  [整合/せいごう+性/せい, 品質/ひんしつ]
to root
  [維持/いじ, こと/こと, 困難だ/こんなんだ, スイッチ/すいっち, こと/こと, 行う/おこなう]
to reaf
  [各/かく+機能/きのう]
list
製品/せいひん+リリース/りりーす:スピーディーだ/すぴーでぃーだ
仕様/しよう+変更/へんこう:柔軟だ/じゅうなんだ
to root
  [行う/おこなう]
to reaf
  []
list
  [操作/そうさ+性/せい, 機能/きのう]
to root
  [抱く/いだく?抱く/だく, 機会/きかい, 多い/おおい]
to reaf
  [古い/ふるい, システム/しすてむ]
clueword:
いる, さまざまだ, 当初, する, られる, 維持, する, プロセス, なる, いく, いく, する, 使う, ます, ます, いく, ようだ, いる, する, 今後, 作る, 最初だ, 維持, する, まで, プロセス, より, やすい, プロセス, 考える, 状況, 当初, サイクル, から, さまざまだ, する, 主流, ようだ, する, なる, なる, 多い, 期間, ます, ます, 的だ, ます, する, ます, 特徴, する, する, ます, する, いく, ほとんど, なる, いる, ます, する, 始まる, 変化, プロセス, いる, する, 小さい, いく, ます, ます, 発生, から, から, する, する, 基本, いく, する, 作成, する, から, なる, ます, なる, プロセス
image : 0.108755033058
table : 0.129574444638
graph : 0.0888724237663
flow : 0.417610322784

In Section 13, Score:0.520755
Flag：：0010
統計・分析における開発現場の実態
独立行政法人情報処理推進機構（IPA）の統計（出典：『ソフトウェア開発データ白書2008』）によると、実に95％以上のプロジェクトがウォーターフォール型のライフサイクルで開発されています。恐らく、ウォーターフォール型のプロセスの方が誰にでも理解しやすいこと、改修案件の場合など前回のプロセスがウォーターフォール型であったため、今回も同じプロセスを採用するという心理が働いたりすることが原因ではないかと考えられます。
次に、ユーザーの要求仕様に関して、35％以上のプロジェクトは「あいまい」であり、30％以上のプロジェクトで「ユーザー担当者の要求仕様への関与が不十分」という統計もあります。
その結果、QCDをすべて達成したと評価するプロジェクトは全体の2／3程度で、残りは品質、コスト、工期のいずれかの項目が計画通りに達成できなかったというデータもあります。このように、3つに1つのプロジェクトは、ウォーターフォールの当初の計画通りに進んでないということになります。つまり、プロジェクトの初期段階で完全な計画を立てるのは非常に難しいことが分かります。
paraword
list
有る/ある:30/30,ユーザー/ゆーざー+担当/たんとう+者/しゃ,要求/ようきゅう+仕様/しよう,関与/かんよ,不十分だ/ふじゅうぶんだ,言う/いう,プロジェクト/ぷろじぇくと,統計/とうけい
曖昧/あいまいa:ユーザー/ゆーざー,要求/ようきゅう+仕様/しよう,35/35,関する/かんする,プロジェクト/ぷろじぇくと
to root
  []
to reaf
  [次に/つぎに]
list
  [コスト/こすと, 品質/ひんしつ, 工期/こうき]
to root
  [いずれ/いずれ, 項目/こうもく, 達成/たっせい, 言う/いう, データ/でーた, 有る/ある]
to reaf
  []
clueword:
統計, 通り, ます, 場合, プロセス, 以上, 以上, 次に, 統計, 以上, する, 計画, 考える, よる, ます, プロセス, られる, 処理, つまり, 当初, ます, ます, 計画, ます, する, れる, なる, 分析, する, 程度, 項目, サイクル, 計画, プロセス, その, すべて, 全体, する, いる, コスト, でも, 統計, 初期, ます, する, やすい, 同じだ, する, 通り, 原因
image : 0.0469189529259
table : 0.194513607254
graph : 0.0608347381223
flow : 0.218487638304

In Section 2, Score:0.403569
Flag：：0100
開発手法は単純にウォーターフォールが悪い、アジャイルは良い、というものではなく、重要なのはプロジェクトを失敗させないことにあります。どのような開発手法においても、プロジェクトには必ずリスクが存在します。プロジェクト失敗の原因の多くは以下のようなものです。
・スケジュールの欠陥―強気過ぎるスケジュールは悪。予実の乖離（かいり）を生み出す。
・要求の増大（変更）―外的要因も影響し、時間の経過と共に要求は変わっていく。
・人員の離脱―見積もりの時点で、メンバー離職の可能性は大抵考慮されていない。
・仕様の崩壊―仕様はあいまいに作れるが、製品はあいまいに作れない。
・生産性の低迷―少人数チームでは平均値のブレが大きい。能力がマイナスに振れるリスク
これらのリスクが担保できるのであれば、開発プロセスがアジャイルでもウォーターフォールであっても構いません。それぞれのメリット・デメリットを検討した上、よりプロジェクトが成功しやすい開発プロセスを選択すべきです。
paraword
clueword:
する, する, する, いる, ます, プロセス, 過ぎる, 経過, ようだ, れる, する, いく, ます, 影響, 要因, する, 原因, ます, 時点, 多く, する, 大きい, 増大, やすい, 的だ, メリット, プロセス, デメリット, それぞれ, 平均, これ, 構う, 時間, する, より, 以下, 悪い
image : 0.0668920457746
table : 0.175892195996
graph : 0.0557306348717
flow : 0.105054303025

In Section 5, Score:0.398774
Flag：：1000
・システムのユーザーは、自分自身がどんなシステムが欲しいのかを理解しておらず、さらに、要求を明確に伝えることができない。
・仮にすべての要求を明確にすることができたとしても、そのすべてを実装に落とし込むために必要な詳細には達しない。
・仮にすべての詳細を知ることができたとしても、通常それは複雑過ぎて、人間の理解の範囲を超えている。
・仮に人間がこのすべての複雑な要求を理解できたとしても、外的要因により要件は変化する。場合によっては、以前の決定事項を覆すこともある。
paraword
clueword:
複雑だ, この, 要因, よる, その, すべて, する, する, 通常, する, すべて, すべて, すべて, 過ぎる, 複雑だ, 場合, よる, 範囲, さらに, 事項, いる, 的だ, する, する, 変化, 以前, する, それ
image : 0.0582161779782
table : 0.240529826134
graph : 0.022139732261
flow : 0.0778877834763

In Section 9, Score:0.311292
Flag：：1000
アジャイル開発プロセス
アジャイル開発プロセスでは1つの開発サイクルを小さく（1サイクルの要求を小さく）し、開発の各サイクルをプロジェクトが完了するまで反復します。問題を細分化し、段階的に開発を進めていきます。アジャイルプロセスの中には、XP、アジャイル統一プロセス（RUP）、SCRUM等のさまざまな方法論があります。
paraword
list
  [XP/XP, アジャイル/アジャイルa+統一/とういつ+プロセス/ぷろせす]
to root
  [有る/ある]
to reaf
  []
list
  [RUP/RUP, SCRUM/SCRUM]
to root
  [方法/ほうほう+論/ろん, 有る/ある]
to reaf
  []
description : アジャイル/アジャイルa+統一/とういつ+プロセス/ぷろせす
	 : 対してアジャイルはその正反対の状況を得意とします。
clueword:
プロセス, 小さい, 方法, まで, 問題, 的だ, する, サイクル, いく, プロセス, サイクル, ます, する, する, サイクル, する, 細分, プロセス, ます, 小さい, プロセス, ます, さまざまだ
image : 0.0554495231254
table : 0.0972925618883
graph : 0.0249998881365
flow : 0.133549662159

In Section 10, Score:0.254051
Flag：：0001
例えばRUPにおいては、ただやみくもにサイクルを実行するのではなく、各サイクルを「方向付け」「推敲（すいこう）」「作成」「移行」という4つのフェーズに分類し、これらのフェーズを経てリリースにいたります。各フェーズは1つ以上の反復で構成されます。このように、短いスパンで成果物をリリースし、その都度評価を行うことにより、リスクを最小化しようとしたのがRUPのアジャイルプロセスです。
paraword
list
移行/いこう:推敲/すいこう
推敲/すいこう?遂行/すいこう:推敲/すいこう
方向付け/ほうこうづけv:
作成/さくせい:推敲/すいこう
to root
  [言う/いう, 4/4+角/つの+フェーズ/フェーズ, 分類/ぶんるい, 至る/いたる]
to reaf
  []
clueword:
する, その, する, 構成, サイクル, よる, 短い, する, ます, する, ます, 分類, れる, サイクル, 以上, プロセス, これ, する, 作成, 例えば, する
image : 0.0558805839844
table : 0.0767870253121
graph : 0.0367536750853
flow : 0.084629976204

In Section 12, Score:0.166840
Flag：：0000
つまり、このプロセスはプロダクトオーナーに負担が掛かりやすいと言えます。開発者を用意してプロセスに乗せるだけで、希望したものができてくるということはありません。
しかし、これは「アジャイルだから」という問題ではなく、アジャイルの本質を理解しないまま似非（えせ）アジャイルを実践することによる問題です。アジャイルプロセスの理解は、ウォーターフォールのそれよりもはるかに困難です。
paraword
list
問題/もんだい:これ/これ,アジャイルだ/アジャイルだ,言う/いう
問題/もんだい:アジャイル/アジャイルa,本質/ほんしつ,似/にv+非/ひ,理解/りかい,得/えv+瀬/せ?背/せ+アジャイル/アジャイルa,実践/じっせん,こと/こと,よる/よる
to root
  []
to reaf
  [しかし/しかし]
clueword:
これ, プロセス, から, やすい, この, 問題, つまり, それ, する, より, する, ます, 問題, くる, プロセス, よる, する, する, ます, プロセス
image : 0.0188469590368
table : 0.0366290986628
graph : 0.00965168489517
flow : 0.101712459308

In Section 4, Score:0.164562
Flag：：0001
ウォーターフォールプロセスは、従来のソフトウエア開発において最もポピュラーな開発プロセスであり、「要求分析」「設計」「実装」「テスト」「結合」を順序通りにこなしていきます。滝から水が落ちるように、前工程の成果物に基づき次の工程の作業を行い、前工程への手戻りを想定していません。
paraword
list
  [設計/せっけい, 結合/けつごう, 要求/ようきゅう+分析/ぶんせき, 実装/じっそう, テスト/てすと]
to root
  [こなす/こなす]
to reaf
  []
clueword:
工程, 通り, 順序, ようだ, 工程, ます, する, ます, 分析, 最も, プロセス, 工程, いく, から, プロセス, いる
image : 0.00963393966347
table : 0.0164965599018
graph : 0.00999296009756
flow : 0.128438920587

In Section 7, Score:0.162680
Flag：：0010
その結果、プロジェクトの実績を品質コスト工期（QCD）の視点から評価した結果、コストと納期は比較的順守されているものの、品質に関しては計画値に達しないプロジェクトが20％以上にのぼり、QCDをすべて達成したと評価するプロジェクトは63％にとどまります。
paraword
list
  [コスト/こすと, 納期/のうき]
to root
  [遵守/じゅんしゅ, もの/もの, 止まる/とどまる]
to reaf
  []
description : 納期/のうき
	 : その結果、プロジェクトの実績を品質コスト工期（QCD）の視点から評価した結果、コストと納期は比較的順守されているものの、品質に関しては計画値に達しないプロジェクトが20％以上にのぼり、QCDをすべて達成したと評価するプロジェクトは63％にとどまります。
clueword:
ます, 計画, する, コスト, コスト, 以上, すべて, その, する, する, する, 比較的, から, いる, れる
image : 0.0190751213754
table : 0.0272687272284
graph : 0.0252502170622
flow : 0.0910857410945

In Section 1, Score:0.158861
Flag；；1000
さまざまな開発手法
開発プロジェクトに内在するリスク
アジャイルソフトウエア開発という言葉が生まれて約8年が経過しました。その間、従来型であるウォーターフォール開発プロセスと対比して、さまざまな議論が繰り返されてきたのはご存じの通りです。
本連載では、代表的な開発手法の紹介および、弊社プロダクトであるSIOSApplications（ProjectKeeper／SalesForceAutomation＋）における事例を元に、その開発手法の選定に至るまでのプロセスを紹介します。
paraword
list
紹介/しょうかい:開発/かいはつ+手法/しゅほう
SIOSApplications/SIOSApplications:弊社/へいしゃ+プロ/ぷろ+ダクト/だくと
to root
  [紹介/しょうかい]
to reaf
  [本/ほん+連載/れんさい, 代表/だいひょう+的だ/てきだ]
clueword:
する, する, その, まで, 代表, 経過, ます, する, くる, れる, プロセス, 対比, ます, さまざまだ, その, する, さまざまだ, 通り, プロセス, 的だ
image : 0.0314371123077
table : 0.0342883019612
graph : 0.00602776482427
flow : 0.0871077789647

In Section 8, Score:0.138387
Flag：：0000
ウォーターフォールプロセスをうまくコントロールし、リスクを担保できるプロジェクトが少なかったという数値の裏付けが、この値から導き出されます。そこで、このプロセスの弱点を克服すべく登場したのが反復開発を軸とするアジャイルプロセスでした。
paraword
clueword:
する, この, プロセス, プロセス, プロセス, ます, この, から, する, 少ない, する, そこ, する, れる
image : 0.0169589249823
table : 0.00598240469213
graph : 0.0118581747163
flow : 0.103587301134

In Section 11, Score:0.122212
Flag：：1000
アジャイルでは以下の要素すべてが成り立たない限り、コミュニケーションコストだけが増大してプロジェクトは崩壊します。
・メンバー間の意思疎通
・問題の理解
・解決策の提案
paraword
clueword:
ます, 以下, する, 増大, 要素, する, すべて, コスト, 問題
image : 0.0244285821388
table : 0.0656389674551
graph : 0.00839741045303
flow : 0.0237475284426

In Section 3, Score:0.067324
Flag：：0100
ウォーターフォール開発プロセス
ウォーターフォール開発プロセスとアジャイル開発プロセスの根本的な違いは、実行可能なソフトウエア（ビルド）を単位として開発を反復するか否かにあります。
paraword
list
  [アジャイル/アジャイルa+開発/かいはつ+プロセス/ぷろせす, ウォーターフォール/ウォーターフォール+開発/かいはつ+プロセス/ぷろせす]
to root
  [違い/ちがいv, 有る/ある]
to reaf
  []
description : アジャイル/アジャイルa+開発/かいはつ+プロセス/ぷろせす
	 : 対してアジャイルはその正反対の状況を得意とします。
clueword:
プロセス, ます, プロセス, する, プロセス, する, 的だ
image : 0.0109491738819
table : 0.00305656919107
graph : 0.00180722891566
flow : 0.0515113211842

In Section 6, Score:0.062217
Flag：：0000
ユーザーは出来上がったシステムを目の当たりにして初めて、自分たちが望んでいないものを理解します。また、市場は常に流動しており、提案時には最先端の製品であったにも関わらず、開発完了時には市場の期待に沿っているとは限りません。ビジネスは常に変化していくものです。
paraword
clueword:
いる, ます, する, する, する, する, いる, 変化, いく, ます
image : 0.0126876549729
table : 0.00469208211148
graph : 0.000827586206896
flow : 0.0440097478679

In Section 14, Score:1.494983
Flag：：0100
開発プロセスにより何が変わるのか
ここで、両プロセスを比較してみます。
そして、ウォーターフォールプロセスが得意とする状況とされるのは以下の通りです。
・高い可用性が求められるシステムである場合
・メンバーの開発経験が少ない場合
・要件がほとんど変わらない場合
・開発メンバーの数が多い場合
・組織的文化が秩序を重視するものである場合
対してアジャイルはその正反対の状況を得意とします。
・可用性よりも優先されるものがあるシステム
・メンバーとして開発に熟練した開発者が参加している場合
・要件が常に変化していく場合
・開発メンバーの数が少ない場合
・組織的文化がさまざまな状況に意欲を持って取り組む場合
paraword
description : アジャイル/アジャイルa+開発/かいはつ+プロセス/ぷろせす
	 : 対してアジャイルはその正反対の状況を得意とします。
description : アジャイル/アジャイルa+統一/とういつ+プロセス/ぷろせす
	 : 対してアジャイルはその正反対の状況を得意とします。
clueword:
そして, より, 場合, 状況, 比較, 場合, 多い, 的だ, 場合, 少ない, 場合, プロセス, 変化, その, 状況, プロセス, 場合, 以下, 状況, 通り, 的だ, プロセス, 場合, 高い, 場合, ここ, 場合, 場合, ほとんど, 少ない
image : 0.0801525241425
table : 1.23236615566
graph : 0.134799079752
flow : 0.0476648968232

In Section 13, Score:0.512263
Flag：：0010
統計・分析における開発現場の実態
独立行政法人情報処理推進機構（IPA）の統計（出典：『ソフトウェア開発データ白書2008』）によると、実に95％以上のプロジェクトがウォーターフォール型のライフサイクルで開発されています。恐らく、ウォーターフォール型のプロセスの方が誰にでも理解しやすいこと、改修案件の場合など前回のプロセスがウォーターフォール型であったため、今回も同じプロセスを採用するという心理が働いたりすることが原因ではないかと考えられます。
次に、ユーザーの要求仕様に関して、35％以上のプロジェクトは「あいまい」であり、30％以上のプロジェクトで「ユーザー担当者の要求仕様への関与が不十分」という統計もあります。
その結果、QCDをすべて達成したと評価するプロジェクトは全体の2／3程度で、残りは品質、コスト、工期のいずれかの項目が計画通りに達成できなかったというデータもあります。このように、3つに1つのプロジェクトは、ウォーターフォールの当初の計画通りに進んでないということになります。つまり、プロジェクトの初期段階で完全な計画を立てるのは非常に難しいことが分かります。
paraword
list
有る/ある:30/30,ユーザー/ゆーざー+担当/たんとう+者/しゃ,要求/ようきゅう+仕様/しよう,関与/かんよ,不十分だ/ふじゅうぶんだ,言う/いう,プロジェクト/ぷろじぇくと,統計/とうけい
曖昧/あいまいa:ユーザー/ゆーざー,要求/ようきゅう+仕様/しよう,35/35,関する/かんする,プロジェクト/ぷろじぇくと
to root
  []
to reaf
  [次に/つぎに]
list
  [コスト/こすと, 工期/こうき, 品質/ひんしつ]
to root
  [いずれ/いずれ, 項目/こうもく, 達成/たっせい, 言う/いう, データ/でーた, 有る/ある]
to reaf
  []
clueword:
当初, サイクル, 分析, 以上, 計画, 考える, 原因, 通り, 統計, プロセス, プロセス, 次に, 計画, 項目, 以上, すべて, その, ％, 程度, ％, 全体, ％, やすい, 統計, でも, プロセス, つまり, 初期, 以上, 計画, 統計, 通り, 場合
image : 0.0327505166623
table : 0.164640465333
graph : 0.184662094643
flow : 0.130209557253

In Section 15, Score:0.431617
Flag：：0000
アジャイルプロセスでは、プロジェクトの早い段階から「動くコード」を作成します。当然、機能はまったく足りないかもしれませんが、実装したところまでは動かすことができるコードになっているはずです。また、小さく作りこんでいくプロセスなので、サイクルごとにかじ取りの判断ができ、顧客からの要望が取り入れやすいのが特徴です。アジャイルプロセスの基本スタンスは、変化を受け入れることで、要求の変更が前提に考えられています。
ProjectKeeper／SalesForceAutomation＋の開発プロセス
最初のバージョンの開発が始まってから約4年がたちましたが、当初はメンバー約2名で立ち上げました。自社製のWebシステム構築用のフレームワークがあったことや、受託開発でさまざまなシステムを構築した経験があったメンバーであったため2名で約6ヶ月の期間で開発を行うことはできました。
当初はパッケージ開発におけるノウハウはほとんどなかったため、受託開発時に当時よく使っていたウォーターフォール手法を必然的に採用しました。
しかし、パッケージ製品の開発においては延々と開発を継続していかなければならず、受託開発のように納品することで、開発が完了するわけではありません。製品は日々進化する必要があり、顧客からのフィードバックをスムーズに製品に取り入れていかなければ、製品の魅力を維持することができません。
仕様変更、機能拡張がたびたび発生していく状況では、各機能間の整合性や品質を維持することが困難になり、開発プロセスをより仕様変更に強いアジャイル開発手法へスイッチすることで、柔軟な仕様変更、スピーディーな製品リリースを行うことができるようになりました。
昨今では多種多様なシステムが身の回りに存在しています。さまざまなシステムを目にし、操作することで、古いシステムの操作性や機能へ不満を抱く機会も多くなるでしょう。このような顧客を常に満足させるためには、システムは常に進化していかなければならず、おのずと今後の開発手法の主流はアジャイルへと進んでいくのではないでしょうか？
paraword
list
こと/こと:自社/じしゃ+製/せい,Web/Web+システム/しすてむ+構築/こうちく+用/よう,フレームワーク/フレームワーク,有る/ある?会う/あう?合う/あう
メンバー/めんばー:様々だ/さまざまだ,受託/じゅたく+開発/かいはつ,システム/しすてむ,構築/こうちく,経験/けいけん,有る/ある?会う/あう?合う/あう
to root
  [為/ため, 行う/おこなう]
to reaf
  []
list
  [機能/きのう+拡張/かくちょう, 仕様/しよう+変更/へんこう]
to root
  [スイッチ/すいっち, こと/こと, 行う/おこなう]
to reaf
  []
list
  [整合/せいごう+性/せい, 品質/ひんしつ]
to root
  [維持/いじ, こと/こと, 困難だ/こんなんだ, スイッチ/すいっち, こと/こと, 行う/おこなう]
to reaf
  [各/かく+機能/きのう]
list
製品/せいひん+リリース/りりーす:スピーディーだ/すぴーでぃーだ
仕様/しよう+変更/へんこう:柔軟だ/じゅうなんだ
to root
  [行う/おこなう]
to reaf
  []
list
  [機能/きのう, 操作/そうさ+性/せい]
to root
  [抱く/いだく?抱く/だく, 機会/きかい, 多い/おおい]
to reaf
  [古い/ふるい, システム/しすてむ]
clueword:
考える, プロセス, 当初, から, サイクル, 変化, 小さい, から, プロセス, プロセス, 多い, 特徴, 維持, 的だ, から, より, 主流, ようだ, まで, 最初だ, プロセス, やすい, 期間, 今後, ようだ, 始まる, プロセス, から, ほとんど, 状況, 使う, 維持, 作る, 作成, 基本, 当初
image : 0.0377526283585
table : 0.107255214481
graph : 0.0615896761818
flow : 0.225019188102

In Section 2, Score:0.241387
Flag：：0100
開発手法は単純にウォーターフォールが悪い、アジャイルは良い、というものではなく、重要なのはプロジェクトを失敗させないことにあります。どのような開発手法においても、プロジェクトには必ずリスクが存在します。プロジェクト失敗の原因の多くは以下のようなものです。
・スケジュールの欠陥―強気過ぎるスケジュールは悪。予実の乖離（かいり）を生み出す。
・要求の増大（変更）―外的要因も影響し、時間の経過と共に要求は変わっていく。
・人員の離脱―見積もりの時点で、メンバー離職の可能性は大抵考慮されていない。
・仕様の崩壊―仕様はあいまいに作れるが、製品はあいまいに作れない。
・生産性の低迷―少人数チームでは平均値のブレが大きい。能力がマイナスに振れるリスク
これらのリスクが担保できるのであれば、開発プロセスがアジャイルでもウォーターフォールであっても構いません。それぞれのメリット・デメリットを検討した上、よりプロジェクトが成功しやすい開発プロセスを選択すべきです。
paraword
clueword:
増大, 多く, ようだ, 原因, 過ぎる, プロセス, 大きい, 経過, 時間, 影響, やすい, プロセス, 要因, 平均, 的だ, これ, 時点, それぞれ, メリット, デメリット, 以下, より
image : 0.0464192827174
table : 0.113269261399
graph : 0.0554234999183
flow : 0.0262752318603

In Section 5, Score:0.239379
Flag：：1000
・システムのユーザーは、自分自身がどんなシステムが欲しいのかを理解しておらず、さらに、要求を明確に伝えることができない。
・仮にすべての要求を明確にすることができたとしても、そのすべてを実装に落とし込むために必要な詳細には達しない。
・仮にすべての詳細を知ることができたとしても、通常それは複雑過ぎて、人間の理解の範囲を超えている。
・仮に人間がこのすべての複雑な要求を理解できたとしても、外的要因により要件は変化する。場合によっては、以前の決定事項を覆すこともある。
paraword
clueword:
以前, その, すべて, すべて, すべて, 変化, 事項, 的だ, 通常, 過ぎる, 要因, 範囲, すべて, 場合, それ
image : 0.0426116455776
table : 0.167226616281
graph : 0.0156093962052
flow : 0.0139311043566

In Section 7, Score:0.197033
Flag：：0010
その結果、プロジェクトの実績を品質コスト工期（QCD）の視点から評価した結果、コストと納期は比較的順守されているものの、品質に関しては計画値に達しないプロジェクトが20％以上にのぼり、QCDをすべて達成したと評価するプロジェクトは63％にとどまります。
paraword
list
  [コスト/こすと, 納期/のうき]
to root
  [遵守/じゅんしゅ, もの/もの, 止まる/とどまる]
to reaf
  []
description : 納期/のうき
	 : その結果、プロジェクトの実績を品質コスト工期（QCD）の視点から評価した結果、コストと納期は比較的順守されているものの、品質に関しては計画値に達しないプロジェクトが20％以上にのぼり、QCDをすべて達成したと評価するプロジェクトは63％にとどまります。
description : 納期/のうき
	 : その結果、プロジェクトの実績を品質コスト工期（QCD）の視点から評価した結果、コストと納期は比較的順守されているものの、品質に関しては計画値に達しないプロジェクトが20％以上にのぼり、QCDをすべて達成したと評価するプロジェクトは63％にとどまります。
clueword:
以上, すべて, から, ％, 計画, ％, その, 比較的
image : 0.00753803718418
table : 0.033431184375
graph : 0.0989273009661
flow : 0.0571367714564

In Section 9, Score:0.192737
Flag：：1000
アジャイル開発プロセス
アジャイル開発プロセスでは1つの開発サイクルを小さく（1サイクルの要求を小さく）し、開発の各サイクルをプロジェクトが完了するまで反復します。問題を細分化し、段階的に開発を進めていきます。アジャイルプロセスの中には、XP、アジャイル統一プロセス（RUP）、SCRUM等のさまざまな方法論があります。
paraword
list
  [アジャイル/アジャイルa+統一/とういつ+プロセス/ぷろせす, XP/XP]
to root
  [有る/ある]
to reaf
  []
list
  [SCRUM/SCRUM, RUP/RUP]
to root
  [方法/ほうほう+論/ろん, 有る/ある]
to reaf
  []
description : アジャイル/アジャイルa+統一/とういつ+プロセス/ぷろせす
	 : 対してアジャイルはその正反対の状況を得意とします。
clueword:
まで, 小さい, 問題, プロセス, 小さい, プロセス, 細分, プロセス, プロセス, サイクル, 方法, サイクル, 的だ, サイクル
image : 0.0390575864147
table : 0.0542781687701
graph : 0.0189200680274
flow : 0.0804809899682

In Section 10, Score:0.174594
Flag：：0001
例えばRUPにおいては、ただやみくもにサイクルを実行するのではなく、各サイクルを「方向付け」「推敲（すいこう）」「作成」「移行」という4つのフェーズに分類し、これらのフェーズを経てリリースにいたります。各フェーズは1つ以上の反復で構成されます。このように、短いスパンで成果物をリリースし、その都度評価を行うことにより、リスクを最小化しようとしたのがRUPのアジャイルプロセスです。
paraword
list
方向付け/ほうこうづけv:
推敲/すいこう?遂行/すいこう:推敲/すいこう
移行/いこう:推敲/すいこう
作成/さくせい:推敲/すいこう
to root
  [言う/いう, 4/4+角/つの+フェーズ/フェーズ, 分類/ぶんるい, 至る/いたる]
to reaf
  []
clueword:
以上, 短い, 分類, 例えば, 構成, プロセス, その, これ, 作成, サイクル, サイクル
image : 0.0418809002031
table : 0.0795811358823
graph : 0.0373810566116
flow : 0.0157509157509

In Section 4, Score:0.131679
Flag：：0001
ウォーターフォールプロセスは、従来のソフトウエア開発において最もポピュラーな開発プロセスであり、「要求分析」「設計」「実装」「テスト」「結合」を順序通りにこなしていきます。滝から水が落ちるように、前工程の成果物に基づき次の工程の作業を行い、前工程への手戻りを想定していません。
paraword
list
  [要求/ようきゅう+分析/ぶんせき, 実装/じっそう, 設計/せっけい, テスト/てすと, 結合/けつごう]
to root
  [こなす/こなす]
to reaf
  []
clueword:
プロセス, 工程, 工程, 工程, 通り, 分析, ようだ, 最も, 順序, プロセス, から
image : 0.00353682951619
table : 0.0160177776453
graph : 0.00953334620205
flow : 0.102591016466

In Section 12, Score:0.095889
Flag：：0000
つまり、このプロセスはプロダクトオーナーに負担が掛かりやすいと言えます。開発者を用意してプロセスに乗せるだけで、希望したものができてくるということはありません。
しかし、これは「アジャイルだから」という問題ではなく、アジャイルの本質を理解しないまま似非（えせ）アジャイルを実践することによる問題です。アジャイルプロセスの理解は、ウォーターフォールのそれよりもはるかに困難です。
paraword
list
問題/もんだい:アジャイル/アジャイルa,本質/ほんしつ,似/にv+非/ひ,理解/りかい,得/えv+瀬/せ?背/せ+アジャイル/アジャイルa,実践/じっせん,こと/こと,よる/よる
問題/もんだい:これ/これ,アジャイルだ/アジャイルだ,言う/いう
to root
  []
to reaf
  [しかし/しかし]
clueword:
プロセス, プロセス, より, 問題, から, つまり, これ, 問題, プロセス, やすい, それ
image : 0.00522290209789
table : 0.0313907502146
graph : 0.00537480376763
flow : 0.0539003454352

In Section 8, Score:0.071182
Flag：：0000
ウォーターフォールプロセスをうまくコントロールし、リスクを担保できるプロジェクトが少なかったという数値の裏付けが、この値から導き出されます。そこで、このプロセスの弱点を克服すべく登場したのが反復開発を軸とするアジャイルプロセスでした。
paraword
clueword:
プロセス, から, 少ない, プロセス, プロセス, そこ
image : 0.00407717282725
table : 0.00263929618771
graph : 0.00491796158671
flow : 0.0595478624751

In Section 11, Score:0.064292
Flag：：1000
アジャイルでは以下の要素すべてが成り立たない限り、コミュニケーションコストだけが増大してプロジェクトは崩壊します。
・メンバー間の意思疎通
・問題の理解
・解決策の提案
paraword
clueword:
すべて, 問題, 以下, 増大, 要素
image : 0.0196940666698
table : 0.0357003273818
graph : 0.00592163788592
flow : 0.00297619047619

In Section 1, Score:0.061621
Flag；；1000
さまざまな開発手法
開発プロジェクトに内在するリスク
アジャイルソフトウエア開発という言葉が生まれて約8年が経過しました。その間、従来型であるウォーターフォール開発プロセスと対比して、さまざまな議論が繰り返されてきたのはご存じの通りです。
本連載では、代表的な開発手法の紹介および、弊社プロダクトであるSIOSApplications（ProjectKeeper／SalesForceAutomation＋）における事例を元に、その開発手法の選定に至るまでのプロセスを紹介します。
paraword
list
SIOSApplications/SIOSApplications:弊社/へいしゃ+プロ/ぷろ+ダクト/だくと
紹介/しょうかい:開発/かいはつ+手法/しゅほう
to root
  [紹介/しょうかい]
to reaf
  [本/ほん+連載/れんさい, 代表/だいひょう+的だ/てきだ]
clueword:
プロセス, 対比, 通り, プロセス, その, まで, 的だ, 代表, その, 経過
image : 0.00792915602111
table : 0.0260460061945
graph : 0.00191326530612
flow : 0.0257326007326

In Section 3, Score:0.049825
Flag：：0100
ウォーターフォール開発プロセス
ウォーターフォール開発プロセスとアジャイル開発プロセスの根本的な違いは、実行可能なソフトウエア（ビルド）を単位として開発を反復するか否かにあります。
paraword
list
  [ウォーターフォール/ウォーターフォール+開発/かいはつ+プロセス/ぷろせす, アジャイル/アジャイルa+開発/かいはつ+プロセス/ぷろせす]
to root
  [違い/ちがいv, 有る/ある]
to reaf
  []
description : アジャイル/アジャイルa+開発/かいはつ+プロセス/ぷろせす
	 : 対してアジャイルはその正反対の状況を得意とします。
clueword:
プロセス, プロセス, プロセス, 違い, 的だ
image : 0.00628168844441
table : 0.0237729115681
graph : 0.00191326530612
flow : 0.0178571428571

In Section 6, Score:0.002537
Flag：：0000
ユーザーは出来上がったシステムを目の当たりにして初めて、自分たちが望んでいないものを理解します。また、市場は常に流動しており、提案時には最先端の製品であったにも関わらず、開発完了時には市場の期待に沿っているとは限りません。ビジネスは常に変化していくものです。
paraword
clueword:
変化
image : 0.0
table : 0.0
graph : 0.000941028858217
flow : 0.00159574468085

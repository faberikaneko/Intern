In Section 14, Score:0.894652
Ｆｌａｇ：：０１００
開発プロセスにより何が変わるのか
ここで、両プロセスを比較してみます。
そして、ウォーターフォールプロセスが得意とする状況とされるのは以下の通りです。
・高い可用性が求められるシステムである場合
・メンバーの開発経験が少ない場合
・要件がほとんど変わらない場合
・開発メンバーの数が多い場合
・組織的文化が秩序を重視するものである場合
対してアジャイルはその正反対の状況を得意とします。
・可用性よりも優先されるものがあるシステム
・メンバーとして開発に熟練した開発者が参加している場合
・要件が常に変化していく場合
・開発メンバーの数が少ない場合
・組織的文化がさまざまな状況に意欲を持って取り組む場合
paraword
description : アジャイル/アジャイルa+開発/かいはつ+プロセス/ぷろせす
	 : 対してアジャイルはその正反対の状況を得意とします。
description : アジャイル/アジャイルa+統一/とういつ+プロセス/ぷろせす
	 : 対してアジャイルはその正反対の状況を得意とします。
clueword:
対する, 多い, より, 的だ, 場合, さまざまだ, 比較, プロセス, その, 通り, 少ない, 高い, 変化, ほとんど, 状況, そして, 以下, ここ
image : 0.04955741552
table : 0.709009589144
graph : 0.0916180105563
flow : 0.0444671387717

In Section 2, Score:0.438896
Ｆｌａｇ：：０１００
開発手法は単純にウォーターフォールが悪い、アジャイルは良い、というものではなく、重要なのはプロジェクトを失敗させないことにあります。どのような開発手法においても、プロジェクトには必ずリスクが存在します。プロジェクト失敗の原因の多くは以下のようなものです。
・スケジュールの欠陥―強気過ぎるスケジュールは悪。予実の乖離（かいり）を生み出す。
・要求の増大（変更）―外的要因も影響し、時間の経過と共に要求は変わっていく。
・人員の離脱―見積もりの時点で、メンバー離職の可能性は大抵考慮されていない。
・仕様の崩壊―仕様はあいまいに作れるが、製品はあいまいに作れない。
・生産性の低迷―少人数チームでは平均値のブレが大きい。能力がマイナスに振れるリスク
これらのリスクが担保できるのであれば、開発プロセスがアジャイルでもウォーターフォールであっても構いません。それぞれのメリット・デメリットを検討した上、よりプロジェクトが成功しやすい開発プロセスを選択すべきです。
paraword
clueword:
より, 増大, 悪い, これ, 構う, 以下, ようだ, 多く, メリット, 的だ, やすい, 経過, デメリット, 大きい, プロセス, 要因, それぞれ, 時間, 平均, 過ぎる, 影響, 時点, 原因
image : 0.0453447457995
table : 0.320496301568
graph : 0.0515100989631
flow : 0.0215446243387

In Section 5, Score:0.430414
Ｆｌａｇ：：１０００
・システムのユーザーは、自分自身がどんなシステムが欲しいのかを理解しておらず、さらに、要求を明確に伝えることができない。
・仮にすべての要求を明確にすることができたとしても、そのすべてを実装に落とし込むために必要な詳細には達しない。
・仮にすべての詳細を知ることができたとしても、通常それは複雑過ぎて、人間の理解の範囲を超えている。
・仮に人間がこのすべての複雑な要求を理解できたとしても、外的要因により要件は変化する。場合によっては、以前の決定事項を覆すこともある。
paraword
clueword:
この, 的だ, 場合, 要因, すべて, その, 範囲, 以前, さらに, 変化, それ, 過ぎる, 事項, 通常, 複雑だ
image : 0.0341613107726
table : 0.357188880987
graph : 0.0173461237391
flow : 0.0217175707099

In Section 15, Score:0.392887
Ｆｌａｇ：：００００
アジャイルプロセスでは、プロジェクトの早い段階から「動くコード」を作成します。当然、機能はまったく足りないかもしれませんが、実装したところまでは動かすことができるコードになっているはずです。また、小さく作りこんでいくプロセスなので、サイクルごとにかじ取りの判断ができ、顧客からの要望が取り入れやすいのが特徴です。アジャイルプロセスの基本スタンスは、変化を受け入れることで、要求の変更が前提に考えられています。
ＰｒｏｊｅｃｔＫｅｅｐｅｒ／ＳａｌｅｓＦｏｒｃｅＡｕｔｏｍａｔｉｏｎ＋の開発プロセス
最初のバージョンの開発が始まってから約４年がたちましたが、当初はメンバー約２名で立ち上げました。自社製のＷｅｂシステム構築用のフレームワークがあったことや、受託開発でさまざまなシステムを構築した経験があったメンバーであったため２名で約６ヶ月の期間で開発を行うことはできました。
当初はパッケージ開発におけるノウハウはほとんどなかったため、受託開発時に当時よく使っていたウォーターフォール手法を必然的に採用しました。
しかし、パッケージ製品の開発においては延々と開発を継続していかなければならず、受託開発のように納品することで、開発が完了するわけではありません。製品は日々進化する必要があり、顧客からのフィードバックをスムーズに製品に取り入れていかなければ、製品の魅力を維持することができません。
仕様変更、機能拡張がたびたび発生していく状況では、各機能間の整合性や品質を維持することが困難になり、開発プロセスをより仕様変更に強いアジャイル開発手法へスイッチすることで、柔軟な仕様変更、スピーディーな製品リリースを行うことができるようになりました。
昨今では多種多様なシステムが身の回りに存在しています。さまざまなシステムを目にし、操作することで、古いシステムの操作性や機能へ不満を抱く機会も多くなるでしょう。このような顧客を常に満足させるためには、システムは常に進化していかなければならず、おのずと今後の開発手法の主流はアジャイルへと進んでいくのではないでしょうか？
paraword
list
こと/こと:自社/じしゃ+製/せい,Ｗｅｂ/うぇぶ?Ｗｅｂ/Ｗｅｂ+システム/しすてむ+構築/こうちく+用/よう,フレームワーク/フレームワーク,有る/ある?会う/あう?合う/あう
メンバー/めんばー:様々だ/さまざまだ,受託/じゅたく+開発/かいはつ,システム/しすてむ,構築/こうちく,経験/けいけん,有る/ある?会う/あう?合う/あう
to root
  [為/ため, 行う/おこなう]
to reaf
  []
list
  [機能/きのう+拡張/かくちょう, 仕様/しよう+変更/へんこう]
to root
  [スイッチ/すいっち, こと/こと, 行う/おこなう]
to reaf
  []
list
  [整合/せいごう+性/せい, 品質/ひんしつ]
to root
  [維持/いじ, こと/こと, 困難だ/こんなんだ, スイッチ/すいっち, こと/こと, 行う/おこなう]
to reaf
  [各/かく+機能/きのう]
list
製品/せいひん+リリース/りりーす:スピーディーだ/すぴーでぃーだ
仕様/しよう+変更/へんこう:柔軟だ/じゅうなんだ
to root
  [行う/おこなう]
to reaf
  []
list
  [操作/そうさ+性/せい, 機能/きのう]
to root
  [抱く/いだく?抱く/だく, 機会/きかい, 多い/おおい]
to reaf
  [古い/ふるい, システム/しすてむ]
clueword:
当初, 基本, 状況, 今後, ほとんど, 多い, 維持, 考える, 変化, 始まる, 的だ, 最初だ, 作成, 期間, より, ようだ, 作る, まで, から, 特徴, 主流, プロセス, サイクル, 発生, さまざまだ, 小さい, やすい, 使う
image : 0.104378683789
table : 0.104293901945
graph : 0.074675111539
flow : 0.109539633911

In Section 13, Score:0.363281
Ｆｌａｇ：：００１０
統計・分析における開発現場の実態
独立行政法人情報処理推進機構（ＩＰＡ）の統計（出典：『ソフトウェア開発データ白書２００８』）によると、実に９５％以上のプロジェクトがウォーターフォール型のライフサイクルで開発されています。恐らく、ウォーターフォール型のプロセスの方が誰にでも理解しやすいこと、改修案件の場合など前回のプロセスがウォーターフォール型であったため、今回も同じプロセスを採用するという心理が働いたりすることが原因ではないかと考えられます。
次に、ユーザーの要求仕様に関して、３５％以上のプロジェクトは「あいまい」であり、３０％以上のプロジェクトで「ユーザー担当者の要求仕様への関与が不十分」という統計もあります。
その結果、ＱＣＤをすべて達成したと評価するプロジェクトは全体の２／３程度で、残りは品質、コスト、工期のいずれかの項目が計画通りに達成できなかったというデータもあります。このように、３つに１つのプロジェクトは、ウォーターフォールの当初の計画通りに進んでないということになります。つまり、プロジェクトの初期段階で完全な計画を立てるのは非常に難しいことが分かります。
paraword
list
有る/ある:３０/さんぜろ+％/ぱーせんと,ユーザー/ゆーざー+担当/たんとう+者/しゃ,要求/ようきゅう+仕様/しよう,関与/かんよ,不十分だ/ふじゅうぶんだ,言う/いう,プロジェクト/ぷろじぇくと,統計/とうけい
曖昧/あいまいa:ユーザー/ゆーざー,要求/ようきゅう+仕様/しよう,３５/さんご+％/ぱーせんと,関する/かんする,プロジェクト/ぷろじぇくと
to root
  []
to reaf
  [次に/つぎに]
list
  [工期/こうき, コスト/こすと, 品質/ひんしつ]
to root
  [いずれ/いずれ, 項目/こうもく, 達成/たっせい, 言う/いう, データ/でーた, 有る/ある]
to reaf
  []
clueword:
分析, コスト, 同じだ, 統計, 計画, 項目, 当初, 処理, 初期, 通り, 次に, 以上, 全体, 場合, プロセス, サイクル, その, 程度, 考える, やすい, すべて, でも, つまり, 原因
image : 0.050941677893
table : 0.18706362838
graph : 0.0340550799914
flow : 0.0912202463553

In Section 9, Score:0.320468
Ｆｌａｇ：：１０００
アジャイル開発プロセス
アジャイル開発プロセスでは１つの開発サイクルを小さく（１サイクルの要求を小さく）し、開発の各サイクルをプロジェクトが完了するまで反復します。問題を細分化し、段階的に開発を進めていきます。アジャイルプロセスの中には、ＸＰ、アジャイル統一プロセス（ＲＵＰ）、ＳＣＲＵＭ等のさまざまな方法論があります。
paraword
list
  [ＸＰ/ＸＰ, アジャイル/アジャイルa+統一/とういつ+プロセス/ぷろせす]
to root
  [有る/ある]
to reaf
  []
list
  [ＲＵＰ/ＲＵＰ, ＳＣＲＵＭ/ＳＣＲＵＭ]
to root
  [方法/ほうほう+論/ろん, 有る/ある]
to reaf
  []
description : アジャイル/アジャイルa+統一/とういつ+プロセス/ぷろせす
	 : 対してアジャイルはその正反対の状況を得意とします。
clueword:
細分, まで, さまざまだ, プロセス, サイクル, 方法, 問題, 的だ, 小さい
image : 0.0687470741833
table : 0.181649509289
graph : 0.0120430143084
flow : 0.0580285931073

In Section 11, Score:0.183884
Ｆｌａｇ：：１０００
アジャイルでは以下の要素すべてが成り立たない限り、コミュニケーションコストだけが増大してプロジェクトは崩壊します。
・メンバー間の意思疎通
・問題の理解
・解決策の提案
paraword
clueword:
増大, 要素, 問題, 以下, コスト, すべて
image : 0.0185221521373
table : 0.15458324898
graph : 0.00839741045303
flow : 0.00238095238095

In Section 10, Score:0.159946
Ｆｌａｇ：：０００１
例えばＲＵＰにおいては、ただやみくもにサイクルを実行するのではなく、各サイクルを「方向付け」「推敲（すいこう）」「作成」「移行」という４つのフェーズに分類し、これらのフェーズを経てリリースにいたります。各フェーズは１つ以上の反復で構成されます。このように、短いスパンで成果物をリリースし、その都度評価を行うことにより、リスクを最小化しようとしたのがＲＵＰのアジャイルプロセスです。
paraword
list
方向付け/ほうこうづけv:
推敲/すいこう?遂行/すいこう:推敲/すいこう
作成/さくせい:推敲/すいこう
移行/いこう:推敲/すいこう
to root
  [言う/いう, フェーズ/フェーズ, 分類/ぶんるい, 至る/いたる]
to reaf
  []
clueword:
作成, 構成, プロセス, サイクル, これ, その, 短い, 例えば, 分類, 以上
image : 0.0341310821237
table : 0.0728291627093
graph : 0.0298120507413
flow : 0.0231734198253

In Section 4, Score:0.147651
Ｆｌａｇ：：０００１
ウォーターフォールプロセスは、従来のソフトウエア開発において最もポピュラーな開発プロセスであり、「要求分析」「設計」「実装」「テスト」「結合」を順序通りにこなしていきます。滝から水が落ちるように、前工程の成果物に基づき次の工程の作業を行い、前工程への手戻りを想定していません。
paraword
list
  [設計/せっけい, 実装/じっそう, テスト/てすと, 結合/けつごう, 要求/ようきゅう+分析/ぶんせき]
to root
  [こなす/こなす]
to reaf
  []
clueword:
分析, 順序, から, 最も, プロセス, 通り, 工程, ようだ
image : 0.0562433271778
table : 0.0128601962654
graph : 0.00999296009756
flow : 0.0685545546326

In Section 7, Score:0.121269
Ｆｌａｇ：：００１０
その結果、プロジェクトの実績を品質コスト工期（ＱＣＤ）の視点から評価した結果、コストと納期は比較的順守されているものの、品質に関しては計画値に達しないプロジェクトが２０％以上にのぼり、ＱＣＤをすべて達成したと評価するプロジェクトは６３％にとどまります。
paraword
list
  [コスト/こすと, 納期/のうき]
to root
  [遵守/じゅんしゅ, もの/もの, 止まる/とどまる]
to reaf
  []
description : 納期/のうき
	 : その結果、プロジェクトの実績を品質コスト工期（ＱＣＤ）の視点から評価した結果、コストと納期は比較的順守されているものの、品質に関しては計画値に達しないプロジェクトが２０％以上にのぼり、ＱＣＤをすべて達成したと評価するプロジェクトは６３％にとどまります。
clueword:
コスト, から, 比較的, その, 以上, 計画, すべて
image : 0.0263874664025
table : 0.0244534779615
graph : 0.0194318116463
flow : 0.0509957607774

In Section 12, Score:0.087401
Ｆｌａｇ：：００００
つまり、このプロセスはプロダクトオーナーに負担が掛かりやすいと言えます。開発者を用意してプロセスに乗せるだけで、希望したものができてくるということはありません。
しかし、これは「アジャイルだから」という問題ではなく、アジャイルの本質を理解しないまま似非（えせ）アジャイルを実践することによる問題です。アジャイルプロセスの理解は、ウォーターフォールのそれよりもはるかに困難です。
paraword
list
問題/もんだい:これ/これ,アジャイルだ/アジャイルだ,言う/いう
問題/もんだい:アジャイル/アジャイルa,本質/ほんしつ,似/にv+非/ひ,理解/りかい,得/えv+瀬/せ?背/せ+アジャイル/アジャイルa,実践/じっせん,こと/こと,よる/よる
to root
  []
to reaf
  [しかし/しかし]
clueword:
より, から, プロセス, これ, この, それ, 問題, やすい, つまり
image : 0.00637800280641
table : 0.0324881304167
graph : 0.00965168489517
flow : 0.0388828104366

In Section 1, Score:0.068873
Ｆｌａｇ；；１０００
さまざまな開発手法
開発プロジェクトに内在するリスク
アジャイルソフトウエア開発という言葉が生まれて約８年が経過しました。その間、従来型であるウォーターフォール開発プロセスと対比して、さまざまな議論が繰り返されてきたのはご存じの通りです。
本連載では、代表的な開発手法の紹介および、弊社プロダクトであるＳＩＯＳＡｐｐｌｉｃａｔｉｏｎｓ（ＰｒｏｊｅｃｔＫｅｅｐｅｒ／ＳａｌｅｓＦｏｒｃｅＡｕｔｏｍａｔｉｏｎ＋）における事例を元に、その開発手法の選定に至るまでのプロセスを紹介します。
paraword
list
紹介/しょうかい:開発/かいはつ+手法/しゅほう
ＳＩＯＳＡｐｐｌｉｃａｔｉｏｎｓ/ＳＩＯＳＡｐｐｌｉｃａｔｉｏｎｓ:弊社/へいしゃ+プロ/ぷろ+ダクト/だくと
to root
  [紹介/しょうかい]
to reaf
  [本/ほん+連載/れんさい, 代表/だいひょう+的だ/てきだ]
clueword:
代表, 的だ, まで, 経過, 対比, プロセス, その, 通り, さまざまだ
image : 0.0124486371212
table : 0.0279583178258
graph : 0.00180722891566
flow : 0.026659082474

In Section 8, Score:0.058355
Ｆｌａｇ：：００００
ウォーターフォールプロセスをうまくコントロールし、リスクを担保できるプロジェクトが少なかったという数値の裏付けが、この値から導き出されます。そこで、このプロセスの弱点を克服すべく登場したのが反復開発を軸とするアジャイルプロセスでした。
paraword
clueword:
そこ, から, プロセス, 少ない, この
image : 0.00414922693497
table : 0.00316715542525
graph : 0.00763763880771
flow : 0.0434008240685

In Section 3, Score:0.038899
Ｆｌａｇ：：０１００
ウォーターフォール開発プロセス
ウォーターフォール開発プロセスとアジャイル開発プロセスの根本的な違いは、実行可能なソフトウエア（ビルド）を単位として開発を反復するか否かにあります。
paraword
list
  [アジャイル/アジャイルa+開発/かいはつ+プロセス/ぷろせす, ウォーターフォール/ウォーターフォール+開発/かいはつ+プロセス/ぷろせす]
to root
  [違い/ちがいv, 有る/ある]
to reaf
  []
description : アジャイル/アジャイルa+開発/かいはつ+プロセス/ぷろせす
	 : 対してアジャイルはその正反対の状況を得意とします。
clueword:
的だ, プロセス
image : 0.0250427438804
table : 0.00200085071599
graph : 0.00180722891566
flow : 0.0100482483742

In Section 6, Score:0.002104
Ｆｌａｇ：：００００
ユーザーは出来上がったシステムを目の当たりにして初めて、自分たちが望んでいないものを理解します。また、市場は常に流動しており、提案時には最先端の製品であったにも関わらず、開発完了時には市場の期待に沿っているとは限りません。ビジネスは常に変化していくものです。
paraword
clueword:
変化
image : 0.0
table : 0.0
graph : 0.000827586206896
flow : 0.00127659574468

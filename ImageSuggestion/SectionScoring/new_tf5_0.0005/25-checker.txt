Section:4
	Ｆｌａｇ：：０１００
	コーディング規約の内容
	コーディング規約の内容は、プロジェクトの規模や特性、参加メンバーのスキル、使用言語などにより変更すべきですが、たいていこんな内容が書かれています。
	目的
	プロジェクトの構成
	命名規則
	コーディングスタイル
	禁止事項
	制限事項
	推奨事項
	目的
	そのコーディング規約の適用範囲、なぜ必要なのか、それを守ることによりどんなメリットがあるかを書く。
	プロジェクトの構成
	コーディングにはあまり関係なさそうな内容ですが、ソースプログラムの先頭にコメントを入れたりするのに使います。
	プロジェクトの名称などはあらかじめ決まっていることが多いので、もし、そうなら一覧表を付けます。
	メタ情報の指定方法、フォルダの構成方法なども決めておきます。
	命名規則
	変数、定数、メソッド（関数）、クラスなどの名前の付け方の基準を決める。
	変数名の先頭は小文字だとか、クラス名の先頭は大文字だとかがよく使われます。
	コーディングスタイル
	コーディングスタイルはインデントの仕方とか、中かっこの位置とか、コメントの位置や内容とかを決めておきます。
	リソース
	エラーメッセージなどはハードコーディングしないで、よくリソースファイルのインデックスを指定したりします。
	もし使うなら、リソースの使用についての説明、制限なども書いておきましょう。
	（あまり大きいリソースの管理はたいへんなのでバランスを考えたほうがいいです。特にＩＤＥを使う場合。）
	禁止事項
	使ってはいけない文法や今はほとんど使われない保守用になっているものとかを揚げておきます。
	一律に禁止でなく、場合によっては例外も設けておきます。
	（なぜ禁止なのか、その理由も必ず書きます）
	制限事項
	あまり推奨されない機能、コーディング方法、クラスなどを揚げておきます。
	また、その条件を明示します。
	推奨事項
	好ましいコーディング方法や複数の似たようなクラスや関数などがある場合、どちらが推奨されるかを書いておきます。
Score:0.000513058306549
EACH_TAG_SCORE:
	image:0.000124287173622
	table:0.000219575347652
	graph:7.89470511838e-05
	flow:9.02487340903e-05
PARA:
Clueword:
	仕方:[0.0033,0.0023,0.0066,0.0000]
	方法:[0.0134,0.0046,0.0504,0.0000]
	付ける:[0.0000,0.0000,0.0046,0.0000]
	バランス:[0.0000,0.0082,0.0000,0.0103]
	メリット:[0.0069,0.0000,0.0000,0.0000]
	多い:[0.0038,0.0063,0.0000,0.0243]
	条件:[0.0327,0.0017,0.0000,0.0000]
	場合:[0.0948,0.0034,0.0000,0.0065]
	書く:[0.0000,0.0018,0.0092,0.0000]
	関係:[0.0052,0.0092,0.0000,0.0013]
	大きい:[0.0090,0.0072,0.0000,0.0089]
	構成:[0.0025,0.0042,0.0000,0.0147]
	範囲:[0.0000,0.0213,0.0000,0.0000]
	考える:[0.0013,0.0000,0.0000,0.0000]
	位置:[0.0000,0.0270,0.0000,0.0000]
	一覧:[0.0024,0.0045,0.0000,0.0000]
	事項:[0.0042,0.0012,0.0000,0.0000]
	内容:[0.0000,0.0010,0.0000,0.0000]
	使う:[0.0000,0.0000,0.0047,0.0000]
	基準:[0.0042,0.0000,0.0000,0.0000]
True-Positive

Section:3
	Ｆｌａｇ：：０１００
	コーディング規約のメリット・デメリット
	コーディング規約のメリットはプログラマの個性を殺して均質なプログラムを作ること、過去の知識や経験から得られたバグの発生源となりやすいコーディングの防止、インデントやコメントの基準を決めて見やすさ保守性の高さを求める・・・等々です。
	一方、デメリットですが、使える文法を制限してスキルの高いプログラマの生産性を殺したり、過去のプログラムとの互換性を追求するあまり新しい機能の使用を制限したり・・・等々があります。
	一般に、大きなプロジェクトほどコーディング規約の内容は強制的、制限的です。
	これは、大きなプロジェクトだと、スキルの低い人もメンバーに入っていることが多く、コーディングを自由にやらせると、品質が落ちたり、プログラムが見づらく保守性が悪くなるったりするためです。
Score:0.000431428387727
EACH_TAG_SCORE:
	image:6.29775577444e-05
	table:0.000143623945546
	graph:0.000199789441393
	flow:2.50374430427e-05
PARA:
Clueword:
	低い:[0.0000,0.0039,0.0000,0.0138]
	多い:[0.0038,0.0063,0.0000,0.0243]
	悪い:[0.0000,0.0005,0.0000,0.0000]
	大きな:[0.0000,0.0026,0.0000,0.0050]
	メリット:[0.0069,0.0000,0.0000,0.0000]
	作る:[0.0016,0.0000,0.0040,0.0000]
	デメリット:[0.0076,0.0007,0.0000,0.0000]
	一方:[0.0222,0.0000,0.0000,0.0046]
	高い:[0.0000,0.0011,0.0000,0.0177]
	過去:[0.0000,0.0000,0.0051,0.0015]
	基準:[0.0042,0.0000,0.0000,0.0000]
	一般に:[0.0000,0.0008,0.0000,0.0000]
	的だ:[0.0063,0.0061,0.0000,0.0037]
	発生:[0.0000,0.0000,0.0000,0.0026]
	内容:[0.0000,0.0010,0.0000,0.0000]
False-Negative

Section:5
	Ｆｌａｇ：：００００
	コーディング規約を作るときの注意
	続く．．
	ＶＢ．ＮＥＴ版のサンプルを作ってみました
	たたき台程度の内容ですが、参考になればと思います。
	あと、用例も入れたほうがいいですね。
Score:0.00036013219012
EACH_TAG_SCORE:
	image:5.76896839715e-05
	table:4.00791818704e-05
	graph:7.51818313959e-05
	flow:0.000187181492883
PARA:
Clueword:
	続く:[0.0000,0.0000,0.0123,0.0000]
	程度:[0.0024,0.0046,0.0020,0.0074]
	作る:[0.0016,0.0000,0.0040,0.0000]
	内容:[0.0000,0.0010,0.0000,0.0000]
True-Negative

Section:2
	Ｆｌａｇ：：１０００
	内容は変数などの命名規則、禁止事項（例えばｇｏｔｏ文はダメとか）、コメントの付け方とか、いろいろプロジェクトの特性やその会社の文化などで変わります。
Score:0.000340666667357
EACH_TAG_SCORE:
	image:0.000211692439099
	table:7.49307631605e-05
	graph:0.0
	flow:5.40434650971e-05
PARA:
Clueword:
	内容:[0.0000,0.0010,0.0000,0.0000]
	付ける:[0.0000,0.0000,0.0046,0.0000]
	例えば:[0.0022,0.0158,0.0000,0.0000]
	事項:[0.0042,0.0012,0.0000,0.0000]
False-Negative

Section:1
	Ｆｌａｇ：：００００
	コーディング規約とは
	「コーディング規約」は多数のプログラマが参加するプロジェクトにおいて、プログラミング品質を均等にするために定める文書です。
Score:1.46387095978e-05
EACH_TAG_SCORE:
	image:1.46387095978e-05
	table:0.0
	graph:0.0
	flow:0.0
PARA:
Clueword:
	文書:[0.0000,0.0012,0.0000,0.0000]
True-Negative

True-Negative:2
False-Positive:0
True-Positive:1
False-Negative:2
precision = 1.000000
recall = 0.333333
fvalue = 0.500000